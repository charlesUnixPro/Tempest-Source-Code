	.OPT	LIST

; 11Dec11 cac
;   In selftest, an "M" appears
;   From "Tempest  Detailed theory of operation.html",
;
;     The [...] 4 socketed 40-pin chips on the math box (at locations E2, F/H2, 
;     J2 and K/L2 on Tempest) are called "transistor array"s by the manual and 
;     the chips themselves carry only the Atari part number 137004-001 on them 
;     in an attempt to hide their true identity (to keep people from making 
;     illegal copies of the game?) They are really 2901 bit-slice ALUs, which 
;     were very popular and are fairly commonly available. They were made by 
;     AMD and a number of other vendors. In a technical sense the part really 
;     is a transistor array, but calling it that serves no purpose other than 
;     obfuscation. These go bad every now and then and will generate an "M" on 
;     the self-test screen. NOTE: the "M" is a generic "M"ath box failure 
;     indicator and does not necessarily indicate that an ALU is bad; lots of 
;     failures cause the "M" indicator to appear but one of the most frequent 
;     causes is bad ALUs (Note: The most frequent cause I've seen is the 
;     interboard cable failing. Check that first, as it's a lot easier to 
;     fix -- Nick).
;
;   During self test screen 1, the code does a 24 bit divide on 16 bit
;   numbers [0/0, 1/1, 2/2, ... ffff/ffff], compares the sign of the
;   result to the factors. This works up til $8000, at which point
;   a M error is diagnosed. I do not know if this is expected behavior,
;   or a bug in the math box code.
;

;
; Copy detection.
;     The vector generation character font defined here draws identical
;     images for "0" (zero) and "O" (oh). Some of the strings use
;     the syntactically incorrect character (spelling "foo" as eff zero
;     zero). I would guess that this is deliberate, allowing the 
;     detection of copied code.
;

; From MAME tempest.c
;
;       HEX        R/W   D7 D6 D5 D4 D3 D2 D2 D0  function
;       0000-07FF  R/W   D  D  D  D  D  D  D  D   program ram (2K)
;       0800-080F   W                D  D  D  D   Colour ram
;   
;       0C00        R                         D   Right coin sw
;       0C00        R                      D      Center coin sw
;       0C00        R                   D         Left coin sw
;       0C00        R                D            Slam sw
;       0C00        R             D               Self test sw
;       0C00        R          D                  Diagnostic step sw
;       0C00        R       D                     Halt
;       0C00        R    D                        3kHz ??
;       0D00        R    D  D  D  D  D  D  D  D   option switches
;       0E00        R    D  D  D  D  D  D  D  D   option switches
;   
;       2000-2FFF  R/W   D  D  D  D  D  D  D  D   Vector Ram (4K)
;       3000-3FFF   R    D  D  D  D  D  D  D  D   Vector Rom (4K)
;   
;       4000        W                         D   Right coin counter
;       4000        W                      D      left  coin counter
;       4000        W                D            Video invert - x
;       4000        W             D               Video invert - y
;       4800        W                             Vector generator GO
;   
;       5000        W                             WD clear
;       5800        W                             Vect gen reset
;   
;       6000-603F   W    D  D  D  D  D  D  D  D   EAROM write
;       6040        W    D  D  D  D  D  D  D  D   EAROM control
;       6040        R    D                        Mathbox status
;       6050        R    D  D  D  D  D  D  D  D   EAROM read
;   
;       6060        R    D  D  D  D  D  D  D  D   Mathbox read
;       6070        R    D  D  D  D  D  D  D  D   Mathbox read
;       6080-609F   W    D  D  D  D  D  D  D  D   Mathbox start
;   
;       60C0-60CF  R/W   D  D  D  D  D  D  D  D   Custom audio chip 1
;       60D0-60DF  R/W   D  D  D  D  D  D  D  D   Custom audio chip 2
;   
;       60E0        R                         D   one player start LED
;       60E0        R                      D      two player start LED
;       60E0        R                   D         FLIP
;   
;       9000-DFFF  R     D  D  D  D  D  D  D  D   Program ROM (20K)
;   
;       notes: program ram decode may be incorrect, but it appears like
;       this on the schematics, and the troubleshooting guide.
;   
;       ZAP1,FIRE1,FIRE2,ZAP2 go to pokey2 , bits 3,and 4
;       (depending on state of FLIP)
;       player1 start, player2 start are pokey2 , bits 5 and 6
;   
;       encoder wheel goes to pokey1 bits 0-3
;       pokey1, bit4 is cocktail detect
;   
;       TEMPEST SWITCH SETTINGS (Atari, 1980)
;       -------------------------------------
;   
;   
;       GAME OPTIONS:
;       (8-position switch at L12 on Analog Vector-Generator PCB)
;   
;       1   2   3   4   5   6   7   8   Meaning
;       -------------------------------------------------------------------------
;       Off Off                         2 lives per game
;       On  On                          3 lives per game
;       On  Off                         4 lives per game
;       Off On                          5 lives per game
;               On  On  Off             Bonus life every 10000 pts
;               On  On  On              Bonus life every 20000 pts
;               On  Off On              Bonus life every 30000 pts
;               On  Off Off             Bonus life every 40000 pts
;               Off On  On              Bonus life every 50000 pts
;               Off On  Off             Bonus life every 60000 pts
;               Off Off On              Bonus life every 70000 pts
;               Off Off Off             No bonus lives
;                           On  On      English
;                           On  Off     French
;                           Off On      German
;                           Off Off     Spanish
;                                   On  1-credit minimum
;                                   Off 2-credit minimum
;   
;       GAME OPTIONS:
;       (4-position switch at D/E2 on Math Box PCB)
;   
;       1   2   3   4                   Meaning
;       -------------------------------------------------------------------------
;           Off                         Minimum rating range: 1, 3, 5, 7, 9
;           On                          Minimum rating range tied to high score
;               Off Off                 Medium difficulty (see notes)
;               Off On                  Easy difficulty (see notes)
;               On  Off                 Hard difficulty (see notes)
;               On  On                  Medium difficulty (see notes)
;   
;       PRICING OPTIONS:
;       (8-position switch at N13 on Analog Vector-Generator PCB)
;   
;       1   2   3   4   5   6   7   8   Meaning
;       -------------------------------------------------------------------------
;       On  On  On                      No bonus coins
;       On  On  Off                     For every 2 coins, game adds 1 more coin
;       On  Off On                      For every 4 coins, game adds 1 more coin
;       On  Off Off                     For every 4 coins, game adds 2 more coins
;       Off On  On                      For every 5 coins, game adds 1 more coin
;       Off On  Off                     For every 3 coins, game adds 1 more coin
;       On  Off                 Off On  Demonstration Mode (see notes)
;       Off Off                 Off On  Demonstration-Freeze Mode (see notes)
;                   On                  Left coin mech * 1
;                   Off                 Left coin mech * 2
;                       On  On          Right coin mech * 1
;                       On  Off         Right coin mech * 4
;                       Off On          Right coin mech * 5
;                       Off Off         Right coin mech * 6
;                               Off On  Free Play
;                               Off Off 1 coin 2 plays
;                               On  On  1 coin 1 play
;                               On  Off 2 coins 1 play
;   
;   
;       GAME SETTING NOTES:
;       -------------------
;   
;       Demonstration Mode:
;       - Plays a normal game of Tempest, but pressing SUPERZAP sends you
;         directly to the next level.
;   
;       Demonstration-Freeze Mode:
;       - Just like Demonstration Mode, but with frozen screen action.
;   
;       Both Demonstration Modes:
;       - Pressing RESET in either mode will cause the game to lock up.
;         To recover, set switch 1 to On.
;       - You can start at any level from 1..81, so it's an easy way of
;         seeing what the game can throw at you
;       - The score is zeroed at the end of the game, so you also don't
;         have to worry about artificially high scores disrupting your
;         scoring records as stored in the game's EAROM.
;   
;       Easy Difficulty:
;       - Enemies move more slowly
;       - One less enemy shot on the screen at any given time
;   
;       Hard Difficulty:
;       - Enemies move more quickly
;       - 1-4 more enemy shots on the screen at any given time
;       - One more enemy may be on the screen at any given time
;   
;       High Scores:
;       - Changing toggles 1-5 at L12 (more/fewer lives, bonus ship levels)
;         will erase the high score table.
;       - You should also wait 8-10 seconds after a game has been played
;         before entering self-test mode or powering down; otherwise, you
;         might erase or corrupt the high score table.
;   
;   
; From 136002.txt
; Tempest Source Code
; -------------------
; The actual code is Copyright 1981 by Atari.
; Documentation is Copyright 1999 by Arcade Gameshop Corporation.
; All rights reserved. Additional rights granted through OpenContent
; License. See http://arcade.gameshop.com/opl.html
;
; No warranty or fitness for particular purpose expressed or implied.
;
; Updated 09/17/2004 by Josh McCormick
;
; Contributors:
; -------------
; Josh McCormick - Project lead and main documentarian.
;                  (http://www.galstar.com/~jmccorm)
; Clay Cowgill   - EAROM programming example, Vector ROM image list,
;                  MAME programming tips (http://www.multigame.com)
; Ken Lui        - Documentation of data segments on V1 roms.
;                  Provided a much better assembler/disassembler package.
;                  (http://www.ecst.csuchico.edu/~tempest)
;
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Coding conventions
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Identifiers starting with "_" are offets, indicies or enumerations

; Label notation
;
;	vg_sub_.....	Vector generator subroutine
;	vg_sub_char_X	VG sub to draw character "X"
;	vg_sub_image_X	VG sub to draw image "X"
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Constants
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

n_segments_per_tunnel	=	16
n_pending_enemies	=	64
n_enemies_on_screen	=	 7
n_player_bullets	=	 8
n_enemy_bullets		=	 4
n_levels		=	99
curlevel_red		=	17

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Pokey 
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;
;;; Pokey 1 register addresses
;;;

pokey1			=	$60c0

; Audio ports - WO

pokey1_audf1		=	$60c0
pokey1_audc1		=	$60c1
pokey1_audf2		=	$60c2
pokey1_audc2		=	$60c3
pokey1_audf3		=	$60c4
pokey1_audc3		=	$60c5
pokey1_audctl		=	$60c8	; W/O

; Control - WO

pokey1_rescan		=	$60cb
pokey1_skctls		=	$60cf

; Data for skctls
; $01 15KHz clock base
; $02 High pass filter into channel 2, clocked by channel 4
; $04 High pass filter into channel 1, clocked by channel 3
pokey_skctls_setup	=	$07

; Inputs - RO

; The encoder wheel output is a pair of sine waves (square waves will work 
; too) 90 degrees out of phase. The direction of the phase shift indicates 
; which direction the control is being turned. If the knob seems to be 
; operating backwards, swap the two outputs. The 4 inputs (potentially from 
; two knobs) are squared off by E6. D6 then selects which pair to use. C6 is 
; used to convert the two out of phase square waves into a simple clock and 
; direction signal (note that in doing so it introduces an error. The first 
; "click" in the opposite direction from the last movement may register as a 
; click in the wrong direction. Fortunately, the knob is very sensitive and 
; the software reduces the sensitivity so that this error is lost as noise). 
; This is fed into an up/down nibble counter, which forms 4 inputs to POKEY 
; #1. FIRE and ZAP go to POKEY #2 (again, after being chosen with D6). The 
; 1- and 2-player start buttons, DIP switches at D/E2, and the cocktail 
; signal all go to the POKEYs, thusly:
; 
pokey1_spinner_cabtyp	=	$60c8	; R/O
	;   BITS 0-3: Encoder Wheel
	;   BIT  4  : Cocktail detection
	;   BIT  5  : Switch #1 at D/E2
	;   BITS 6-7: Unused.

pokey1_rand		=	$60ca

; Fout = 15.6999 KHz / (audf + 7)

;;;
;;; Pokey 2 register addresses
;;;

pokey2			=	$60d0

; Audio ports - WO

pokey2_audf1		=	$60d0
pokey2_audc1		=	$60d1
pokey2_audctl		=	$60d8	; W/O

; Control - WO

pokey2_rescan		=	$60db
pokey2_skctls		=	$60df

; Inputs - RO

pokey2_zap_fire_starts	=	$60d8	; R/O
	; $03 = Difficulty
	;       $00 = Medium
	;       $01 = Easy
	;       $02 = Hard
	;       $03 = Medium
	; $04 = Rating
	;       $00 = 1, 3, 5, 7, 9
	;       $04 = tied to high score
	; $08 = zap button
	; $10 = fire button
	; $20 = 1p start button
	; $40 = 2p start button
	; $80 = unknown (nothing?)
pokey2_sw_diff_mask	=	$03
pokey2_sw_diff_val_easy	=	$01
pokey2_sw_diff_val_medium1	=	$00
pokey2_sw_diff_val_medium2	=	$03
pokey2_sw_diff_val_hard	=	$02
pokey2_btn_rating_mask	=	$04
pokey2_btn_zap_mask	=	$08
pokey2_btn_fire_mask	=	$10
pokey2_btn_start1p_mask	=	$20
pokey2_btn_start2p_mask	=	$40

pokey2_rand = $60da

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Other h/w registers 
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;
;;; Register @ 4000
;;;

vid_coins = $4000
	;  01 Right coin counter
	;  02 center coin counter
	;  04 left coind counter
	;  08 invert X
	;  10 invert Y
vid_coins_invert_x_mask	=	$08
vid_coins_invert_y_mask	=	$10


;;;
;;; Register @ 60e0
;;;

; The FLIP signal obtained from the coin counter register is used to feed D6, 
; which is used as a player 1/player 2 control arbitrator. If the cocktail 
; signal is grounded (POKEY 1, P4), then the program will assert the X and Y 
; invert signals and FLIP whenever it's player #2's turn in a 2 player game.
; 
leds_flip = $60e0
	;         Read                Write
	; bit $01 One player start  / 1 player start LED
	; bit $02 two  player start / 2 player start LED
	; bit $04 use 2 player controls on cocktail games
	;                           / flip player start 
	; ?? SAEN 2,3 (a debugging signal on the small connector on the aux board)

; Write bits
leds_flip_1p_led_val	=	$01
leds_flip_2p_lev_val	=	$02
leds_flip_alt_cntrls	=	$04
leds_flip_alt_mask	=	$04


;;;
;;; Switch register @ 0c00
;;;

cabsw = $0c00
	; $01 = right coin switch
	; $02 = middle coin switch
	; $04 = left coin switch (not used in arcade Tempest, I think)
	; $08 = slam switch
	; $10 = service switch
	; $20 = diagnostic step switch
	; $40 = halt bit from vector processor
	; $80 = 3KHz square wave
cabsw_r_coin_sw_mask	=	$01
cabsw_m_coin_sw_mask	=	$02
cabsw_l_coin_sw_mask	=	$04
cabsw_slam_sw_mask	=	$08
cabsw_service_sw_mask	=	$10
cabsw_diag_sw_mask	=	$20
cabsw_vg_halt_mask	=	$40
cabsw_3khz_mask		=	$80


;;;
;;; Switch register @ 0d00
;;;

optsw1			=	$0d00	; DIP switch N13
	; $03 = coinage
	;       $00 = 1 coin 1 credit
	;       $01 = 2 coins 1 credit
	;       $02 = free play
	;       $03 = 1 coin 2 credits
	; $0c = right coin multiplier
	;       $00 = x1
	;       $04 = x4
	;       $08 = x5
	;       $0c = x6
	; $10 = middle ("left") coin multiplier
	;       $00 = x1
	;       $10 = x2
	; $e0 = bonus coins
	;       $00 = none
	;       $20 = 1 each 2
	;       $40 = 1 each 4
	;       $60 = 2 each 4
	;       $80 = 1 each 5
	;       $a0 = 1 each 3
	;       $c0 = demo mode
	;       $e0 = demo mode freeze
_optsw1_coinage_mask	=	$03
_optsw1_r_coin_mult_mask	=	$0c
_optsw1_l_coin_mult_mask	=	$10
_optsw1_bonus_coins_mask	=	$e0
_optsw1_coinage_val_freeplay	=	$02
_optsw1_bonus_coins_val_1each5	=	$80
; This is used in main loop for some odd test
_optsw1_special_mask		=	$80
;;;
;;; Switch register @ 0e00
;;;

optsw2 = $0e00 ; DIP Switch L12
	; $01 = minimum
	;       $00 = 1 credit minimum
	;       $01 = 2 credit minimum
	; $06 = language
	;       $00 = English
	;       $02 = French
	;       $04 = German
	;       $06 = Spanish
	; $38 = points needed per bonus life
	;       $00 = 20000
	;       $08 = 10000
	;       $10 = 30000
	;       $18 = 40000
	;       $20 = 50000
	;       $28 = 60000
	;       $30 = 70000
	;       $38 = none
	; $c0 = initial lives
	;       $00 = 3
	;       $40 = 4
	;       $80 = 5
	;       $c0 = 2
optsw2_min_mask		=	$01
optsw2_lang_mask	=	$06
optsw2_pts_needed_mask	=	$38
optsw2_init_lives_mask	=	$c0

;;;
;;; Watchdog
;;;


;  The watchdog is comprised of counter D4, which is fed from the 3 kHz 
;  source. D4 divides the signal by 256, which means that a properly running 
;  program must access location 5000 at least once every 80 msec or so in 
;  order to avoid being reset.
watchdog = $5000


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Math board
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


mb_status_rd	=	$6040
mb_rd_l = $6060		; mathbox read
mb_rd_h = $6070		; mathbox read
mb_w_00 = $6080		; 6080-609f mathbox 

mb_set_00_l = mb_w_00+$00
mb_set_00_h = mb_w_00+$01
mb_set_01_l = mb_w_00+$02
mb_set_01_h = mb_w_00+$03
mb_set_02_l = mb_w_00+$04
mb_set_02_h = mb_w_00+$05
mb_set_03_l = mb_w_00+$06
mb_set_03_h = mb_w_00+$07
mb_set_04_l = mb_w_00+$08
mb_set_04_h = mb_w_00+$09
mb_set_05_l = mb_w_00+$0a
mb_cmd_0b   = mb_w_00+$0b
mb_set_06_l = mb_w_00+$0c
mb_set_10_l = mb_w_00+$0d
mb_set_10_h = mb_w_00+$0e
mb_set_11_l = mb_w_00+$0f
mb_set_11_h = mb_w_00+$10
mb_cmd_11   = mb_w_00+$11
mb_cmd_12   = mb_w_00+$12
mb_cmd_13   = mb_w_00+$13
mb_cmd_14   = mb_w_00+$14
mb_set_07_l = mb_w_00+$15
mb_set_07_h = mb_w_00+$16
mb_get_07   = mb_w_00+$17
mb_get_09   = mb_w_00+$18
mb_get_08   = mb_w_00+$19
mb_set_08_l = mb_w_00+$1a
mb_set_08_h = mb_w_00+$1b
mb_cmd_1c   = mb_w_00+$1c
mb_cmd_1d   = mb_w_00+$1d
mb_cmd_1e   = mb_w_00+$1e
mb_cmd_selftest   = mb_w_00+$1f

; mb divide command usage
;
mb_set_divisor_l	=	mb_set_07_l
mb_set_divisor_h	=	mb_set_07_h
mb_set_divide_width	=	mb_set_06_l
mb_set_dividend_l	=	mb_set_10_l
mb_set_dividend_m	=	mb_set_10_h
mb_set_dividend_h	=	mb_set_11_l
mb_cmd_divide		=	mb_cmd_14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; EAROM
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;
; EEPROM
;
; The EEPROM is a 64x8 one. It requires a -25 volt erase power supply, 
; which is supplied by K3 and its associated cirtuitry.
; Any write to the EEPROM Write area (6000-603F) latches the address pins for 
; the EEPROM. So a do-nothing write must take place before you can read a 
; location within the EEPROM.
; 
; Reading the EEPROM read register gates the EEPROM data pins onto the bus. 
; It will also gate the write register if it is not disabled with the correct 
; settings of the control register.
; 
; The bottom 4 bits of the control register location are latched by J3. The 
; outputs of J3 go to the control pins of the EEPROM.
; 
; Unfortunately, I can find no data on the EEPROM chip they used, so I can't 
; divine how the control signals are used.
;
;

earom_write = $6000	; EEPROM write
earom_ctrl_wr = $6040	; EEPROM control WO
earom_rd = $6050	; EEPROM read 


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Common macros
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;
;;; Building jump tables
;;;

	.macro	.jump
	.word	%1-1
	.endm

;;;
;;; Loading a 16 bit address
;;;

; ldax_me - lda highbyte, ldx lowbyte
	.macro	ldax_me	; addr
	lda	%1+1
	ldx	%1
	.endm

; ldax_im - lda #highbyte, ldx #lowbyte
	.macro	ldax_im	; addr
	lda	#>(%1)
	ldx	#<(%1)
	.endm

; ldax_my - lda highbyte, ldx lowbyte from zeropage,y
	.macro	ldax_my	; addr
	lda	%1+1,y
	ldx	%1,y
	.endm

;;;
;;; .tail - mark tail recursion, a subroutine returns a jumping into a 
;;;         different subroutine

	.macro	.tail
	.endm

;;;
;;; .fall - mark a fall through
;;;

	.macro	.fall	; addr
	.if	.def pass1_done
	.if	%1<>*
	.error	".fall fail"
	.endif
	.endif
	.endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Code layout and analysis
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; There is doubtless much that is wrong or missing here.  If you can help
; supply any missing bits, or correct anything wrong, please feel free to
; write me: mouse@rodents.montreal.qc.ca.
;
; General game state.  Whether we're running in selftest is not recorded
; here, so each value here has two interpretations, depending on whether
; we're in selftest.
;
; In selftest:
; $02 = first selftest screen (config bits, spinner line)
; $04 = second selftest screen (diagonal grid, line of characters)
; $06 = third selftest screen (crosshair, shrinking rectangle)
; $08 = fourth selftest screen (coloured lines)
; $0a = fifth selftest screen, grid with colour depending on spinner
; $0c = sixth selftest screen, blank rectangle
;
; Not in selftest (see table at Lc7da):
; $00 = entered briefly at game startup
; $02 = entered briefly at the beginning of first level of a game
; $04 = playing (including attract mode)
; $06 = entered briefly on player death (game-ending or not)
; $08 = set briefly at the beginning of each level?
; $0a = high-score, logo screen, AVOID SPIKES (etc?)
;       AVOID SPIKES: $1e->$04, $0a->game_state, $20->$02, $80->$0123
; $0c = unused? (jump table holds $0000)
; $0e = entered briefly when zooming off the end of a level
; $12 = entering initials
; $16 = starting level selection screen
; $18 = zooming new level in
; $1a = unknown
; $1c = unknown
; $1e = unknown
; $20 = descending down tube at level end
; $22 = non-selftest service mode display
; $24 = high-score explosion

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Page zero
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

* = 0
page0 = *

; XXX this forces ATASM to generate a full 65K image; this means that od
; shows the correct address
.if 1
	.byte	0
* = 0
.endif

;
; game_state
;

game_state	.ds	1

; game_state values for normal mode

_game_state_0		=	 0
_game_state_attract_mode	=	 2
_game_state_4		=	 4
_game_state_6		=	 6
_game_state_test_screen	=	 8
_game_state_countdown		=	10
; _game_state_12: there is no state 12, the jump table has a 0000
_game_state_get_level	=	14
_game_state_16		=	16
_game_state_got_high_score	=	18
_game_state_enter_initials	=	20
_game_state_pregame	=	22
_game_state_zoom_to_next_level		=	24
_game_state_26		=	26
_game_state_28		=	28
_game_state_30		=	30
_game_state_zoom	=	32
_game_state_test_menu	=	34
_game_state_victory	=	36

; game_state values for self test mode

test_state_diag_grid	=	4

;
; observed behavior:
;  state 04 mode  0  pregame, simulated battle, "press start" blinking
;        20
;        0a
;        20
;        0e
;        18
;        08
;        14
;        0a
;               0a  high scores
;        1a
;        0a
;               12
;               14  logo zoom
;        00
;        02
;              00   pregame
;        1e
;        0a
;        04
;   Normal usage




;
; game mode
;

game_mode	.ds	1

_game_mode_00	=	$00	; 0
_game_mode_service	=	$02	; 1
_game_mode_04	=	$04	; 2
_game_mode_enter_initials	=	$06	; 3  Enter high score initials
_game_mode_copyright	=	$08	; 4  Copyright
_game_mode_high_scores	=	$0a	; 5  high scores
_game_mode_msg_game_over	=	$0c	; 6  game over
_game_mode_msg_play	=	$0e	; 7  play
_game_mode_msg_press_start	=	$10	; 8  press start
_game_mode_logo_start	=	$12	; 9 
_game_mode_logo_zoom	=	$14	; 10  zoom in on logo
_game_mode_msg_2_credit_minimum	=	$16	; 11  insert coins


;   Memory test routines overload addrs 0 and 1
memory_test_ptr = game_state
memory_test_ptr_l = memory_test_ptr
memory_test_ptr_h = memory_test_ptr+1


; game_state_10 switches to this game state when waiting for input with
; a countdown is done

next_game_state		.ds	1


timectr		.ds	1

; In BCD seconds? Sometimes
;   game_state_pregame uses decimal math to decrement
;   game_state_countdown uses binary math
countdown_timer		.ds	1




; $80 bit: set when player controlling, clear in attract mode
; $40 bit: set when player playing, clear when dead (entering score)
play_state	.ds	1





credits		.ds	1



; Increments every  second;  No, every interrupt... Approx 246 Hz?
timer_seconds	.ds	1



cabsw_shadow	.ds	1


; Shadow of optsw1.  Note value is XORed with $02 before storing.
coinage_shadow	.ds	1


optsw2_shadow	.ds	1 ; soft shadow of optsw2


		.ds	1
; Set to 240 when the slam switch is detected, decremented in check_coin_sw
slam_timer	.ds	1


;RAM 000D = ??? for coin cointer "A" and cancelled out by tilt.
;RAM 000E = ??? for coin cointer "B" and cancelled out by tilt.
;RAM 000F = ??? for coin cointer "C" and cancelled out by tilt.
L0d		.ds	3

;RAM 0010 = ??? for coin cointer "A".
;RAM 0011 = ??? for coin cointer "B".
;RAM 0012 = ??? for coin cointer "C".
L10		.ds	3

;RAM 0013 = Countdown timer to hold closed hardware coin cointer "A".
;RAM 0014 = Countdown timer to hold closed hardware coin cointer "B".
;RAM 0015 = Countdown timer to hold closed hardware coin cointer "C".
L13		.ds	3

coin_string	.ds	1
uncredited	.ds	1	; coins accepted but not yet converted to credits
L18		.ds	1

; col_ram ram shadow

col_ram_shadow	.ds	16
col_ram_shadow_plyr_shot_clr = col_ram_shadow+8
;RAM 0029 = Scratchpad area
;RAM 002A = Scratchpad area
;RAM 002B = Scratchpad area
;RAM 002C = Scratchpad area
;RAM 002D = Scratchpad area
;RAM 002E = Scratchpad area
;RAM 0037 = Scratchpad area

L29		.ds	1		; 29
L29_l = L29
L29_m = L29+1

L2a		.ds	1		; 2a
; Scratchpad -- one use...
; Level being played (curlevel + 1; if curlevel is last level, L2b contains
; a random level 64-95)
L2b		.ds	1		; 2b

; Scatchpad -- 2c/2d are used as a word
L2c		.ds	1		; 2c
ptr2 = L2c
ptr2_l = ptr2
ptr2_h = ptr2+1

L2d		.ds	1		; 2d
L2e		.ds	1		; 2e
L2f		.ds	1		; 2f
L30		.ds	1		; 30
L31		.ds	1		; 31
L32		.ds	1		; 32
abs_delta_x = L32
L33		.ds	1		; 33
y_neg = L33
L34		.ds	1		; 34
x_neg = L34
L35		.ds	1		; 35
L36		.ds	1		; 36
L37		.ds	1		; 37
loopidx = L37
L38		.ds	1		; 38
L39		.ds	1		; 39
L3a		.ds	1		; 3a

ptr1		.ds	2
ptr1_l = ptr1
ptr1_h = ptr1+1


curplayer	.ds	1		; 3d
;  0 if 1p game, 1 if 2p
twoplayer	.ds	1		; 3e
L3f		.ds	1		; 3f


;
; Player 1 and 2 scores, in 6 digit BCD
;   NB: clear_players_scores assumes p1_score and p2_score are contiguous
;
pl_scores	.ds	6
p1_score_l	=	pl_scores+0
p1_score_m	=	pl_scores+1
p1_score_h	=	pl_scores+2
p2_score_l	=	pl_scores+3
p2_score_m	=	pl_scores+4
p2_score_h	=	pl_scores+5
pl_scores_len	=	*-pl_scores




players_level	.ds	2		; 46
players_lives	.ds	2		; 48
		.ds	1		; 4a
		.ds	1		; 4b

; Bit positions:
; $08 = zap
; $10 = fire
; $20 = start 1
; $40 = start 2
; $80 = unknown (cleared at various points)
; Is $80 used in self test to move to the next screen?
zap_fire_starts_shadow	.ds	1		; 4c
zap_fire_debounce	.ds	1		; 4d
; NOTE: Basically like zap_fire_starts_shadow except when the values are read from the hardware, they are AND'd in, so that you can have input "pending".
zap_fire_new	.ds	1		; 4e

; I believe zap_fire_tmp2 is buttons that are still down after 2 successive scans
zap_fire_tmp2	.ds	1		; 4f

spinner_delta		.ds	1		; 50
; Position along the segment?
player_position
		.ds	1		; 51
spinner_abs		.ds	1		; 52


; main_loop_timer
;
;   main_loop_timer is incremented by the NMI code at 246 Hz. Main loop
;   stalls until >= 9, and resets it to 0

main_loop_timer		.ds	1		; 53



		.ds	1		; 54
L55		.ds	1		; 55
L56		.ds	1		; 56
x_in = L56
L57		.ds	1		; 57
y_scale = L57
L58		.ds	1		; 58
y_in = L58
fscale		.ds	2	; copied from lev_fscale[]/lev_fscale2[]	; 59 5a
L5b		.ds	1		; 5b
y_scale_2_h = L5b
L5c		.ds	1		; 5c
L5d		.ds	1		; 5d
; Initialized to $80
L5e		.ds	1		; 5e
x_in_offset = L5e
L5f		.ds	1		; 5f
y_scale_2_l = L5f
y3d		.ds	1	; copied from lev_y3d[]		; 60

; 4 byte block passed to vapp_scl_cen_drw_to_X
L61		.ds	1		; 61
x_out_l = L61
L62		.ds	1		; 62
x_out_h = L62
L63		.ds	1		; 63
y_out_l = L63
L64		.ds	1		; 64
y_out_h = L64



		.ds	1		; 65

; 4 byte block passed to vapp_scl_cen_drw_to_X
; Constant 0
L66		.ds	1		; 66
x_out_offset_l = L66
L67		.ds	1		; 67
x_out_offset_h = L67
L68		.ds	1		; 68
y_out_offset_l = L68
L69		.ds	1		; 69
y_out_offset_h = L69

L6a		.ds	1		; 6a
L6b		.ds	1		; 6b
L6c		.ds	1		; 6c
L6d		.ds	1		; 6d
L6e		.ds	1		; 6e
L6f		.ds	1		; 6f
L70		.ds	1		; 70
L71		.ds	1		; 71
curscale	.ds	1		; 72

; Color and intensity used in various vapp routines
; z in the high nibble, c in the low
draw_z		.ds	1

;
; This is a pointer into a list of VG instructions being assembled
;

vidptr		.ds	2	
vidptr_l = vidptr
vidptr_h = vidptr+1




L76		.ds	1		; 76
L77		.ds	1		; 77
; self test results in 78-7c
;
; L78: Mathbox fail
L78		.ds	1		; 78
; L79: Ramtest fail
L79		.ds	1		; 79
; L7a: Pokey1 fail
L7a		.ds	1		; 7a
; L7b: Pokey2 fail
L7b		.ds	1		; 7b
; L7c: EAROM fail
L7c		.ds	1		; 7c

; Rom page checksums
?overlay=*
checksum_table	.ds	12		; 7d	; $3000 - $37ff
					; 7e	; $3800 - $38ff
					; 7f	; $9000 - $97ff
					; 80	; $9800 - $9fff
					; 81	; $a000 - $a7ff
					; 82	; $a800 - $afff
					; 83	; $b000 - $b7ff
					; 84	; $b800 - $bfff
					; 85	; $c000 - $c7ff
					; 86	; $c800 - $cfff
					; 87	; $d000 - $d7ff
					; 88	; $d800 - $dfff

*=?overlay
L7d		.ds	1
L7e		.ds	1
L7f		.ds	1
L80		.ds	1
L81		.ds	1
L82		.ds	1
L83		.ds	1
L84		.ds	1
L85		.ds	1
L86		.ds	1
L87		.ds	1
L88		.ds	1

L89		.ds	1		; 89
L8a		.ds	1		; 8a
L8b		.ds	1		; 8b
L8c		.ds	1		; 8c
L8d		.ds	1		; 8d
L8e		.ds	1		; 8e
L8f		.ds	1		; 8f
L90		.ds	1		; 90
L91		.ds	1		; 91
L92		.ds	1		; 92
L93		.ds	1		; 93
L94		.ds	1		; 94
L95		.ds	1		; 95
L96		.ds	1		; 96
L97		.ds	1		; 97
		.ds	1		; 98
rgr_pt_inx	.ds	1		; 99
		.ds	1		; 9a
L9b		.ds	1		; 9b
		.ds	1		; 9c
L9d		.ds	1		; 9d
curcolor	.ds	1		; 9e
; Current level - 1 (starting level = 0)
curlevel	.ds	1		; 9f
La0		.ds	1		; a0
; LED status write (hardware is updated via interrupt). 3=unlit, 1=player 1 lit, 2=player 2 lit, 0=both lit.
leds_flip_shadow		.ds	1		; a1
La2		.ds	1		; a2
		.ds	1		; a3
		.ds	1		; a4
		.ds	1		; a5
;  Number of enemy shots in play (0,1,2).
enm_shotcnt	.ds	1		; a6
La7		.ds	1		; a7
		.ds	1		; a8
vidptr_offset		.ds	1		; a9
Laa		.ds	1		; aa
; Only one reference; WO
Lab		.ds	1		; ab
strtbl		.ds	2		; ac ad

; Used only in vapp_digits
vapp_digits_index	.ds	1
vapp_digits_ptr		.ds	1		; af



; Used as a bookmark of vidptr

vidptr_bookmark		.ds	2		; b0
vidptr_bookmark_l = vidptr_bookmark
vidptr_bookmark_h = vidptr_bookmark + 1

; Number of movement ticks between pulsar flips
pulsar_fliprate	.ds	1		; b2

; Ratio by which flipper flips at top-of-tube are accelerated relative to
; flipper flips in the tube.  If this number is 2, they are twice as fast,
; etc.  See La141 for more.
flip_top_accel	.ds	1		; b3

; X/Y axis flip state.
;  $8=x flipped. $10=y flipped. $18=xy flipped. Used for cocktail mode.
vid_coins_shadow		.ds	1		; b4

copyr_cksum	.ds	1		; b5

copyr_vid_loc	.ds	2		; b6 b7

		.ds	1		; b8
		.ds	1		; b9
		.ds	1		; ba
		.ds	1		; bb
		.ds	1		; bc
; Pointer to RAM version of current EAROM block.  See $de{64,9a,9c,d8,ee}.
earom_memptr	.ds	2		; bd be

; Sound table lock. Contains the row number when the tables are being updated.
; Prevents the interrupt service routine from working with that particular row.

sound_table_lock		.ds	1		; bf

; These tables are used to decompress sound samples
; There are 16 data streams 2 pokeys * (4 freq ports + 4 channel ctrl ports)

Lc0		.ds	16		; c0
Ld0		.ds	16		; d0
Le0		.ds	16		; e0
Lf0		.ds	16		; f0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Non-page zero ram
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Used as a 2 byte delay loop counter in the reset code; as a
; single byte variable in check_start
L0100		.ds	2		; 100

; This is the choice selected by player #1 to begin on.
; Note that it isn't the actual LEVEL number, but the number of the choice selected.
; That is: level 1=0, level 3=2, level 5=3, etc. Not linear. Based on table at $91FE.
p1_startchoice	.ds	1		; 102
p2_startchoice	.ds	1		; 103

zoomspd_lsb	.ds	1		; 104
zoomspd_msb	.ds	1		; 105
L0106		.ds	1		; 106
along_lsb	.ds	1		; 107

; RAM 0108 = Number of enemies INSIDE the tube
; RAM 0109 = Number of enemies at the TOP of the tube
enemies_in	.ds	1		; 108
enemies_top	.ds	1		; 109

pcode_run	.ds	1		; 10a
pcode_pc	.ds	1		; 10b
L010c		.ds	1		; 10c
L010d		.ds	1		; 10d
L010e		.ds	1		; 10e
L010f		.ds	1		; 10f
L0110		.ds	1		; 110
open_level	.ds	1 ; 0 if current level closed, -1 if open
curtube		.ds	1 ; after remap[] has been applied
L0113		.ds	1		; 113
; Seems to be $FF everytime a completely new screen is being created. Otherwise 0 or 1. Still kind of unknown.
L0114		.ds	1		; 114
L0115		.ds	1		; 115
; Enemy death sequences in progress?
L0116		.ds	1		; 116
; Hardware cocktail detection.  10=cocktail. 00=upright.
flagbits	.ds	1		; 117
; Speed of enemy bullets.
; FF=Ultra Slow. D0=Ultra Fast. Value is FC on level 1 and FA on level 81.
enm_shotspd_msb	.ds	1		; 118
; Shot holdoff time.  After firing, an enemy cannot fire until at least
; this many ticks have passed.
shot_holdoff	.ds	1		; 119
; Max # enemy shots minus one?
; See enm_shotmax_lvl_tbl, L9328, La2d6.
enm_shotmax	.ds	1		; 11a
; Copy protection variable? Errors at score greater than 17k if not set to 0.
copyr_vid_cksum1	.ds	1	; 11b
; Programming constant? Used in indexing. # of enemies possible - 1
max_enm		.ds	1		; 11c
		.ds	1		; 11d
		.ds	1		; 11e
pokey_piracy_detected		.ds	1		; 11f
enm_shotspd_lsb	.ds	1	; 120
L0121		.ds	1		; 121
L0122		.ds	1		; 122
; Display AVOID SPIKES when $80 bit set
L0123		.ds	1		; 123
L0124		.ds	1		; 124
zap_running	.ds	1		; 125
; Highest level the player can start a new game on
L0126		.ds	1		; 126
L0127		.ds	1		; 127
		.ds	1		; 128

; Indexed by enemy type.  Used at L9a15, L9a32, L9a6a.
; Computed at 9607_{13,1b,23,2b,33}.
; These appear to be minimum numbers we want for the various types; if we
; find there are fewer than this many, we'll create one of the highest type
; that satisfies that criterion.
min_flippers	.ds	1	; flipper.  1-4:1, 5-99:0	; 129
min_pulsars	.ds	1	; pulsar.   1-16:0, 17-32:3, 33-99:1	; 12a
min_tankers	.ds	1	; tanker.   1-2:0, 3:1, 4:0, 5-99:1	; 12b
min_spikers	.ds	1	; spiker.   1-3:0, 4:1, 5-16:2, 17-19:0, 20-99:1	; 12c
min_fuzzballs	.ds	1	; fuzzball. 1 except 1-10, 17-19, 26, where 0	;12d
; Indexed by enemy type.  Max number of a given type in the tube (well, not
; really, but this is the number at which enemy creation will stop creating
; the corresponding type).
max_flippers	.ds	1	; flipper	; 12e
max_pulsars	.ds	1	; pulsar	; 12f
max_tankers	.ds	1	; tanker	; 130
max_spikers	.ds	1	; spiker	; 131
max_fuzzballs	.ds	1	; fuzzball	; 132
; Informational counter, updated each time a vector machine GO is 
;  done by the interrupt handler.
; Seems to be zero'd out when a new screen is presented.
L0133		.ds	1			; 133
		.ds	1			; 134
; Number of shots (0-8) the player has active on the screen.
ply_shotcnt	.ds	1			; 135
		.ds	1			; 136
		.ds	1			; 137
		.ds	1			; 138

; vg_sub_image_spiked_player: Draw spiked-apart or pulsared-apart player.
; vecram_2ffc is called before the motions between pieces; it contains a vscale
; which is adjusted with time to cause the pieces to move.
vecram_2ffc_lin_scale		.ds	1
vecram_2ffc_bin_scale		.ds	1
L013b		.ds	1			; 13b
L013c		.ds	1			; 13c

; RAM 013D = Without exceeding the ratios, the # of additional Flippers 
;            we can have in the tunnel.
; RAM 013E = Pulsars
; RAM 013F = Tankers
; RAM 0140 = Spikers
; RAM 0141 = Fuseballs
; Max-minus-cur values for each enemy.  Computed and used during creation
; of new enemies.
avl_flippers	.ds	1			; 13d
avl_pulsars	.ds	1			; 13e
avl_tankers	.ds	1			; 13f
avl_spikers	.ds	1			; 140
avl_fuzzballs	.ds	1			; 141

; Counts of the various enemy types currently alive. (in the tunnel)
n_flippers	.ds	1			; 142
n_pulsars	.ds	1			; 143
n_tankers	.ds	1			; 144
n_spikers	.ds	1			; 145
n_fuzzballs	.ds	1			; 146
; tanker_load_2_lvl_tbl describes how to compute an initial value for this.
; L9b5a uses this to update pulsing.
; L9b8c/L9b94 negate this value when pulsing hits $0f and $c1, ascending and
; descending, respectively.
; eact_26 uses this and pulsing to set a conditional.
pulse_beat	.ds	1			; 147
; Pulsar-pulsing variable.
; Set to $ff during init.
; Once per cycle (after all enemy movement has occurred), the computation
; pulsing += pulse_beat is done, and if the high bit of pulsing goes from 0 to 1
; because of this, sound_pulsar is called.  (See L9b56.)
; pulsing is used at L9b7c and in enemy action $26 (eact_26).  It's also
; checked at L9ce4 and Lb3aa and Lb71d/Lb726.
pulsing		.ds	1			; 148
; Vector of what tankers can carry.
tanker_load	.ds	4		; 149 14a 14b 14c
; RAM 014D= Used in displaying animated Tempest logo. [logo front distance?]
; RAM 014E= Used in displaying animated Tempest logo. [logo back distance?]

L014d		.ds	1			; 14d
L014e		.ds	1			; 14e
L014f		.ds	1			; 14f
L0150		.ds	1			; 150
; Shot hit tolerance.  A player shot must be within this distance of an
; enemy (absolute value) in order to hit it.  Indexed by enemy type.
hit_tol		.ds	5			; 151 152 153 154 155
bonus_life_each	.ds	1			; 156
; Some position on tube - compare to enemy positions various places
L0157		.ds	1			; 157
init_lives	.ds	1			; 158
; Two flags that control fuzzball motion are kept here (in the $40 and $80
; bits).  See 9607_6b for setting, L9f2c/L9f4a/L9f6e for use.
fuzz_move_flg	.ds	1			; 159
;  Height of the spikes to create for this level. (Only valid for certain levels, like 1,9,11,14,16...).
wave_spikeht	.ds	1			; 15a
; Number of enemies to create for this level. Maybe other functions. (Only valid for certain levels, like 1,9,11,14,16...).
wave_enemies	.ds	1			; 15b
		.ds	1			; 15c
; Movement type for flippers for this level.  See L9aa2 for use, 9607_5b
; for computation.
flipper_move	.ds	1			; 15d
L015e		.ds	1			; 15e
; The chance of fuzzballs doing something in certain regions of the tube;
; see 9607_6f for computation, L9f69 for use.
fuzz_move_prb	.ds	1			; 15f
; Speed figures, per-enemy-type, byte after the binary point
spd_flipper_lsb	.ds	1		; 160
spd_pulsar_lsb	.ds	1			; 161
spd_tanker_lsb	.ds	1			; 162
spd_spiker_lsb	.ds	1			; 163
spd_fuzzball_lsb	.ds	1		; 164
; Movement rate (UPWARDS) 
; Movement rates: FF=very slow, F0=very fast
; Speed figures, per-enemy-type, byte before the binary point
spd_flipper_msb	.ds	1		; 165
spd_pulsar_msb	.ds	1			; 166
spd_tanker_msb	.ds	1			; 167
spd_spiker_msb	.ds	1			; 168
spd_fuzzball_msb	.ds	1		; 169

; $03 bits: difficulty (00=medium, 01=easy, 02=hard, 03=medium)
; $04 bit: rating (0 = 1,3,5,7,9; 1 = tied to high score)
; $08 bit: something unknown (comes from $20 bit of spinner/cabinet byte)

diff_bits	.ds	1			; 016a

; Used in game_state_countdown; it set, watch the countdown timer
enable_countdown		.ds	1			; 016b
copyr_disp_cksum1	.ds	1		; 016c
; Set to $40 to enable pulsars to fire.  See L937a, pulsar_fire_lvl_tbl, L9aac.
pulsar_fire	.ds	1			; 016d

L016e		.ds	88
; $00 or $ff.  Used when diddling EAROM stuff; zero means copy from RAM
; to EAROM; $ff means clear both RAM and EAROM.
earom_clr	.ds	1			; 01c6
; This is used only at Ldb5d and a number of places Lde03-Lde4f.
; This appears to be flag bits indicating which areas to save/load.
L01c7		.ds	1			; 01c7
; Used only at Lde{0a,0d,18,3f} AFAICT.  Not sure what it does.
; I suspect this is read/write flag bits (set to write), one bit per area.
L01c8		.ds	1			; 01c8
; $03 bits (see maybe_init_hs):
;     $01 = top three sets of initials need initializing
;     $02 = top three scores need initializing
; I don't think any of its other bits are used or set, at least not in
; normal operation.  (Ldb65 makes me think selftest might use it.)
hs_initflag	.ds	1			; 01c9
; EAROM operation in progress.
; Set to $80 to write (clear?)
; Set to $20 to read
; $40 is used internally by the $80 support code
earom_op	.ds	1			; 01ca
; Offset from ($bd), cleared at Lde27, incremented at Ldef9, used Lde{76,d5}
earom_blkoff	.ds	1			; 01cb
; Current location in EAROM; see Lde58/Lde79/Ldefc.
earom_ptr	.ds	1			; 01cc
; End of current block in EAROM; see Lde5e/Lde9e/Ldec6.
earom_blkend	.ds	1			; 01cd
L01ce		.ds	1			; 01ce
; Checksum of block being currently read or written.
earom_cksum	.ds	1			; 01cf
; End of CPU stack. Interrupt handler will issue a BREAK it sees the stack 
; grow beyond this point.
		.ds	47
; Start of CPU stack (grows downwards towards 01D0)
L01ff		.ds	1

;;;
;;; page 2
;;;

; Player's position in tunnel -1 Values 0-F only.
player_seg	.ds	1	; tube segment, 0-f, player is on ; 0200

; Player's position in the tunnel (segment 0-F, 80 or 81 means the player is dead)
; Usually, this is is (player_seg+1)&0x0f.  But it's set to other values
; sometimes; the $80 bit seems to indicate "death in progress".
; $80 - player grabbed by flipper/pulsar
; $81 - player hit by enemy shot
; $81 - player spiked while going down tube
; I suspect that $80 means "death in progress" and, when so, $01 means
; "don't display player anyway".
player_status	.ds	1

; Y position of (player? Top of tunnel?) Usually = 10
player_along	.ds	1	; player position along tube length ; 0202
				; normally $10, increases when going down tube



;;;
;;; Pending enemies data
;;;


; Segment numbers for pending enemies.
pending_seg	.ds	n_pending_enemies

; Video display information, one per pending enemy.
; $00 here means "no pending enemy in this slot".
; This byte breaks down as BBLLLLLL, and is used as a vscale value with
; b=BB+1 and l=LLLLLL.  This is initialized to the pending_seg value in
; the low nibble and the offset's low nibble in the high nibble, except
; that if that would give $00, $0f is used instead.  See L9250.

;RAM 0243 = Countdown timer before enemy #1 appears.
;RAM 0244 = Countdown timer before enemy #2 appears.
;RAM 02.. = Countdown timer before enemy #.. appears.
;RAM 0281 = Countdown timer before enemy #63 appears.
;RAM 0282 = Countdown timer before enemy #64 appears.
; "00" = no enemy to release. "01" = put onto tunnel whenever possible.

pending_vid	.ds	n_pending_enemies





;;;
;;; On screen enemies
;;;


; RAM 0283 - Movement and type for enemy #7?
; RAM 0284 - Movement and type enemy #6?
; RAM 0285 - Movement and type enemy #5?
; RAM 0286 - Movement and type enemy #4?
; RAM 0287 - Movement and type enemy #3?
; RAM 0288 - Movement and type enemy #2?
; RAM 0289 - Movement and type enemy #1?
; >> For the above, the low three bits contains the enemy TYPE
; >> (1=flipper, 2=pulsar, 3=tanker, 4=spiker, 5=fuseball).
; >> The higher bits contains the enemy MOVEMENT type.
; >> (0=no adjustment, 8=clockwise, C=counter clockwise, other values possible but unknown).

; Indexed by enemy number.
; $07 bits hold enemy type (0-4).
; $18 bits apparently mean something; see Lb5bf.
; $40 bit set -> enemy_seg value increasing; clr -> decreasing (see rev_if_edge)
; $80 bit set -> between segments (eg, flipper flipping)
enemy_movement_style		.ds	n_enemies_on_screen


; RAM 028A - More movement information for enemy #7?
; RAM 028B - More movement information for enemy #6?
; RAM 028C - More movement information for enemy #5?
; RAM 028D - More movement information for enemy #4?
; RAM 028E - More movement information for enemy #3?
; RAM 028F - More movement information for enemy #2?
; RAM 0290 - More movement information for enemy #1?

; Indexed by enemy number.
; $80 bit set -> moving away from player, clear -> towards
; $40 means the enemy can shoot
; $03 bits determine what happens when enemy gets below $20:
;    $00 = no special action (as if $20 weren't special)
;    $01 = split into two flippers
;    $02 = split into two pulsars
;    $03 = split into two fuzzballs
L028a		.ds	n_enemies_on_screen


; Current movement pcode pc for enemies, indexed by enemy number
enm_move_pc	.ds	n_enemies_on_screen
L0298		.ds	n_enemies_on_screen
enemy_along_lsb	.ds	n_enemies_on_screen
shot_delay	.ds	n_enemies_on_screen



;;;
;;; bullets
;;;


; RAM 02AD = Segment that player's bullet #1 is firing down - 1.
; RAM 02AE = Segment that player's bullet #2 is firing down - 1.
; RAM 02AF = Segment that player's bullet #3 is firing down - 1.
; RAM 02B0 = Segment that player's bullet #4 is firing down - 1.
; RAM 02B1 = Segment that player's bullet #5 is firing down - 1.
; RAM 02B2 = Segment that player's bullet #6 is firing down - 1.
; RAM 02B3 = Segment that player's bullet #7 is firing down - 1.
; RAM 02B4 = Segment that player's bullet #8 is firing down - 1.

ply_shotseg	.ds	n_player_bullets
enm_shotseg	.ds	n_enemy_bullets


;;;
;;; On screen enemy state
;;;


; RAM 02B9 = Segment of #1 enemy - 1 (values 0-F only)
; RAM 02BA = Segment of #2 enemy - 1 (values 0-F only)
; RAM 02BB = Segment of #3 enemy - 1 (values 0-F only)
; RAM 02BC = Segment of #4 enemy - 1 (values 0-F only)
; RAM 02BD = Segment of #5 enemy - 1 (values 0-F only)
; RAM 02BE = Segment of #6 enemy - 1 (values 0-F only)
; RAM 02BF = Segment of #7 enemy - 1 (values 0-F only)

enemy_seg	.ds	n_enemies_on_screen

; RAM 02C0 = Segment that player's bullet #1 is firing down.
; RAM 02C1 = Segment that player's bullet #2 is firing down.
; RAM 02C2 = Segment that player's bullet #3 is firing down.
; RAM 02C3 = Segment that player's bullet #4 is firing down.
; RAM 02C4 = Segment that player's bullet #5 is firing down.
; RAM 02C5 = Segment that player's bullet #6 is firing down.
; RAM 02C6 = Segment that player's bullet #7 is firing down.
; RAM 02C7 = Segment that player's bullet #8 is firing down.

L02c0		.ds	n_player_bullets
L02c8		.ds	4
; Indexed by enemy number.
; Flipper flipping: $80 plus current angle
; Flipper not flipping: segment number last flipped from
; Fuzzballs store $81 or $87 here, depending on the $40 bit of enemy_movement_style,x
L02cc		.ds	n_enemies_on_screen

; RAM 02D3 = Y position of player's bullet #1.
; RAM 02D4 = Y position of player's bullet #2.
; RAM 02D5 = Y position of player's bullet #3.
; RAM 02D6 = Y position of player's bullet #4.
; RAM 02D7 = Y position of player's bullet #5.
; RAM 02D8 = Y position of player's bullet #6.
; RAM 02D9 = Y position of player's bullet #7.
; RAM 02DA = Y position of player's bullet #8.

ply_shotpos	.ds	n_player_bullets

; RAM 02DB = Y position of enemy's bullet #2.
; RAM 02DC = Y position of enemy's bullet #1.

enm_shotpos	.ds	n_enemy_bullets

; RAM 02DF = Height of enemy 7 in tunnel. (0=null, ef=bottom?, 10=top)
; RAM 02E0 = Height of enemy 6 in tunnel. (0=null, ef=bottom?, 10=top)
; RAM 02E1 = Height of enemy 5 in tunnel. (0=null, ef=bottom?, 10=top)
; RAM 02E2 = Height of enemy 4 in tunnel. (0=null, ef=bottom?, 10=top)
; RAM 02E3 = Height of enemy 3 in tunnel. (0=null, ef=bottom?, 10=top)
; RAM 02E4 = Height of enemy 2 in tunnel. (0=null, ef=bottom?, 10=top)
; RAM 02E5 = Height of enemy 1 in tunnel. (0=null, ef=bottom?, 10=top)
enemy_along	.ds	n_enemies_on_screen
L02e6		.ds	4					; 02e6
		.ds	4					; 02ea
enm_shot_lsb	.ds	n_enemy_bullets
; Indexed by player shot number
; Appears to affect player shot speed; see La1a0.
; See also La213 and La22f.
; I suspect this is here so that shots that hit a spike can also, or
; perhaps instead, hit the spiker that is growing the spike.
L02f2		.ds	8
L02fa		.ds	8
; Indexed from 0 through 7; see La401
L0302		.ds	8

; RAM 030A = Image # for death #8? May have other purposes.
; RAM 030B = Image # for death #7? May have other purposes.
; RAM 030C = Image # for death #6? May have other purposes.
; RAM 030D = Image # for death #5? May have other purposes.
; RAM 030E = Image # for death #4? May have other purposes.
; RAM 030F = Image # for death #3? May have other purposes.
; RAM 0310 = Image # for death #2? May have other purposes.
; RAM 0311 = Image # for death #1? May have other purposes.
; >> Seems to cover death sequences for enemies and for player.
; >> Also used in displaying bonus points for killing fuseball.
; >> Slot #1 seems to fill up first, then #2, #3, and so on...

; Indexed from 0 through 7; see La3e2
L030a		.ds	8
; Indexed from 0 through 7; see La3e7
L0312		.ds	8

; Apparently some of these arrays are initialized by indexing >= 16
L031a		.ds	16
xout_h_array = L031a
L032a		.ds	16
xout_l_array = L032a
L033a		.ds	16
yout_h_array = L033a
L034a		.ds	16
yout_l_array = L034a
L035a		.ds	16
L036a		.ds	16
L037a		.ds	16
L038a		.ds	16
; Indexed by tube segment number.
; Initialized to $00.
; Set to $80 when a spiker grows a spike.
; Set to $c0 when a player shot hits a spike.
; $80 bit seems to mean "don't draw bright dot at end"
; $40 bit seems to mean "draw mini-explosion at end"
L039a		.ds	n_segments_per_tunnel


;;;
;;; Player data 
;;;

player_data_start = *

; Super zapper usage: 0=unused, 1=used once, 2=used twice

zap_uses	.ds	1

; Number of enemies at the bottom, yet to appear.
enemies_pending	.ds	1

; Height of spike in Tunnel segment 
spike_ht	.ds	n_segments_per_tunnel

player_data_len = *-player_data_start

;;;
;;; Other player data
;;;

; same as zap_uses thru spike_ht, but for the inactive player
other_pl_data	.ds	player_data_len


; This is the shape of the tunnel

tube_x		.ds	16
tube_y		.ds	16
segment_angle	.ds	16
L03fe		.ds	8	; initialized in La7bd, 8 bytes set to [0,0,0,0,0,0,0,$f0]

; Time machine has been on, in seconds

on_time		.ds	3
on_time_l = on_time+0
on_time_m = on_time+1
on_time_h = on_time+2

; Seconds the machine has been on

play_time	.ds	3
play_time_l	=	play_time+0
play_time_m	=	play_time+1
play_time_h	=	play_time+2

; Number of one player games 
games_1p	.ds	3
games_1p_l	=	games_1p+0
games_1p_m	=	games_1p+1
games_1p_h	=	games_1p+2

; Number of two player games 
games_2p	.ds	3
games_2p_l	=	games_2p+0
games_2p_m	=	games_2p+1
games_2p_h	=	games_2p+2


secs_avg	.ds	3
secs_avg_l	=	secs_avg+0
secs_avg_m	=	secs_avg+1
secs_avg_h	=	secs_avg+2


; One-bit flags are kept in the low bit of these bytes; I suspect they
; are toggles for double-buffering sequences in video RAM.  See the code
; at dblbuf_done, which flips the bits and selects which table to pull a vjsr
; instruction from based on the result.
; See the code at db_init_vidptr, db_init_ptr1, dblbuf_done, Lb332, and Lb967 for more.
;
; There seem to be 9 double buffered vector ram areas
; 0 - ? code @ La8b4; msgs? game over/insert coins/press_start ....
; 1 - ? code @ Lc5c2
; 2 - ? code @ Lc30d and Lb367
; 3 - enemies
; 4 - shots
; 5 - pending
; 6 - explosions
; 7 - draw player
; 8 - ? code @ Lc54d
dblbuf_flg	.ds	9
_dblduf_reg_0 = 0
_dblduf_reg_1 = 1
_dblduf_reg_2 = 2
_dblduf_reg_3 = 3
_dblduf_reg_4 = 4
_dblduf_reg_5 = 5
_dblduf_reg_6 = 6
_dblduf_reg_7 = 7
_dblduf_reg_8 = 8


		.ds	7
L0425		.ds	16
mid_x		.ds	16
mid_y		.ds	16

; Copy protection variable? errors at 17k if not 0?
copyr_vid_cksum2	.ds	1
		.ds	200

; Used in "High score sort routine"
L051e		.ds	226

; Player's ranking (updated just before high score screen)
L0600		.ds	1
L0601		.ds	1
hs_whichletter	.ds	1
L0603		.ds	1
L0604		.ds	1

; Used as a second timer when entering a high score.
; Used as a countdown timer from 14 on level selection screen (14 ticks=1 second).
; hs_timer is decremented 20 times a second?
hs_timer	.ds	1

; High score initials
hs_initials_8	.ds	3
		.ds	3
		.ds	3
		.ds	3
		.ds	3
hs_initials_3	.ds	3
		.ds	3
hs_initials_1	.ds	3

; RAM 061E = Begining of scores in high score table. Extends through $071D.
; RAM 0718 = Lowest two digits of the second highest score.
; RAM 0719 = Middle two digits of the second highest score.
; RAM 071A = Highest two digits of the second highest score.
; RAM 071B = Lowest two digits of the highest score.
; RAM 071C = Middle two digits of the highest score.
; RAM 071D = Highest two digits of the highest score.
 
L061e		.ds	226
hs_scores	.ds	6
hs_score_8	.ds	3
		.ds	3
		.ds	3
		.ds	3
		.ds	3
hs_score_3	.ds	3
		.ds	3
hs_score_1	.ds	3

; Initial lives and points-per-life value, from optsw2.  This is a software
; shadow; when it's found to be different from the current settings, it's
; updated and the high-score list is cleared.
; See Lac20.
life_settings	.ds	1
; Difficulty settings, from pokey2_zap_fire_starts.  This is a software shadow;
; when it's found to be different from the current settings, it's updated
; and the high-score list is cleared.
; See Lac20.
diff_settings	.ds	1
L0720		.ds	1
	.ds	223


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Color and Vector ram
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Color ram
;  16 bytes; 16 color specifications
;  Each byte:
;    XXXXgbrr   X: don't care g: green, b: blue rr: 2 bits of red
;    The byte is negated....
col_ram = $0800	; Color RAM (low nibble on;y)

_rgb_whi = $00
_rgb_cya = $03
_rgb_yel = $04
_rgb_gre = $07
_rgb_mag = $08
_rgb_blu = $0b	; 1011 g.rr.
_rgb_red = $0c
_rgb_bla = $0f

; Observed usage cf. Lc1fd
; 0 - white - enemy shots, zoom starfield, "AVOID SPIKES", logo final color,
;             copyright
; 1 - yellow - player, player shots
; 2 - magenta - enemies
; 3 - red - press start, enemies
; 4 - cyan - "bonus every"
; 5 - green - score
; 6 - blue - tubes
; 7 - blue - high scores
; 8 - blue, red, yellow - player shot internal color
; 9,10,11 - white, yellow - player death
; 12 - red - pending enemies?
; 13,14,15 ?

_colidx_white = 0
_colidx_player = 1
_colidx_red = 3
_colidx_cyan = 4
_colidx_score = 5
_colidx_tubes = 6
_colidx_high_score = 7
_colidx_high_pending_enemies = 12

col_ram_plyr_shot_clr = col_ram+8

vecram = $2000

vecram_2000 = $2000

;  dblbuf_vjsr_loc 1
vecram_2004 = $2004

;  Double buffer A 1
vecram_2006 = $2006

;  Double buffer B 1
vecram_2104 = $2104


;  dblbuf_vjsr_loc 1
vecram_2200 = $2200

;  Double buffer A 2
vecram_2202 = $2202

;  Double buffer B 2
vecram_2306 = $2306


;  dblbuf_vjsr_loc 1
vecram_240a = $240a
vecram_240c = $240c
vecram_254e = $254e
vecram_2690 = $2690
vecram_2692 = $2692
vecram_27c8 = $27c8
vecram_28fe = $28fe
vecram_2900 = $2900
vecram_29aa = $29aa
vecram_2a54 = $2a54
vecram_2a56 = $2a56
vecram_2b96 = $2b96
vecram_2cd6 = $2cd6
vecram_2cd8 = $2cd8
vecram_2d4a = $2d4a
vecram_2dbc = $2dbc
vecram_2dbe = $2dbe
vecram_2df0 = $2df0
vecram_2e22 = $2e22
vecram_2e24 = $2e24
vecram_2ea6 = $2ea6
vecram_2f60 = $2f60
; 2fa6 holds the vjsr for the tens digit of the level number
vecram_2fa6 = $2fa6
vecram_2fa8 = $2fa8

; vg_sub_image_spiked_player: Draw spiked-apart or pulsared-apart player.
; vecram_2ffc is called before the motions between pieces; it contains a vscale
; which is adjusted with time to cause the pieces to move.


vecram_2ffc = $2ffc

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Vector generator interface
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;
;                 Programming the Atari XY Vector Generator
;                   
; -------------------------------------------------------------------
;
;  The information in this document is not guaranteed to be accurate,
;  so use at your own risk!
;
;  The Atari Analogue Vector Generator (or AVG) is the circuitry used
;  to draw lines on the special XY monitors of some games from the late
;  seventies and early eighties. These include Asteroids, Battlezone,
;  Tempest, Gravitar and Star Wars, all of which used a slightly
;  different AVG as the games evolved.
;
;  The AVG is a small computer in its own right, it has its own ROM,
;  RAM, instruction set and stack for subroutines. There are only a
;  few instructions, which makes it quite easy to decode, and different
;  games use similar ones even if they have different hardware (any
;  takers for an AVG assembler / disassembler, maybe with GUI shape
;  editing? ).
;
;  The following information is for the Star Wars game, but is very
;  similar to other games.
;
;  The basic AVG instructions are as follows:
;
;  1. Draw vector relative X, Y.    This instruction draws a vector from
;                                   the last position to a new relative offset.
;
;  2. Centre.                       Returns beam to centre of display.
;
;  3. Set colour / intensity.       Sets new colour and intensity for
;                                   subsequent vectors.
;
;  4. Jump to new address.          Jumps to specified address in vector ROM/RAM.
;
;  5. Jump to subroutine.           Pushes current position to stack and jumps
;                                   to specified subroutine in vector ROM/RAM.
;
;  6. Return from subroutine.       Pops previous pushed address from stack.
;
;  7. Halt.                         Stops AVG until VGGO signal from main game
;                                   processor.
;
;
;  The main game processor fills the vector RAM with a list of instructions
;  telling the AVG where to draw vectors on the display, and then writes to
;  the VGGO address port which starts the AVG executing.  The main processor
;  can also reset the AVG by writing to the VGRST address. The AVG always
;  starts executing instructions from address 0x0000 in the vector RAM after
;  a reset or HALT instruction. The vector ROM probably holds the shapes and
;  character set for the game as subroutines (I've never looked!) to be
;  called from RAM when required. The character set is comprised of short
;  vectors, so a special 'Draw Short Vector' instruction is implemented which
;  uses less bytes per instruction.
;
;  All vector instructions are two or four bytes long. The operand is packed
;  with the opcode as the upper 3 bits. The instruction is stored in low
;  byte-high byte format, as seen from the main processor. When calculating
;  a vector jump address, note that the AVG sees the vector memory as 8K x 16
;  words, while the main processor sees 16K x 8 bytes.
;
;  The draw instruction always draws relative to the end of the last vector
;  with a negative number represented by the upper bit being set.
;
;  There are 8 basic colors from the RGB bits and 256 intensity levels of
;  these 8 colors. Further to this each vector draw instruction holds 8
;  levels of intensity which controls the overall intensity. I believe that
;  this may have something to do with the fact that a long vector drawn in
;  the same time period as a short vector will need to have more intensity
;  to give the same apparent intensity on the screen.
;
;  The scale instruction determines the size of subsequent vectors, so a
;  shape can be magnified or shrunk by simply changing the scale factor
;  without having to re-calculate all the vector points. The lower 8 bits
;  of the scale instruction control a DAC which alters the analogue output
;  swing of the X and Y DAC's. The upper 3 bits of the scale instruction
;  are a digital scaling which I believe may shift the X and Y position
;  data to achieve a binary multiplying effect on the vectors. I think a
;  scale of 0x0FF gives a magnification of one.
;
;  For subroutines there is a stack for holding return addresses. On earlier
;  games the stack and instruction counter was built from discrete logic,
;  but with Gravitar and Star Wars an 'Address Controller' gate array was
;  introduced to replace this logic. With the discrete versions the stack
;  was 4 deep, but with the gate array it could possibly be more.
;
;  The last instruction after drawing all the required vectors must be a halt
;  instruction, so that the main processor can poll the VGHALT bit and then
;  update the new positions.
;
; Bit Key:
;
;          X - X coordinate bits
;          Y - Y coordinate bits
;          I - Vector intensity(brightness) bits
;          A - Vector address bits
;          R - Red color bit
;          G - Green color bit
;          B - Blue color bit
;          S - Scale (size)
;          U - Unused bit
;
;  For Star Wars the codes are as follows:
;
;    Opcode                     Hex      Binary
;
;    Draw relative vector.      0x00     000YYYYY YYYYYYYY IIIXXXXX XXXXXXXX
;
;    Halt                       0x20     00100000 00000000
;
;    Draw short relative vector 0x40     010YYYYY IIIXXXXX
;
;    New color/intensity        0x60     0110URGB IIIIIIII
;
;    New scale                  0x70     0111USSS SSSSSSSS
;
;    Center                     0x80     10000000 00000000
;
;    Jump to subroutine         0xA0     101AAAAA AAAAAAAA
;
;    Return from subroutine     0xC0     11000000 00000000
;
;    Jump to new address        0xE0     111AAAAA AAAAAAAA
;
;  
;  I think that the instructions for Battle Zone, Gravitar and Tempest are
;  the same as Star Wars, but older games are different.
;
;  For Asteroids (and probably Asteroids deluxe and Lunar Lander):
;
;    Draw relative vector       0x80     1000YYYY YYYYYYYY IIIIXXXX XXXXXXXX
;
;    Draw relative vector
;    and load scale             0x90      1001YYYY YYYYYYYY SSSSXXXX XXXXXXXX
;
;    Beam to absolute
;    screen position            0xA0      1010YYYY YYYYYYYY UUUUXXXX XXXXXXXX
;
;    Halt                       0xB0      1011UUUU UUUUUUUU
;
;    Jump to subroutine         0xC0      1100AAAA AAAAAAAA
;
;    Return from subroutine     0xD0      1101UUUU UUUUUUUU
;
;    Jump to new address        0xE0      1110AAAA AAAAAAAA
;
;    Short vector draw          0xF0      1111YYYY IIIIXXXX
;
;
;  If you wish to see a constant image on the screen, remember that the main
;  processor will have to poll the VGHALT until all the vector instructions
;  have been executed, then write to VGGO to start again.
;
;  Also make sure that you return the beam to the centre of the screen
;  before halting the AVG, because if the beam were fully deflected and
;  left there the monitor deflection power transistors may not like it!
;
;

;;;
;;; VG control registers
;;;

vg_go = $4800
vg_reset = $5800

;;;
;;; VG opcodes
;;;
 
	_vg_opc_vldraw = $00
	_vg_opc_vhalt = $20
	_vg_opc_vsdraw = $40
	_vg_opc_vstat = $60
	_vg_opc_vscale = $70
	_vg_opc_vcentre = $80
	_vg_opc_vjsr = $a0
	_vg_opc_vrts = $c0
	_vg_opc_vjmp = $e0

;;;
;;; Macros to generate VG code
;;;

; Specifing a z (color index) of 2 means use the z from the last vstat 
; command.

stat = 2

	.macro	vscale	; b, l
        .byte   %2
        .byte   _vg_opc_vscale+%1
	.endm

	.macro	vjsr	; addr
        .byte	<((%1-$2000)/2)
        .byte	_vg_opc_vjsr+>((%1-$2000)/2)
	.endm

_vg_sparkle_bit = $08
	.macro	vstat	; z, c, sparkle
        .byte	((%1&$f)*16)+%2
        .byte	_vg_opc_vstat+(%3*8)+(%1/16)
	.endm

_vg_prm_vcentre = $40
	.macro	vcentre
        .byte	_vg_prm_vcentre, _vg_opc_vcentre
	.endm

	.macro	vsdraw	; x, y, z
        .byte	(((%1)/2)&$1f)+((%3)*16)
        .byte	(((%2)/2)&$1f)+_vg_opc_vsdraw
	.endm

	.macro	vldraw	; x, y, z
	.byte	<(%2)
	.byte	(>(%2))&$1f+_vg_opc_vldraw
	.byte	<(%1)
	.byte	((>%1)&$1f)+(%3*16)
	.endm

	.macro	vjmp	; addr
        .byte	<((%1-$2000)/2)
        .byte	_vg_opc_vjmp+>((%1-$2000)/2)
	.endm

	.macro	vrts
	.if	%0=1
	.byte	%1
	.else
	.byte	0
	.endif
	.byte	_vg_opc_vrts
	.endm

	.macro	vhalt
	.byte	0, _vg_opc_vhalt
	.endm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Vector generator RON
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

* = $3000

;
; Some strings are encode as a series of bytes of offsets into char_jsrtbl
; The high bit set indictes EOS. ; Set up some defines
;

_eos = $80
__ =   0
_0 =   2
_1 =   4
_2 =   6
_3 =   8
_4 =  10
_5 =  12
_6 =  14
_7 =  16
_8 =  18
_9 =  20
_A =  22
_B =  24
_C =  26
_D =  28
_E =  30
_F =  32
_G =  34
_H =  36
_I =  38
_J =  40
_K =  42
_L =  44
_M =  46
_N =  48
_O =  50
_P =  52
_Q =  54
_R =  56
_S =  58
_T =  60
_U =  62
_V =  64
_W =  66
_X =  68
_Y =  70
_Z =  72
_sp =  74
_mi =  76
_half =  78
_cr =  80

 


; The characters are 24 "pixels" high, and have a nominal 24 "pixel" font width
; (the current location is left 24 "pixels" to the right of the starting
; position

vg_sub_char_A

;  24         *
;  23        * *
;  22       *   *
;  21      *     *
;  20     *       *
;  19    *         *
;  18   *           *
;  17  *             *
;  16 *               *
;  15 *               *
;  14 *               *
;  13 *               *
;  12 *               *
;  11 *               *
;  10 *               *
;   9 *               *
;   8 *****************
;   7 *               *
;   6 *               *
;   5 *               *
;   4 *               *
;   3 *               *
;   2 *               *
;   1 *               *
;   0 *               *       x
;     0123456789012345678901234

	vsdraw  0, 16, 12 ; letter A
	vsdraw  8, 8, 12
	vsdraw  8, -8, 12
	vsdraw  0, -16, 12
	vsdraw  -16, 8, 0
	vsdraw  16, 0, 12
	vsdraw  8, -8, 0
	vrts

vg_sub_char_B
; *************    
; *            *   
; *             *  
; *              * 
; *               *
; *               *
; *               *
; *               *
; *               *
; *              * 
; *             *  
; *            *   
; *************    
; *            *   
; *             *  
; *              * 
; *               *
; *               *
; *               *
; *               *
; *               *
; *              * 
; *             *  
; *            *   
; *************    

	vsdraw  0, 24, 12 ; letter B
	vsdraw  12, 0, 12
	vsdraw  4, -4, 10
	vsdraw  0, -4, 10
	vsdraw  -4, -4, 10
	vsdraw  -12, 0, 12
	vsdraw  12, 0, 0
	vsdraw  4, -4, 10
	vsdraw  0, -4, 10
	vsdraw  -4, -4, 10
	vsdraw  -12, 0, 12
	vsdraw  24, 0, 0
	vrts

vg_sub_char_C

; *****************
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *****************

	vsdraw  0, 24, 12 ; letter C
	vsdraw  16, 0, 12
	vsdraw  -16, -24, 0
	vsdraw  16, 0, 12
	vsdraw  8, 0, 0
	vrts

vg_sub_char_D

; *********        
; *        *       
; *         *      
; *          *     
; *           *    
; *            *   
; *             *  
; *              * 
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *              * 
; *             *  
; *            *   
; *           *    
; *          *     
; *         *      
; *        *       
; *********        

	vsdraw  0, 24, 12 ; letter D
	vsdraw  8, 0, 12
	vsdraw  8, -8, 12
	vsdraw  0, -8, 12
	vsdraw  -8, -8, 12
	vsdraw  -8, 0, 12
	vsdraw  24, 0, 0
	vrts

vg_sub_char_E

; *****************
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *************    
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *****************

	vsdraw  0, 24, 12 ; letter E
	vsdraw  16, 0, 12
	vsdraw  -4, -12, 0
	vsdraw  -12, 0, 12
	vsdraw  0, -12, 0
	vsdraw  16, 0, 12
	vsdraw  8, 0, 0
	vrts

vg_sub_char_F

; *****************
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *************    
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *                

	vsdraw  0, 24, 12 ; letter F
	vsdraw  16, 0, 12
	vsdraw  -4, -12, 0
	vsdraw  -12, 0, 12
	vsdraw  0, -12, 0
	vsdraw  24, 0, 0
	vrts

vg_sub_char_G

; *****************
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *                
; *                
; *                
; *                
; *                
; *                
; *                
; *       *********
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *****************

	vsdraw  0, 24, 12 ; letter G
	vsdraw  16, 0, 12
	vsdraw  0, -8, 12
	vsdraw  -8, -8, 0
	vsdraw  8, 0, 12
	vsdraw  0, -8, 12
	vsdraw  -16, 0, 12
	vsdraw  24, 0, 0
	vrts
vg_sub_char_H

; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *****************
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *
; *               *

	vsdraw  0, 24, 12 ; letter H
	vsdraw  0, -12, 0
	vsdraw  16, 0, 12
	vsdraw  0, 12, 0
	vsdraw  0, -24, 12
	vsdraw  8, 0, 0
	vrts

vg_sub_char_I

; *****************
;         *        
;         *        
;         *        
;         *        
;         *        
;         *        
;         *        
;         *        
;         *        
;         *        
;         *        
;         *        
;         *        
;         *        
;         *        
;         *        
;         *        
;         *        
;         *        
;         *        
;         *        
;         *        
;         *        
; *****************

	vsdraw  16, 0, 12 ; letter I
	vsdraw  -8, 0, 0
	vsdraw  0, 24, 12
	vsdraw  8, 0, 0
	vsdraw  -16, 0, 12
	vsdraw  24, -24, 0
	vrts
vg_sub_char_J
	vsdraw  0, 8, 0 ; letter J
	vsdraw  8, -8, 12
	vsdraw  8, 0, 12
	vsdraw  0, 24, 12
	vsdraw  8, -24, 0
	vrts
vg_sub_char_K
	vsdraw  0, 24, 12 ; letter K
	vsdraw  12, 0, 0
	vsdraw  -12, -12, 12
	vsdraw  12, -12, 12
	vsdraw  12, 0, 0
	vrts
vg_sub_char_L
	vsdraw  0, 24, 0 ; letter L
	vsdraw  0, -24, 12
	vsdraw  16, 0, 12
	vsdraw  8, 0, 0
	vrts
vg_sub_char_M
	vsdraw  0, 24, 12 ; letter M
	vsdraw  8, -8, 12
	vsdraw  8, 8, 12
	vsdraw  0, -24, 12
	vsdraw  8, 0, 0
	vrts
vg_sub_char_N
	vsdraw  0, 24, 12 ; letter N
	vsdraw  16, -24, 12
	vsdraw  0, 24, 12
	vsdraw  8, -24, 0
	vrts
vg_sub_char_O
	vsdraw  0, 24, 12 ; letter O; digit 0
	vsdraw  16, 0, 12
	vsdraw  0, -24, 12
	vsdraw  -16, 0, 12
	vsdraw  24, 0, 0
	vrts
vg_sub_char_P
	vsdraw  0, 24, 12 ; letter P
	vsdraw  16, 0, 12
	vsdraw  0, -12, 12
	vsdraw  -16, 0, 12
	vsdraw  12, -12, 0
	vsdraw  12, 0, 0
	vrts
vg_sub_char_Q
	vsdraw  0, 24, 12 ; letter Q
	vsdraw  16, 0, 12
	vsdraw  0, -16, 12
	vsdraw  -8, -8, 12
	vsdraw  -8, 0, 12
	vsdraw  8, 8, 0
	vsdraw  8, -8, 12
	vsdraw  8, 0, 0
	vrts
vg_sub_char_R
	vsdraw  0, 24, 12 ; letter R
	vsdraw  16, 0, 12
	vsdraw  0, -12, 12
	vsdraw  -16, 0, 12
	vsdraw  4, 0, 0
	vsdraw  12, -12, 12
	vsdraw  8, 0, 0
	vrts
vg_sub_char_S
	vsdraw  16, 0, 12 ; letter S
	vsdraw  0, 12, 12
	vsdraw  -16, 0, 12
	vsdraw  0, 12, 12
	vsdraw  16, 0, 12
	vsdraw  8, -24, 0
	vrts
vg_sub_char_T
	vsdraw  8, 0, 0 ; letter T
	vsdraw  0, 24, 12
	vsdraw  -8, 0, 0
	vsdraw  16, 0, 12
	vsdraw  8, -24, 0
	vrts
vg_sub_char_U
	vsdraw  0, 24, 0 ; letter U
	vsdraw  0, -24, 12
	vsdraw  16, 0, 12
	vsdraw  0, 24, 12
	vsdraw  8, -24, 0
	vrts
vg_sub_char_V
	vsdraw  0, 24, 0 ; letter V
	vsdraw  8, -24, 12
	vsdraw  8, 24, 12
	vsdraw  8, -24, 0
	vrts
vg_sub_char_W
	vsdraw  0, 24, 0 ; letter W
	vsdraw  0, -24, 12
	vsdraw  8, 8, 12
	vsdraw  8, -8, 12
	vsdraw  0, 24, 12
	vsdraw  8, -24, 0
	vrts
vg_sub_char_X
	vsdraw  16, 24, 12 ; letter X
	vsdraw  -16, 0, 0
	vsdraw  16, -24, 12
	vsdraw  8, 0, 0
	vrts
vg_sub_char_Y
	vsdraw  8, 0, 0 ; letter Y
	vsdraw  0, 16, 12
	vsdraw  -8, 8, 12
	vsdraw  16, 0, 0
	vsdraw  -8, -8, 12
	vsdraw  16, -16, 0
	vrts
vg_sub_char_Z
	vsdraw  0, 24, 0 ; letter Z
	vsdraw  16, 0, 12
	vsdraw  -16, -24, 12
	vsdraw  16, 0, 12
	vsdraw  8, 0, 0
	vrts

vg_sub_char_space
	vsdraw  24, 0, 0 ; space
	vrts
vg_sub_char_1
	vsdraw  8, 0, 0 ; digit 1
	vsdraw  0, 24, 12
	vsdraw  16, -24, 0
	vrts
vg_sub_char_2
	vsdraw  0, 24, 0 ; digit 2
	vsdraw  16, 0, 12
	vsdraw  0, -12, 12
	vsdraw  -16, 0, 12
	vsdraw  0, -12, 12
	vsdraw  16, 0, 12
	vsdraw  8, 0, 0
	vrts
vg_sub_char_3
	vsdraw  16, 0, 12 ; digit 3
	vsdraw  0, 24, 12
	vsdraw  -16, 0, 12
	vsdraw  0, -12, 0
	vsdraw  16, 0, 12
	vsdraw  8, -12, 0
	vrts
vg_sub_char_4
	vsdraw  0, 24, 0 ; digit 4
	vsdraw  0, -12, 12
	vsdraw  16, 0, 12
	vsdraw  0, 12, 0
	vsdraw  0, -24, 12
	vsdraw  8, 0, 0
	vrts
vg_sub_char_5
	vsdraw  16, 0, 12 ; digit 5
	vsdraw  0, 12, 12
	vsdraw  -16, 0, 12
	vsdraw  0, 12, 12
	vsdraw  16, 0, 12
	vsdraw  8, -24, 0
	vrts
vg_sub_char_6
	vsdraw  0, 12, 0 ; digit 6
	vsdraw  16, 0, 12
	vsdraw  0, -12, 12
	vsdraw  -16, 0, 12
	vsdraw  0, 24, 12
	vsdraw  24, -24, 0
	vrts
vg_sub_char_7
	vsdraw  0, 24, 0 ; digit 7
	vsdraw  16, 0, 12
	vsdraw  0, -24, 12
	vsdraw  8, 0, 0
	vrts
vg_sub_char_8
	vsdraw  16, 0, 12 ; digit 8
	vsdraw  0, 24, 12
vg_sub_char_0
	vsdraw  -16, 0, 12 ; digit 0
	vsdraw  0, -24, 12
	vsdraw  0, 12, 0
	vsdraw  16, 0, 12
	vsdraw  8, -12, 0
	vrts
vg_sub_char_9
	vsdraw  16, 0, 0 ; digit 9
	vsdraw  0, 24, 12
	vsdraw  -16, 0, 12
	vsdraw  0, -12, 12
	vsdraw  16, 0, 12
	vsdraw  8, -12, 0
	vrts

; This is a table of vjsrs, copied out of when generating text.  It is also
; executed directly as part of one of the selftest displays.
char_jsrtbl
	vjsr	vg_sub_char_space ; space
	vjsr	vg_sub_char_O ; 0  ; use "oh" instead of 0 ; Copy detection?
	vjsr	vg_sub_char_1 ; 1
	vjsr	vg_sub_char_2 ; 2
	vjsr	vg_sub_char_3 ; 3
	vjsr	vg_sub_char_4 ; 4
	vjsr	vg_sub_char_5 ; 5
	vjsr	vg_sub_char_6 ; 6
	vjsr	vg_sub_char_7 ; 7
	vjsr	vg_sub_char_8 ; 8
	vjsr	vg_sub_char_9 ; 9
ltr_jsrtbl
	vjsr	vg_sub_char_A ; A
	vjsr	vg_sub_char_B ; B
	vjsr	vg_sub_char_C ; C
	vjsr	vg_sub_char_D ; D
	vjsr	vg_sub_char_E ; E
	vjsr	vg_sub_char_F ; F
	vjsr	vg_sub_char_G ; G
	vjsr	vg_sub_char_H ; H
	vjsr	vg_sub_char_I ; I
	vjsr	vg_sub_char_J ; J
	vjsr	vg_sub_char_K ; K
	vjsr	vg_sub_char_L ; L
	vjsr	vg_sub_char_M ; M
	vjsr	vg_sub_char_N ; N
	vjsr	vg_sub_char_O ; O
	vjsr	vg_sub_char_P ; P
	vjsr	vg_sub_char_Q ; Q
	vjsr	vg_sub_char_R ; R
	vjsr	vg_sub_char_S ; S
	vjsr	vg_sub_char_T ; T
	vjsr	vg_sub_char_U ; U
	vjsr	vg_sub_char_V ; V
	vjsr	vg_sub_char_W ; W
	vjsr	vg_sub_char_X ; X
	vjsr	vg_sub_char_Y ; Y
	vjsr	vg_sub_char_Z ; Z
	vjsr	vg_sub_char_space ; space
	vjsr	vg_sub_char_minus ; -
	vjsr	vg_sub_char_onehalf ; 1/2
	vjsr	vg_sub_char_copyright ; copyright

vg_sub_char_minus
	vsdraw  0, 12, 0 ; -
	vsdraw  16, 0, 12
	vsdraw  8, -12, 0
	vrts

vg_sub_char_copyright

;     *********    
;    *         *   
;   *           *  
;  *             * 
; *               *
; *               *
; *               *
; *               *
; *   *********   *
; *   *           *
; *   *           *
; *   *           *
; *   *           *
; *   *           *
; *   *           *
; *   *           *
; *   *********   *
; *               *
; *               *
; *               *
; *               *
;  *             * 
;   *           *  
;    *         *   
;     *********    

	vsdraw  0, 4, 0 ; copyright
	vsdraw  0, 16, 12
	vsdraw  4, 4, 12
	vsdraw  8, 0, 12
	vsdraw  4, -4, 12
	vsdraw  0, -16, 12
	vsdraw  -4, -4, 12
	vsdraw  -8, 0, 12
	vsdraw  -4, 4, 12
	vsdraw  12, 4, 0
	vsdraw  -8, 0, 12
	vsdraw  0, 8, 12
	vsdraw  8, 0, 12
	vsdraw  12, -16, 0
	vrts

vg_sub_char_onehalf
	vsdraw  16, 24, 12 ; 1/2
	vsdraw  -14, -10, 0
	vscale  2, 0
	vjsr	vg_sub_char_1 ; 1
	vsdraw  -8, -28, 0
	vjsr	vg_sub_char_2 ; 2
	vscale  1, 0
; $2a = Checksum byte for ROM #1 at $3000 - $37FF
	vrts	$2a




; Player, "nominal" picture (the one used for eg #-ships display)
vg_sub_image_player_nominal2
	vstat   12, 1, 1
vg_sub_image_player_nominal

;   6                         *
;   5                      *     *
;   4                   *           *
;   3                *                 *
;   2             *                       *
;   1          *                             *
;   0       *                 *                 *
;   1         *             *   *             *
;   2           *         *       *         *
;   3             *     *           *     *
;   4               * *               * *
;   5               * *               * *
;   6             *     *           *     *
;   7           *    *                 *    *
;   8         *   *                       *   *
;   9       *  *                             *  *
;  10     * *                                   * *
;  11   **                                         **
;  12 *                                               *
;                             0123456789012345678901234

	vsdraw  24, -12, 12
	vsdraw  -18, -6, 12
	vsdraw  12, 6, 12
	vsdraw  -18, 6, 12
	vsdraw  -18, -6, 12
	vsdraw  12, -6, 12
	vsdraw  -18, 6, 12
	vsdraw  24, 12, 12
vg_sub_move_60_right
	vldraw  60, 0, 0
	vrts






L3284
	vjsr	vg_sub_image_player_nominal
L3286
	vjsr	vg_sub_move_60_right
; Set of 6 vertical lines (used in a selftest display)
vg_sub_image_six_vertical_lines
	vldraw  0, 256, 4
	vldraw  16, -256, 0
	vldraw  0, 256, 6
vg_sub_image_four_vertical_lines
	vldraw  16, -256, 0
	vldraw  0, 256, 8
	vldraw  16, -256, 0
	vldraw  0, 256, 10
	vldraw  16, -256, 0
	vldraw  0, 256, 12
	vldraw  16, -256, 0
	vldraw  0, 256, 14
	vrts


vg_sub_image_selftest_4
; draw selftest display with bunches of 6 vertical lines
	vjsr	vg_sub_image_box_around_screen ; draw box around screen
	vcentre
	vldraw  64, -384, 0
	vstat   12, 3, 1
	vjsr	vg_sub_image_six_vertical_lines
	vcentre
	vldraw  64, -128, 0
	vstat   12, 7, 1
	vjsr	vg_sub_image_six_vertical_lines
	vcentre
	vldraw  64, 128, 0
	vstat   12, 5, 1
	vjsr	vg_sub_image_six_vertical_lines
	vcentre
	vldraw  -160, -384, 0
	vstat   12, 1, 1
	vjsr	vg_sub_image_six_vertical_lines
	vcentre
	vldraw  -160, -128, 0
	vstat   12, 4, 1
	vjsr	vg_sub_image_six_vertical_lines
	vcentre
	vldraw  -160, 128, 0
	vstat   12, 2, 1
	vjsr	vg_sub_image_six_vertical_lines
	vcentre
	vldraw  -48, -128, 0
	vstat   12, 0, 1
	vldraw  0, 256, 4
	vldraw  16, -320, 0
	vldraw  0, 320, 6
	vjmp	vg_sub_image_four_vertical_lines





; draw selftest display with diagonal grid and string of characters
vg_sub_image_selftest_2
	vjsr	vg_sub_image_box_around_screen ; draw box around screen
	vcentre
	vldraw  -500, -540, 0
	vldraw  1000, 810, 8
	vldraw  -334, 270, 8
	vldraw  -666, -540, 8
	vldraw  666, -540, 8
	vldraw  334, 270, 8
	vldraw  -1000, 810, 8
	vldraw  1000, 0, 0
	vldraw  -1000, -810, 8
	vldraw  334, -270, 8
	vldraw  666, 540, 8
	vldraw  -666, 540, 8
	vldraw  -334, -270, 8
	vldraw  1000, -810, 8
	vcentre
	vldraw  -520, -358, 0
	vjmp	char_jsrtbl






; draw selftest display that consists of a rectangular grid
vg_sub_image_selftest_5
	vscale  1, 0
	vcentre
	vldraw  500, -539, 0
	vldraw  -1000, 0, 10
	vcentre
	vldraw  500, -462, 0
	vldraw  -1000, 0, 10
	vcentre
	vldraw  500, -385, 0
	vldraw  -1000, 0, 10
	vcentre
	vldraw  500, -308, 0
	vldraw  -1000, 0, 10
	vcentre
	vldraw  500, -231, 0
	vldraw  -1000, 0, 10
	vcentre
	vldraw  500, -154, 0
	vldraw  -1000, 0, 10
	vcentre
	vldraw  500, -77, 0
	vldraw  -1000, 0, 10
	vcentre
	vldraw  500, 0, 0
	vldraw  -1000, 0, 10
	vcentre
	vldraw  500, 77, 0
	vldraw  -1000, 0, 10
	vcentre
	vldraw  500, 154, 0
	vldraw  -1000, 0, 10
	vcentre
	vldraw  500, 231, 0
	vldraw  -1000, 0, 10
	vcentre
	vldraw  500, 308, 0
	vldraw  -1000, 0, 10
	vcentre
	vldraw  500, 385, 0
	vldraw  -1000, 0, 10
	vcentre
	vldraw  500, 462, 0
	vldraw  -1000, 0, 10
	vcentre
	vldraw  500, 539, 0
	vldraw  -1000, 0, 10
	vcentre
	vldraw  -499, 540, 0
	vldraw  0, -1080, 10
	vcentre
	vldraw  -399, 540, 0
	vldraw  0, -1080, 10
	vcentre
	vldraw  -299, 540, 0
	vldraw  0, -1080, 10
	vcentre
	vldraw  -199, 540, 0
	vldraw  0, -1080, 10
	vcentre
	vldraw  -99, 540, 0
	vldraw  0, -1080, 10
	vcentre
	vldraw  1, 540, 0
	vldraw  0, -1080, 10
	vcentre
	vldraw  101, 540, 0
	vldraw  0, -1080, 10
	vcentre
	vldraw  201, 540, 0
	vldraw  0, -1080, 10
	vcentre
	vldraw  301, 540, 0
	vldraw  0, -1080, 10
	vcentre
	vldraw  401, 540, 0
	vldraw  0, -1080, 10
	vcentre
	vldraw  501, 540, 0
	vldraw  0, -1080, 10
	vrts






; draw full-screen crosshair, used in selftest
vg_sub_image_crosshair
	vjsr	L348a
	vldraw  768, 0, 8
	vldraw  -768, 576, 0
	vldraw  0, -1152, 8
	vldraw  -768, 576, 0
	vldraw  768, 0, 8
	vrts







vg_sub_string_erasing
	vjsr	L348a
	vldraw  -320, 140, 0
	vjsr	vg_sub_char_E ; E
	vjsr	vg_sub_char_R ; R
	vjsr	vg_sub_char_A ; A
	vjsr	vg_sub_char_S ; S
	vjsr	vg_sub_char_I ; I
	vjsr	vg_sub_char_N ; N
	vjmp	vg_sub_char_G ; G








; draw cocktail-bit C
vg_sub_char_cocktail_bit_C
	vjsr	L348a
	vldraw  -300, -40, 0
	vjmp	vg_sub_char_C ; C


L348a
	vstat   12, 0, 1
	vcentre
	vscale  1, 0
	vrts





; draw box around screen with line across the middle
vg_sub_image_selftest_1
	vjsr	vg_sub_image_box_around_screen
	vcentre
	vscale  1, 0
	vldraw  500, 0, 0
	vldraw  -1000, 0, 12
	vldraw  64, 448, 0
	vrts






vg_sub_image_box_around_screen
; Draw box around screen (used in selftest display)
; Draw just the box (used in shrinking-box selftest screen)
	vstat   12, 0, 1
	vscale  1, 0
L34aa
	vcentre
	vldraw  -500, -540, 0
	vldraw  1000, 0, 12
	vldraw  0, 1080, 12
	vldraw  -1000, 0, 12
	vldraw  0, -1080, 12
	vrts





; Explosion, size 1

;         *        
;      *  *  *     
;   *   * * *   *  
;    *  * * *  *   
;     *  ***  *    
;  *   * *** *   * 
;   **  * * *  **  
;     ** *** **    
; *****************
;     ** *** **    
;   **  * * *  **  
;  *   * *** *   * 
;     *  ***  *    
;    *  * * *  *   
;   *   * * *   *  
;      *  *  *     
;         *        

vg_sub_image_explosion_size_1
	vstat   12, 0, 1
	vldraw  7, 3, 0
	vsdraw  -14, -6, 14
	vldraw  1, -3, 0
	vsdraw  12, 12, 14
	vldraw  -3, 1, 0
	vsdraw  -6, -14, 14
	vldraw  3, -1, 0
	vsdraw  0, 16, 14
	vldraw  -3, -1, 0
	vsdraw  6, -14, 14
	vldraw  3, 1, 0
	vsdraw  -12, 12, 14
	vldraw  -1, -3, 0
	vsdraw  14, -6, 14
	vldraw  1, 3, 0
	vsdraw  -16, 0, 14
	vsdraw  8, 0, 0
	vrts






; Explosion, size 2

;      *          *                
;      *          *                
;       *   *     *                
;        *   *    *                
;         *  *    *     *          
;          *  *   *    *           
;   *       * *   *    *     *     
;    **      * *  *   *      *     
;      ***    **  *   *     *      
;         ***  ** *  *     *       
; *********************************
;               *** *    *         
;                ****   *          
;                 ** ***           
;                 **  * ***        
;                 ** *     ***     
;                 * *         ***  
;                 ** *        **   
;                 **  *    ***     
;                 **   ****        
;                ** *****          
;                ****    *         
;            ******  *    *        
;         ***  ** *  *     *       
;      ***    **  *   *     *      
;    **      * *  *   *      *     
;   *       * *   *    *      *    
;          *  *   *    *           
;         *  *    *    *           
;        *   *    *                
;       *    *    *                
;      *          *                
;     *           *                

vg_sub_image_explosion_size_2
	vstat   12, 0, 1
	vsdraw  14, 6, 0
	vsdraw  -28, -10, 12 ; x=-27 y=-12?
	vsdraw  2, -6, 0
	vsdraw  24, 26, 12 ; x=+24 y=+24?
	vsdraw  -6, 2, 0
	vsdraw  -12, -26, 12 ; x=-12 y=-28?
	vsdraw  6, -2, 0
	vldraw  0, 32, 12
	vsdraw  -6, -2, 0
	vsdraw  12, -26, 12 ; x=+12 y=-28?
	vsdraw  6, 2, 0
	vsdraw  -24, 26, 12 ; x=-24 y=+24?
	vsdraw  -2, -6, 0
	vsdraw  28, -10, 12 ; x=+28 y=-12?
	vsdraw  2, 6, 0
	vldraw  -32, 0, 12
	vsdraw  16, 0, 0
	vrts






; Explosion, size 3

;                                 *                                
;                                 *                                
;                                 *                                
;                                 *                                
;                     *           *           *                    
;                      *          *          *                     
;                      *          *          *                     
;                       *         *         *                      
;         *             *         *         *             *        
;          *             *        *        *             *         
;           *            *        *        *            *          
;            *            *       *       *            *           
;             *           *       *       *           *            
;              *          *       *       *          *             
;               *          *      *      *          *              
;                *         *      *      *         *               
;                 *         *     *     *         *                
;                  *        *     *     *        *                 
;                   *        *    *    *        *                  
;                    *       *    *    *       *                   
;     *               *      *    *    *      *               *    
;      **              *      *   *   *      *              **     
;        **             *     *   *   *     *             **       
;          **            *     *  *  *     *            **         
;            ***          *    *  *  *    *          ***           
;               **         *    * * *    *         **              
;                 **        *   * * *   *        **                
;                   ***      *  * * *  *      ***                  
;                      **     *  ***  *     **                     
;                        **    * *** *    **                       
;                          ***  * * *  ***                         
;                             ** *** **                            
; *****************************************************************
;                             ** *** **                            
;                           **  * * *  **                          
;                        ***   * *** *   ***                       
;                      **     *  ***  *     **                     
;                    **      *  * * *  *      **                   
;                 ***       *   * * *   *       ***                
;               **         *   *  *  *   *         **              
;             **          *    *  *  *    *          **            
;          ***           *     *  *  *     *           ***         
;        **             *     *   *   *     *             **       
;      **              *      *   *   *      *              **     
;     *               *      *    *    *      *               *    
;                    *       *    *    *       *                   
;                   *       *     *     *       *                  
;                  *        *     *     *        *                 
;                 *         *     *     *         *                
;                *         *      *      *         *               
;               *          *      *      *          *              
;              *          *       *       *          *             
;             *           *       *       *           *            
;            *           *        *        *           *           
;           *            *        *        *            *          
;          *             *        *        *             *         
;         *             *         *         *             *        
;                       *         *         *                      
;                      *          *          *                     
;                      *          *          *                     
;                     *           *           *                    
;                                 *                                
;                                 *                                
;                                 *                                
;                                 *    


vg_sub_image_explosion_size_3
	vstat   12, 0, 1
	vsdraw  28, 12, 0
	vldraw  -56, -24, 12
	vsdraw  4, -12, 0
	vldraw  48, 48, 12
	vsdraw  -12, 4, 0
	vldraw  -24, -56, 12
	vsdraw  12, -4, 0
	vldraw  0, 64, 12
	vsdraw  -12, -4, 0
	vldraw  24, -56, 12
	vsdraw  12, 4, 0
	vldraw  -48, 48, 12
	vsdraw  -4, -12, 0
	vldraw  56, -24, 12
	vsdraw  4, 12, 0
	vldraw  -64, 0, 12
	vldraw  32, 0, 0
	vrts






; Explosion, size 4


;                                                                 *                                                                
;                                                                 *                                                                
;                                                                 *                                                                
;                                                                 *                                                                
;                                                                 *                                                                
;                                                                 *                                                                
;                                                                 *                                                                
;                                                                 *                                                                
;                                         *                       *                       *                                        
;                                          *                      *                      *                                         
;                                          *                      *                      *                                         
;                                           *                     *                     *                                          
;                                           *                     *                     *                                          
;                                            *                    *                    *                                           
;                                            *                    *                    *                                           
;                                             *                   *                   *                                            
;                 *                           *                   *                   *                           *                
;                  *                          *                   *                   *                          *                 
;                   *                          *                  *                  *                          *                  
;                    *                         *                  *                  *                         *                   
;                     *                         *                 *                 *                         *                    
;                      *                        *                 *                 *                        *                     
;                       *                        *                *                *                        *                      
;                        *                       *                *                *                       *                       
;                         *                      *                *                *                      *                        
;                          *                      *               *               *                      *                         
;                           *                     *               *               *                     *                          
;                            *                     *              *              *                     *                           
;                             *                    *              *              *                    *                            
;                              *                    *             *             *                    *                             
;                               *                   *             *             *                   *                              
;                                *                  *             *             *                  *                               
;                                 *                  *            *            *                  *                                
;                                  *                 *            *            *                 *                                 
;                                   *                 *           *           *                 *                                  
;                                    *                *           *           *                *                                   
;                                     *                *          *          *                *                                    
;                                      *               *          *          *               *                                     
;                                       *              *          *          *              *                                      
;                                        *              *         *         *              *                                       
;         *                               *             *         *         *             *                               *        
;          **                              *             *        *        *             *                              **         
;            **                             *            *        *        *            *                             **           
;              **                            *            *       *       *            *                            **             
;                ***                          *           *       *       *           *                          ***               
;                   **                         *          *       *       *          *                         **                  
;                     **                        *          *      *      *          *                        **                    
;                       ***                      *         *      *      *         *                      ***                      
;                          **                     *         *     *     *         *                     **                         
;                            **                    *        *     *     *        *                    **                           
;                              ***                  *        *    *    *        *                  ***                             
;                                 **                 *       *    *    *       *                 **                                
;                                   **                *      *    *    *      *                **                                  
;                                     ***              *      *   *   *      *              ***                                    
;                                        **             *     *   *   *     *             **                                       
;                                          **            *     *  *  *     *            **                                         
;                                            ***          *    *  *  *    *          ***                                           
;                                               **         *    * * *    *         **                                              
;                                                 **        *   * * *   *        **                                                
;                                                   ***      *  * * *  *      ***                                                  
;                                                      **     *  ***  *     **                                                     
;                                                        **    * *** *    **                                                       
;                                                          ***  * * *  ***                                                         
;                                                             ** *** **                                                            
; *********************************************************************************************************************************
;                                                             ** *** **                                                            
;                                                           **  * * *  **                                                          
;                                                        ***   * *** *   ***                                                       
;                                                      **     *  ***  *     **                                                     
;                                                    **      *  * * *  *      **                                                   
;                                                 ***       *   * * *   *       ***                                                
;                                               **         *   *  *  *   *         **                                              
;                                             **          *    *  *  *    *          **                                            
;                                          ***           *     *  *  *     *           ***                                         
;                                        **             *     *   *   *     *             **                                       
;                                      **              *      *   *   *      *              **                                     
;                                   ***               *      *    *    *      *               ***                                  
;                                 **                 *       *    *    *       *                 **                                
;                               **                  *       *     *     *       *                  **                              
;                            ***                   *        *     *     *        *                   ***                           
;                          **                     *         *     *     *         *                     **                         
;                        **                      *         *      *      *         *                      **                       
;                     ***                       *          *      *      *          *                       ***                    
;                   **                         *          *       *       *          *                         **                  
;                 **                          *           *       *       *           *                          **                
;              ***                           *           *        *        *           *                           ***             
;            **                             *            *        *        *            *                             **           
;          **                              *             *        *        *             *                              **         
;         *                               *             *         *         *             *                               *        
;                                        *              *         *         *              *                                       
;                                       *              *          *          *              *                                      
;                                      *               *          *          *               *                                     
;                                     *               *           *           *               *                                    
;                                    *                *           *           *                *                                   
;                                   *                 *           *           *                 *                                  
;                                  *                 *            *            *                 *                                 
;                                 *                  *            *            *                  *                                
;                                *                  *             *             *                  *                               
;                               *                   *             *             *                   *                              
;                              *                   *              *              *                   *                             
;                             *                    *              *              *                    *                            
;                            *                     *              *              *                     *                           
;                           *                     *               *               *                     *                          
;                          *                      *               *               *                      *                         
;                         *                      *                *                *                      *                        
;                        *                       *                *                *                       *                       
;                       *                       *                 *                 *                       *                      
;                      *                        *                 *                 *                        *                     
;                     *                         *                 *                 *                         *                    
;                    *                         *                  *                  *                         *                   
;                   *                          *                  *                  *                          *                  
;                  *                          *                   *                   *                          *                 
;                 *                           *                   *                   *                           *                
;                                            *                    *                    *                                           
;                                            *                    *                    *                                           
;                                            *                    *                    *                                           
;                                           *                     *                     *                                          
;                                           *                     *                     *                                          
;                                          *                      *                      *                                         
;                                          *                      *                      *                                         
;                                         *                       *                       *                                        
;                                                                 *                                                                
;                                                                 *                                                                
;                                                                 *                                                                
;                                                                 *                                                                
;                                                                 *                                                                
;                                                                 *                                                                
;                                                                 *                                                                
;                                                                 *                                                                

vg_sub_image_explosion_size_4
	vstat   12, 0, 1
	vldraw  56, 24, 0
	vldraw  -112, -48, 12
	vsdraw  8, -24, 0
	vldraw  96, 96, 12
	vsdraw  -24, 8, 0
	vldraw  -48, -112, 12
	vsdraw  24, -8, 0
	vldraw  0, 128, 12
	vsdraw  -24, -8, 0
	vldraw  48, -112, 12
	vsdraw  24, 8, 0
	vldraw  -96, 96, 12
	vsdraw  -8, -24, 0
	vldraw  112, -48, 12
	vsdraw  8, 24, 0
	vldraw  -128, 0, 12
	vldraw  64, 0, 0
	vrts






; Player shot

;            *               
;                            
;                            
;                            
; *                     *    
;                            
;                            
;                            
;            *               
;                            
;       *         *          
;                            
;                            
;                            
;                            
; *   *      *      *       *
;                            
;                            
;                            
;                            
;       *         *          
;                            
;            *               
;                            
;                            
;                            
; *          *          *    

vg_sub_image_player_shot
	vstat   12, 8, 1
	vldraw  0, 0, 0
	vldraw  0, 0, stat
	vldraw  7, 0, 0
	vldraw  0, 0, stat
	vldraw  -2, 5, 0
	vldraw  0, 0, stat
	vldraw  -5, 2, 0
	vldraw  0, 0, stat
	vldraw  -5, -2, 0
	vldraw  0, 0, stat
	vldraw  -2, -5, 0
	vldraw  0, 0, stat
	vldraw  2, -5, 0
	vldraw  0, 0, stat
	vldraw  5, -2, 0
	vldraw  0, 0, stat
	vldraw  5, 2, 0
	vldraw  0, 0, stat
	vstat   12, 1, 1
	vldraw  10, 5, 0
	vldraw  0, 0, stat
	vldraw  -4, 11, 0
	vldraw  0, 0, stat
	vldraw  -11, 4, 0
	vldraw  0, 0, stat
	vldraw  -11, -4, 0
	vldraw  0, 0, stat
	vldraw  0, -11, 0 ; x=-4 y=-11?
	vldraw  0, 0, stat
	vldraw  0, -11, 0 ; x=+4 y=-11?
	vldraw  0, 0, stat
	vldraw  11, 0, 0 ; x=+11 y=-4?
	vldraw  0, 0, stat
	vldraw  11, 0, 0 ; x=+11 y=+4?
	vldraw  0, 0, stat
	vrts






; Cloud of dots (starfield between levels?)
L3622
	vstat   15, 0, 0
	vjsr	vg_sub_image_cloud_of_dots_1
	vjmp	vg_sub_image_cloud_of_dots_2






; Cloud of dots (starfield between levels?)

;                                 *                        
;                                                          
;               *                                          
;                                                          
;                                                          
;                                                          
;                                                          
;                                                          
;                                     *               *    
;                                                          
;                                                          
;                 *                                        
;                                                          
;                                                          
;                                                          
;                                                          
;                                 *                        
;                                                          
; *                                              *         
;                                                          
;                   *                                      
;                                                          
;                                                          
;                                                          
;                                                          
;                                 *                        
;                                                          
;                                                          
;                             *     *                      
;                                                          
;             *                                           *
;                                                          
;                                                          
;                                                          
;                                                          
;                                                          
;                  *                              *        
;                                                          
;   *                                                      
;                                                          
;                                                          
;                                                          
;                                                          
;                                                          
;                                                          
;                                                          
;                             *                            
;                                                          
;               *                                     *    
;                                                          
;                                                          
;                                                          
;                                                          
;                                                          
;   *                                                      
;                                                          
;                                   *      
vg_sub_image_cloud_of_dots_1
	vldraw  -32, 0, 0
	vldraw  0, 0, stat
	vldraw  64, 48, 0
	vldraw  0, 0, stat
	vldraw  32, -48, 0
	vldraw  0, 0, stat
	vldraw  -32, 192, 0
	vldraw  0, 0, stat
	vldraw  -224, -64, 0
	vldraw  0, 0, stat
	vldraw  -16, -256, 0
	vldraw  0, 0, stat
	vldraw  176, -160, 0
	vldraw  0, 0, stat
	vldraw  320, 160, 0
	vldraw  0, 0, stat
	vldraw  -16, 288, 0
	vldraw  0, 0, stat
	vldraw  -176, 160, 0
	vldraw  0, 0, stat
	vldraw  -320, -48, 0
	vldraw  0, 0, stat
	vldraw  -64, -304, 0
	vldraw  0, 0, stat
	vldraw  32, -288, 0
	vldraw  0, 0, stat
	vldraw  320, -128, 0
	vldraw  0, 0, stat
	vldraw  288, 128, 0
	vldraw  0, 0, stat
	vldraw  64, 288, 0
	vldraw  0, 0, stat
	vldraw  -64, 352, 0
	vldraw  0, 0, stat
	vldraw  -320, 128, 0
	vldraw  0, 0, stat
	vldraw  -288, -32, 0
	vldraw  0, 0, stat
	vldraw  -224, -256, 0
	vldraw  0, 0, stat
	vldraw  32, -320, 0
	vldraw  0, 0, stat
	vldraw  0, -256, 0
	vldraw  0, 0, stat
	vldraw  448, 416, 0
	vrts







; Cloud of dots (starfield between levels?)

;                   *                              
;                                                  
;                                                  
;                                                  
;                                                  
;                                                  
;                                     *            
;                                                  
;                                                  
;                                                  
;                                                  
;                                                  
;                         *                        
;                                                  
;               *                                  
;                                                  
; *                                                
;                                                  
;                               *                  
;                                                  
;                                             *    
;                                                  
;                     *                            
;                                                  
;       *                 *                        
;                                                  
;                                                  
;                                                  
;                                 *                
;                                                  
;                 *                                
;                                                  
;                                                  
;                                                  
;                                                  
;                                                  
;                         *                        
;                                                  
; *                                               *
;                                                  
;                                                  
;                                                  
;             *                                    
;                                    *             
;                                                  
;                                                  
;                                                  
;                                                  
;                                                  
;                                                  
;                                                  
;                                                  
;         *                                     *  
;                                                  
;                                                  
;                                                  
;                       *          

vg_sub_image_cloud_of_dots_2
	vldraw  32, 32, 0
	vldraw  0, 0, stat
	vldraw  -64, 32, 0
	vldraw  0, 0, stat
	vldraw  -64, -128, 0
	vldraw  0, 0, stat
	vldraw  128, -96, 0
	vldraw  0, 0, stat
	vldraw  128, 128, 0
	vldraw  0, 0, stat
	vldraw  -32, 160, 0
	vldraw  0, 0, stat
	vldraw  -96, 96, 0
	vldraw  0, 0, stat
	vldraw  -160, -32, 0
	vldraw  0, 0, stat
	vldraw  -128, -160, 0
	vldraw  0, 0, stat
	vldraw  96, -288, 0
	vldraw  0, 0, stat
	vldraw  368, -16, 0
	vldraw  0, 0, stat
	vldraw  144, 368, 0
	vldraw  0, 0, stat
	vldraw  -128, 224, 0
	vldraw  0, 0, stat
	vldraw  -288, 96, 0
	vldraw  0, 0, stat
	vldraw  -288, -256, 0
	vldraw  0, 0, stat
	vldraw  0, -352, 0
	vldraw  0, 0, stat
	vldraw  128, -224, 0
	vldraw  0, 0, stat
	vldraw  224, -64, 0
	vldraw  0, 0, stat
	vldraw  384, 64, 0
	vldraw  0, 0, stat
	vldraw  32, 224, 0
	vldraw  0, 0, stat
	vrts






; Cloud of dots (starfield between levels?)

;                   *                                
;                                      *             
;                                                    
;                                                    
;                                                    
;                                                    
;                                                    
;                                                    
;                           *                        
;                                                    
;                                                    
;                                                    
;  *                                      *          
;                                                    
;                                                    
;                                                    
;             *                                      
;                                                    
;                                                   *
;                                                    
;                           *                        
;                                                    
;                               *                    
;                                                    
;               *                       *            
;                                                    
;                                                    
;                                                    
; *         *                                        
;                                                    
;                                                    
;                                                    
;                                     *              
;                                                    
;                                                    
;                                                    
;                                                    
;                     *                              
;                                               *    
;                                                    
;                                                    
;                                                    
;                                                    
;                                                    
;   *                                                
;                                                    
;                                                    
;                                                    
;                   *               *                
;                                                    
;                                                    
;                                                    
;                                                    
;                                                    
;                                                    
;                                                    
;                 *                         *        

vg_sub_image_cloud_of_dots_3
	vldraw  64, 64, 0
	vldraw  0, 0, stat
	vldraw  -64, 32, 0
	vldraw  0, 0, stat
	vldraw  -192, -64, 0
	vldraw  0, 0, stat
	vldraw  96, -208, 0
	vldraw  0, 0, stat
	vldraw  256, 80, 0
	vldraw  0, 0, stat
	vldraw  32, 128, 0
	vldraw  0, 0, stat
	vldraw  32, 192, 0
	vldraw  0, 0, stat
	vldraw  -224, 64, 0
	vldraw  0, 0, stat
	vldraw  -224, -128, 0
	vldraw  0, 0, stat
	vldraw  -32, -192, 0
	vldraw  0, 0, stat
	vldraw  128, -320, 0
	vldraw  0, 0, stat
	vldraw  256, 0, 0
	vldraw  0, 0, stat
	vldraw  192, 160, 0
	vldraw  0, 0, stat
	vldraw  64, 320, 0
	vldraw  0, 0, stat
	vldraw  -208, 272, 0
	vldraw  0, 0, stat
	vldraw  -304, 16, 0
	vldraw  0, 0, stat
	vldraw  -272, -192, 0
	vldraw  0, 0, stat
	vldraw  -16, -256, 0
	vldraw  0, 0, stat
	vldraw  32, -256, 0
	vldraw  0, 0, stat
	vldraw  224, -192, 0
	vldraw  0, 0, stat
	vldraw  416, 0, 0
	vldraw  0, 0, stat
	vrts






; Cloud of dots (starfield between levels?)

;                                       *                
;                                                        
;               *                                        
;                                                        
;                     *                                  
;                                                        
;                                                        
;                                                        
;                                     *                  
;                                                        
;                                                        
;                                                        
;                                                        
;                                                        
;                       *                                
;                                                        
; *                                   *                  
;                                                        
;         *                                             *
;                                                        
;                                                        
;                                                        
;                                             *          
;                                                        
;                                                        
;                                                        
;                 *         *         *                  
;                                                        
;   *                                                    
;                                                        
;                                                        
;                                                        
;                                                        
;                                                        
;                                                        
;                                                        
;                                 *           *          
;                                                        
;               *                                        
;                                                        
;                                                        
;                                   *                    
;                                                        
;                                                        
;                                                        
;                                                        
;                                             *          
;                                                        
;                                                        
;                                                        
;                                                        
;                                                        
;       *                          

vg_sub_image_cloud_of_dots_4
	vldraw  -32, -64, 0
	vldraw  0, 0, stat
	vldraw  160, 0, 0
	vldraw  0, 0, stat
	vldraw  0, 160, 0
	vldraw  0, 0, stat
	vldraw  -224, 32, 0
	vldraw  0, 0, stat
	vldraw  -96, -192, 0
	vldraw  0, 0, stat
	vldraw  256, -160, 0
	vldraw  0, 0, stat
	vldraw  192, 224, 0
	vldraw  0, 0, stat
	vldraw  -128, 224, 0
	vldraw  0, 0, stat
	vldraw  -256, 64, 0
	vldraw  0, 0, stat
	vldraw  -192, -224, 0
	vldraw  0, 0, stat
	vldraw  96, -320, 0
	vldraw  0, 0, stat
	vldraw  320, -48, 0
	vldraw  0, 0, stat
	vldraw  160, 80, 0
	vldraw  0, 0, stat
	vldraw  160, 288, 0
	vldraw  0, 0, stat
	vldraw  -256, 288, 0
	vldraw  0, 0, stat
	vldraw  -384, -32, 0
	vldraw  0, 0, stat
	vldraw  -224, -224, 0
	vldraw  0, 0, stat
	vldraw  32, -192, 0
	vldraw  0, 0, stat
	vldraw  64, -384, 0
	vldraw  0, 0, stat
	vldraw  608, 96, 0
	vldraw  0, 0, stat
	vrts






; Spiker, picture 1

;                      *                                                   
;                     *                                                    
;                     *                                                    
;                     *                                                    
;                    *                                                     
;                    *                                                     
;                    *                                                     
;                   *                                                      
;                   *                                                      
;                   *                                                      
;                  *                                                       
;                  *                                                       
;                  *                                                       
;                 *                                                        
;                 *                                                        
;                 *                                                        
;                *                                                         
;                *                                                         
;                *                                                         
;               *                                                          
;               *                                                          
;               *                                                          
;              *                                                           
;              *                                                           
;              *                                                           
;             *                                                            
;             *                                                            
;             *                                                            
;            *                                                             
;            *                                                             
;           *                                                              
;           *                                                              
;           *                             *                                
;          *                             *****                             
;          *                           **     ****                         
;          *                         **           ***                      
;         *                        **                ****                  
;         *                       *                      ****              
;         *                     **                           ****          
;        *                    **                                *          
;        *                  **                                  *          
;        *                **                                     *         
;       *               **                                       *         
;       *               *                                         *        
;       *               *                                         *        
;      *                *                                          *       
;      *               *                                           *       
;      *               *                                            *      
;     *                *                  *                         *      
;     *               *                 ** *****                     *     
;     *               *               **        *****                *     
;    *                *             **              *                *     
;    *               *            **                 *                *    
;    *               *            *                  *                *    
;   *                *            *                   *                *   
;   *               *             *                    *               *   
;   *               *             *                    *                *  
;  *                *             *                     *               *  
;  *               *              *                     *                * 
;  *               *              *                      *               * 
; **              *               *       *               *               *
;  *               *               *       *             *               * 
;  *               *                *       *            *               * 
;   *               *                *     *             *              *  
;   *               *                 *****              *              *  
;    *               *                                   *              *  
;    *               *                                   *             *   
;     *               *                                 *              *   
;     *               *                                 *              *   
;     *                *                                *             *    
;      *               *                                *             *    
;      *                *                               *             *    
;       *               *                               *            *     
;       *                *                              *            *     
;        *               *                            ***            *     
;        *                *                         **              *      
;        *                ****                    **                *      
;         *                   ****             ***                  *      
;         *                       ****       **                    *       
;          *                          **** **                      *       
;          *                              *                        *       
;          *                                                      *        
;           *                                                     *        
;           *                                                     *        
;            *                                                   **        
;            *                                                 **          
;             *                                              **            
;             *                                            **              
;             ****                                       **                
;                 ***                                  **                  
;                    ****                            **                    
;                        ***                       **                      
;                           ****                 **                        
;                               ***            **                          
;                                  ****      **                            
;                                      *** **                              
;                                         *           

vg_sub_image_spiker_1
	vstat   12, 5, 1
	vsdraw  2, -2, stat
	vsdraw  -2, -2, stat
	vsdraw  -4, 0, stat
	vsdraw  -4, 4, stat
	vsdraw  0, 8, stat
	vsdraw  8, 4, stat
	vsdraw  10, -2, stat
	vsdraw  6, -10, stat
	vsdraw  -2, -14, stat
	vsdraw  -14, -6, stat
	vsdraw  -16, 4, stat
	vsdraw  -8, 16, stat
	vsdraw  6, 18, stat
	vsdraw  18, 10, stat
	vsdraw  22, -6, stat
	vsdraw  10, -22, stat
	vsdraw  -8, -24, stat
	vsdraw  -24, -12, stat
	vsdraw  -28, 8, stat
	vsdraw  -12, 28, stat
	vsdraw  10, 30, stat
	vrts






; Spiker, picture 2

;                                                             *                                    
;                                                           ** **                                  
;                                                         **     ***                               
;                                                       **          ***                            
;                                                     **               ***                         
;                                                  ***                    ***                      
;                                                **                          ***                   
;                                              **                               ***                
;                                            **                                    ****            
;                                          **                                         *            
;                                       ***                                            *           
;                                       *                                              *           
;                                       *                                               *          
;                                       *                                               *          
;                                      *                                                 *         
;                                      *                                                 *         
;                                      *                      *                           *        
;                                      *                     * ******                     *        
;                                     *                    **        ********              *       
;                                     *                  **                 *              *       
;                                     *                 *                   *               *      
;                                     *               **                     *              *      
;                                    *              **                       *               *     
;                                    *              *                         *              *     
;                                    *              *                         *               *    
;                                   *               *                          *              *    
;                                   *               *                          *               *   
;                                   *              *                           *               *   
;                                   *              *                            *               *  
;                                  *               *                            *               *  
;                                  *               *            *                *               * 
;                                  *               *           * *               *               * 
;                                 **              *           *   *               *               *
;                                  *               *              *              *               * 
;                                   *              *              *              *               * 
;                                   *               *             *              *               * 
;                                    *              *             *              *              *  
;                                    *               *           *              *               *  
;                                     *              *          *               *               *  
;                                     *               *        *                *               *  
;                                      *              *********                 *              *   
;                                       *                                      *               *   
;                                       *                                      *               *   
;                                        *                                     *              *    
;                                        *                                     *              *    
;                                         *                                   *               *    
;                                         *                                   *               *    
;                                          *                                  *              *     
;                                          *                                 **              *     
;                                           *                              **                *     
;                                           ****                         **                 *      
; *                                             ***                    **                   *      
;  ***                                             ***               **                     *      
;     ***                                             ***          **                       *      
;        ***                                             ***     **                        *       
;           ***                                             ** **                          *       
;              ***                                            *                            *       
;                 ***                                                                     *        
;                    ***                                                                  *        
;                       ***                                                               *        
;                          ***                                                          ***        
;                             **                                                      **           
;                               ***                                                 **             
;                                  ***                                           ***               
;                                     ***                                      **                  
;                                        ***                                ***                    
;                                           ***                           **                       
;                                              ***                      **                         
;                                                 ***                ***                           
;                                                    ***           **                              
;                                                       ***      **                                
;                                                          ******                                  
;                                                             *                                    
vg_sub_image_spiker_2
	vstat   12, 5, 1
	vsdraw  2, 2, stat
	vsdraw  2, -2, stat
	vsdraw  0, -4, stat
	vsdraw  -4, -4, stat
	vsdraw  -8, 0, stat
	vsdraw  -4, 8, stat
	vsdraw  2, 10, stat
	vsdraw  10, 6, stat
	vsdraw  14, -2, stat
	vsdraw  6, -14, stat
	vsdraw  -4, -16, stat
	vsdraw  -16, -8, stat
	vsdraw  -18, 6, stat
	vsdraw  -10, 18, stat
	vsdraw  6, 22, stat
	vsdraw  22, 10, stat
	vsdraw  24, -8, stat
	vsdraw  12, -24, stat
	vsdraw  -8, -28, stat
	vsdraw  -28, -12, stat
	vsdraw  -30, 10, stat
	vrts






; Spiker, picture 3

;                                 *                                        
;                               ** ***                                     
;                             **      ****                                 
;                           **            ***                              
;                         **                 ****                          
;                       **                       ***                       
;                     **                            ****                   
;                   **                                  ***                
;                 **                                       ****            
;               **                                            *            
;             **                                              *            
;           **                                                 *           
;         **                                                   *           
;         *                                                     *          
;         *                                                     *          
;         *                                                      *         
;        *                        *                              *         
;        *                      ** ****                          *         
;        *                    **       ****                       *        
;       *                  ***             ****                   *        
;       *                **                    ****                *       
;       *              **                         *                *       
;      *            ***                            *               *       
;      *            *                              *                *      
;      *            *                               *               *      
;     *             *                               *                *     
;     *             *                                *               *     
;     *             *                                *                *    
;    *              *                                 *               *    
;    *              *                                 *               *    
;    *             *                                   *               *   
;   *              *                                   *               *   
;   *              *              *****                 *               *  
;   *              *             *     *                *               *  
;  *               *            *       *                *               * 
;  *               *             *       *               *               * 
; *               *               *       *               *              **
;  *               *                      *              *               * 
;  *                *                     *              *               * 
;   *               *                     *             *                * 
;   *                *                    *             *               *  
;    *               *                    *             *               *  
;    *                *                   *            *                *  
;     *                *                  *            *               *   
;     *                *                 **            *               *   
;      *                *              **             *                *   
;      *                *****        **               *               *    
;      *                     ***** **                 *               *    
;       *                         *                  *                *    
;       *                                            *               *     
;        *                                           *               *     
;        *                                          *                *     
;         *                                         *               *      
;         *                                         *               *      
;          *                                       **               *      
;          *                                     **                *       
;           *                                  **                  *       
;           *                                **                    *       
;           ****                           **                     *        
;               ****                      *                       *        
;                   ****                **                        *        
;                       ***           **                         *         
;                          ****     **                           *         
;                              *****                             *         
;                                 *                             *          
;                                                               *          
;                                                               *          
;                                                              *           
;                                                              *           
;                                                             *            
;                                                             *            
;                                                             *            
;                                                            *             
;                                                            *             
;                                                            *             
;                                                           *              
;                                                           *              
;                                                           *              
;                                                          *               
;                                                          *               
;                                                          *               
;                                                         *                
;                                                         *                
;                                                         *                
;                                                        *                 
;                                                        *                 
;                                                        *                 
;                                                       *                  
;                                                       *                  
;                                                       *                  
;                                                      *                   
;                                                      *                   
;                                                      *                   
;                                                     *                    
;                                                     *                    
;                                                     *                    
;                                                    *                     
vg_sub_image_spiker_3
	vstat   12, 5, 1
	vsdraw  -2, 2, stat
	vsdraw  2, 2, stat
	vsdraw  4, 0, stat
	vsdraw  4, -4, stat
	vsdraw  0, -8, stat
	vsdraw  -8, -4, stat
	vsdraw  -10, 2, stat
	vsdraw  -6, 10, stat
	vsdraw  2, 14, stat
	vsdraw  14, 6, stat
	vsdraw  16, -4, stat
	vsdraw  8, -16, stat
	vsdraw  -6, -18, stat
	vsdraw  -18, -10, stat
	vsdraw  -22, 6, stat
	vsdraw  -10, 22, stat
	vsdraw  8, 24, stat
	vsdraw  24, 12, stat
	vsdraw  28, -8, stat
	vsdraw  12, -28, stat
	vsdraw  -10, -30, stat
	vrts






; Spiker, picture 4

;                                     *                                                            
;                                   ******                                                         
;                                 **      ***                                                      
;                               **           ***                                                   
;                            ***                ***                                                
;                          **                      ***                                             
;                        **                           ***                                          
;                     ***                                ***                                       
;                   **                                      ***                                    
;                ***                                           ***                                 
;              **                                                 ***                              
;            **                                                      **                            
;         ***                                                          ***                         
;         *                                                               ***                      
;         *                                                                  ***                   
;         *                                                                     ***                
;        *                            *                                            ***             
;        *                          ** **                                             ***          
;        *                        **     ***                                             ***       
;       *                       **          ***                                             ***    
;       *                     **               ***                                             *** 
;       *                   **                    ***                                             *
;       *                 **                         ****                                          
;      *                **                              *                                          
;      *              **                                 *                                         
;      *              *                                  *                                         
;     *               *                                   *                                        
;     *               *                                   *                                        
;     *              *                                     *                                       
;     *              *                                     *                                       
;    *               *                                      *                                      
;    *               *                                      *                                      
;    *              *                 *********              *                                     
;   *               *                *        *               *                                    
;   *               *               *          *              *                                    
;   *               *              *           *               *                                   
;   *              *              *             *              *                                   
;  *               *              *             *               *                                  
;  *               *              *              *              *                                  
;  *               *              *              *               *                                 
; *               *               *   *           *              **                                
;  *               *               * *           *               *                                 
;  *               *                *            *               *                                 
;   *               *                            *               *                                 
;   *               *                            *              *                                  
;    *               *                           *              *                                  
;    *               *                          *               *                                  
;     *              *                          *               *                                  
;     *               *                         *              *                                   
;      *              *                         *              *                                   
;      *               *                       **              *                                   
;       *              *                     **               *                                    
;       *               *                   *                 *                                    
;        *              *                 **                  *                                    
;        *              ********        **                    *                                    
;         *                     ****** *                     *                                     
;         *                           *                      *                                     
;          *                                                 *                                     
;          *                                                 *                                     
;           *                                               *                                      
;           *                                               *                                      
;            *                                              *                                      
;            *                                            ***                                      
;             *                                         **                                         
;             ****                                    **                                           
;                 ***                               **                                             
;                    ***                          **                                               
;                       ***                    ***                                                 
;                          ***               **                                                    
;                             ***          **                                                      
;                                ***     **                                                        
;                                   ** **                                                          
;                                     *                                                            
vg_sub_image_spiker_4
	vstat   12, 5, 1
	vsdraw  -2, -2, stat
	vsdraw  -2, 2, stat
	vsdraw  0, 4, stat
	vsdraw  4, 4, stat
	vsdraw  8, 0, stat
	vsdraw  4, -8, stat
	vsdraw  -2, -10, stat
	vsdraw  -10, -6, stat
	vsdraw  -14, 2, stat
	vsdraw  -6, 14, stat
	vsdraw  4, 16, stat
	vsdraw  16, 8, stat
	vsdraw  18, -6, stat
	vsdraw  10, -18, stat
	vsdraw  -6, -22, stat
	vsdraw  -22, -10, stat
	vsdraw  -24, 8, stat
	vsdraw  -12, 24, stat
	vsdraw  8, 28, stat
	vsdraw  28, 12, stat
	vsdraw  30, -10, stat
	vrts






; Tanker holding pulsars

;                                                                 *                                                                
;                                                                ***                                                               
;                                                               * * *                                                              
;                                                              * **  *                                                             
;                                                             *  **   *                                                            
;                                                            *   **    *                                                           
;                                                           *   * *     *                                                          
;                                                          *    * *      *                                                         
;                                                         *    *  *       *                                                        
;                                                        *     *  *        *                                                       
;                                                       *      *  *         *                                                      
;                                                      *      *   *          *                                                     
;                                                     *       *   *           *                                                    
;                                                    *        *   *            *                                                   
;                                                   *        *    *             *                                                  
;                                                  *         *    *              *                                                 
;                                                 *         *     *               *                                                
;                                                *          *     *                *                                               
;                                               *           *     *                 *                                              
;                                              *           *      *                  *                                             
;                                             *            *      *                   *                                            
;                                            *             *      *                    *                                           
;                                           *             *       *                     *                                          
;                                          *              *       *                      *                                         
;                                         *              *        *                       *                                        
;                                        *               *        *                        *                                       
;                                       *                *        *                         *                                      
;                                      *                *         *                          *                                     
;                                     *                 *         *                           *                                    
;                                    *                  *         *                            *                                   
;                                   *                  *          *                             *                                  
;                                  *                   *          *                              *                                 
;                                 *                   *           *                               *                                
;                                *                    *           *                                *                               
;                               *                     *           *                                 *                              
;                              *                     *            *                                  *                             
;                             *                      *            *                                   *                            
;                            *                       *            *                                    *                           
;                           *                       *             *                                     *                          
;                          *                        *             *                                      *                         
;                         *                        *              *                                       *                        
;                        *                         *             * **                                      *                       
;                       *                          *            *   ****                                    *                      
;                      *                          *            *     *  ***                                  *                     
;                     *                           *           *       *    **                                 *                    
;                    *                            *          *         *     ***                               *                   
;                   *                            *          *           *       ***                             *                  
;                  *                             *         *             *         **                            *                 
;                 *                             *         *               *          ***                          *                
;                *                              *        *                 *            ***                        *               
;               *                               *       *                   *              **                       *              
;              *                               *       *                     *               ***                     *             
;             *                                *      *     *           *     *                 ***                   *            
;            *                                 *     *      **         **      *                   **                  *           
;           *                                 *     *       **         **       *                    ***                *          
;          *                                  *    *        **         **        *                      ***              *         
;         *                                  *    *        * *         * *        *                        **             *        
;        *                                   *   *         *  *       *  *         *                         ***           *       
;       *                                    *  *          *  *       *  *          *                           ***         *      
;      *                                    *  *           *  *       *  *           *                             **        *     
;     *                                     * *           *   *       *   *           *                              ***      *    
;    *                                      **            *    *     *    *            *                                ***    *   
;   *                                      **             *    *     *    *             *                                  **   *  
;  *                                       *              *    *     *    *              *                                   *** * 
; *****************************************       *********************************************************************************
;  * ***                                   *             *      *   *      *             *                                       * 
;   *   **                                  *            *      *   *      *            **                                      *  
;    *    ***                                *           *      *   *      *           **                                      *   
;     *      ***                              *         *       *   *       *         * *                                     *    
;      *        **                             *                 * *                 *  *                                    *     
;       *         ***                           *                * *                *  *                                    *      
;        *           ***                         *               * *               *   *                                   *       
;         *             **                        *              * *              *    *                                  *        
;          *              ***                      *              *              *    *                                  *         
;           *                ***                    *             *             *     *                                 *          
;            *                  **                   *            *            *     *                                 *           
;             *                   ***                 *           *           *      *                                *            
;              *                     ***               *                     *       *                               *             
;               *                       **              *                   *       *                               *              
;                *                        ***            *                 *        *                              *               
;                 *                          ***          *               *         *                             *                
;                  *                            **         *             *         *                             *                 
;                   *                             ***       *           *          *                            *                  
;                    *                               ***     *         *          *                            *                   
;                     *                                 **    *       *           *                           *                    
;                      *                                  ***  *     *            *                          *                     
;                       *                                    ****   *            *                          *                      
;                        *                                      ** *             *                         *                       
;                         *                                       *              *                        *                        
;                          *                                      *             *                        *                         
;                           *                                     *             *                       *                          
;                            *                                    *            *                       *                           
;                             *                                   *            *                      *                            
;                              *                                  *            *                     *                             
;                               *                                 *           *                     *                              
;                                *                                *           *                    *                               
;                                 *                               *           *                   *                                
;                                  *                              *          *                   *                                 
;                                   *                             *          *                  *                                  
;                                    *                            *         *                  *                                   
;                                     *                           *         *                 *                                    
;                                      *                          *         *                *                                     
;                                       *                         *        *                *                                      
;                                        *                        *        *               *                                       
;                                         *                       *        *              *                                        
;                                          *                      *       *              *                                         
;                                           *                     *       *             *                                          
;                                            *                    *      *             *                                           
;                                             *                   *      *            *                                            
;                                              *                  *      *           *                                             
;                                               *                 *     *           *                                              
;                                                *                *     *          *                                               
;                                                 *               *     *         *                                                
;                                                  *              *    *         *                                                 
;                                                   *             *    *        *                                                  
;                                                    *            *   *        *                                                   
;                                                     *           *   *       *                                                    
;                                                      *          *   *      *                                                     
;                                                       *         *  *      *                                                      
;                                                        *        *  *     *                                                       
;                                                         *       *  *    *                                                        
;                                                          *      * *    *                                                         
;                                                           *     * *   *                                                          
;                                                            *    **   *                                                           
;                                                             *   **  *                                                            
;                                                              *  ** *                                                             
;                                                               * * *                                                              
;                                                                ***                                                               
;                                                                 *                                                                
vg_sub_image_tanker_pulsar
	vstat   12, 4, 1
	vsdraw  -10, -4, 0
	vsdraw  4, 16, stat
	vsdraw  6, -24, stat
	vsdraw  6, 24, stat
	vsdraw  4, -16, stat
	vldraw  54, 4, 0
	vjmp	L39b4






; Tanker holding fuzzballs

;                                                                 *                                                                
;                                                                ***                                                               
;                                                               * * *                                                              
;                                                              * **  *                                                             
;                                                             *  **   *                                                            
;                                                            *   **    *                                                           
;                                                           *   * *     *                                                          
;                                                          *    * *      *                                                         
;                                                         *    *  *       *                                                        
;                                                        *     *  *        *                                                       
;                                                       *      *  *         *                                                      
;                                                      *      *   *          *                                                     
;                                                     *       *   *           *                                                    
;                                                    *        *   *            *                                                   
;                                                   *        *    *             *                                                  
;                                                  *         *    *              *                                                 
;                                                 *         *     *               *                                                
;                                                *          *     *                *                                               
;                                               *           *     *                 *                                              
;                                              *           *      *                  *                                             
;                                             *            *      *                   *                                            
;                                            *             *      *                    *                                           
;                                           *             *       *                     *                                          
;                                          *              *       *                      *                                         
;                                         *              *        *                       *                                        
;                                        *               *        *                        *                                       
;                                       *                *        *                         *                                      
;                                      *                *         *                          *                                     
;                                     *                 *         *                           *                                    
;                                    *                  *         *                            *                                   
;                                   *                  *          *                             *                                  
;                                  *                   *          *                              *                                 
;                                 *                   *           *                               *                                
;                                *                    *           *                                *                               
;                               *                     *           *                                 *                              
;                              *                     *            *                                  *                             
;                             *                      *            *                                   *                            
;                            *                       *            *                                    *                           
;                           *                       *             *                                     *                          
;                          *                        *             *                                      *                         
;                         *                        *              *                                       *                        
;                        *                         *             ****                                      *                       
;                       *                          *            * * ****                                    *                      
;                      *                          *            *  *  *  ***                                  *                     
;                     *                           *           *   *   *    **                                 *                    
;                    *                            *          *    *    *     ***                               *                   
;                   *                            *          *     *     *       ***                             *                  
;                  *                             *         *      *      *         **                            *                 
;                 *                             *         *       *       *          ***                          *                
;                *                              *        *        *        *            ***                        *               
;               *                               *       *         *         *              **                       *              
;              *                               *       *          *          *               ***                     *             
;             *                                *      *           *           *                 ***                   *            
;            *                                 *     *            *            *                   **                  *           
;           *                                 *     *             *             *                    ***                *          
;          *                                  *    *              *              *                      ***              *         
;         *                                  *    *               *               *                        **             *        
;        *                                   *   *                *                *                         ***           *       
;       *                                    *  *                 *                 *                           ***         *      
;      *                                    *  *                  *                  *                             **        *     
;     *                                     * *                   *                   *                              ***      *    
;    *                                      **                    *                    *                                ***    *   
;   *                                      **                     *                     *                                  **   *  
;  *                                       *                      *                      *                                   *** * 
; *********************************************************************************************************************************
;  * ***                                   *                      *                      *                                       * 
;   *   **                                  *                     *                     **                                      *  
;    *    ***                                *                    *                    **                                      *   
;     *      ***                              *                   *                   * *                                     *    
;      *        **                             *                  *                  *  *                                    *     
;       *         ***                           *                 *                 *  *                                    *      
;        *           ***                         *                *                *   *                                   *       
;         *             **                        *               *               *    *                                  *        
;          *              ***                      *              *              *    *                                  *         
;           *                ***                    *             *             *     *                                 *          
;            *                  **                   *            *            *     *                                 *           
;             *                   ***                 *           *           *      *                                *            
;              *                     ***               *          *          *       *                               *             
;               *                       **              *         *         *       *                               *              
;                *                        ***            *        *        *        *                              *               
;                 *                          ***          *       *       *         *                             *                
;                  *                            **         *      *      *         *                             *                 
;                   *                             ***       *     *     *          *                            *                  
;                    *                               ***     *    *    *          *                            *                   
;                     *                                 **    *   *   *           *                           *                    
;                      *                                  ***  *  *  *            *                          *                     
;                       *                                    **** * *            *                          *                      
;                        *                                      ****             *                         *                       
;                         *                                       *              *                        *                        
;                          *                                      *             *                        *                         
;                           *                                     *             *                       *                          
;                            *                                    *            *                       *                           
;                             *                                   *            *                      *                            
;                              *                                  *            *                     *                             
;                               *                                 *           *                     *                              
;                                *                                *           *                    *                               
;                                 *                               *           *                   *                                
;                                  *                              *          *                   *                                 
;                                   *                             *          *                  *                                  
;                                    *                            *         *                  *                                   
;                                     *                           *         *                 *                                    
;                                      *                          *         *                *                                     
;                                       *                         *        *                *                                      
;                                        *                        *        *               *                                       
;                                         *                       *        *              *                                        
;                                          *                      *       *              *                                         
;                                           *                     *       *             *                                          
;                                            *                    *      *             *                                           
;                                             *                   *      *            *                                            
;                                              *                  *      *           *                                             
;                                               *                 *     *           *                                              
;                                                *                *     *          *                                               
;                                                 *               *     *         *                                                
;                                                  *              *    *         *                                                 
;                                                   *             *    *        *                                                  
;                                                    *            *   *        *                                                   
;                                                     *           *   *       *                                                    
;                                                      *          *   *      *                                                     
;                                                       *         *  *      *                                                      
;                                                        *        *  *     *                                                       
;                                                         *       *  *    *                                                        
;                                                          *      * *    *                                                         
;                                                           *     * *   *                                                          
;                                                            *    **   *                                                           
;                                                             *   **  *                                                            
;                                                              *  ** *                                                             
;                                                               * * *                                                              
;                                                                ***                                                               
;                                                                 *                                                                
vg_sub_image_tanker_fuzzball
	vstat   12, 7, 1
	vsdraw  -24, 0, stat
	vsdraw  24, 24, 0
	vstat   12, 3, 1
	vsdraw  0, -24, stat
	vstat   12, 5, 1
	vsdraw  0, -24, stat
	vsdraw  0, 24, 0
	vstat   12, 1, 1
	vsdraw  24, 0, stat
	vldraw  40, 0, 0
	vjmp	L39b4






; Tanker holding flippers

;                                                                 *                                                                
;                                                                ***                                                               
;                                                               * * *                                                              
;                                                              * **  *                                                             
;                                                             *  **   *                                                            
;                                                            *   **    *                                                           
;                                                           *   * *     *                                                          
;                                                          *    * *      *                                                         
;                                                         *    *  *       *                                                        
;                                                        *     *  *        *                                                       
;                                                       *      *  *         *                                                      
;                                                      *      *   *          *                                                     
;                                                     *       *   *           *                                                    
;                                                    *        *   *            *                                                   
;                                                   *        *    *             *                                                  
;                                                  *         *    *              *                                                 
;                                                 *         *     *               *                                                
;                                                *          *     *                *                                               
;                                               *           *     *                 *                                              
;                                              *           *      *                  *                                             
;                                             *            *      *                   *                                            
;                                            *             *      *                    *                                           
;                                           *             *       *                     *                                          
;                                          *              *       *                      *                                         
;                                         *              *        *                       *                                        
;                                        *               *        *                        *                                       
;                                       *                *        *                         *                                      
;                                      *                *         *                          *                                     
;                                     *                 *         *                           *                                    
;                                    *                  *         *                            *                                   
;                                   *                  *          *                             *                                  
;                                  *                   *          *                              *                                 
;                                 *                   *           *                               *                                
;                                *                    *           *                                *                               
;                               *                     *           *                                 *                              
;                              *                     *            *                                  *                             
;                             *                      *            *                                   *                            
;                            *                       *            *                                    *                           
;                           *                       *             *                                     *                          
;                          *                        *             *                                      *                         
;                         *                        *              *                                       *                        
;                        *                         *             * **                                      *                       
;                       *                          *            *   ****                                    *                      
;                      *                          *            *     *  ***                                  *                     
;                     *                           *           *       *    **                                 *                    
;                    *                            *          *         *     ***                               *                   
;                   *                            *          *           *       ***                             *                  
;                  *                             *         *             *         **                            *                 
;                 *                             *         *               *          ***                          *                
;                *                              *        *                 *            ***                        *               
;               *                               *       *                   *              **                       *              
;              *                               *       *                     *               ***                     *             
;             *                                *      *                       *                 ***                   *            
;            *                                 *     *                         *                   **                  *           
;           *                                 *     *                           *                    ***                *          
;          *                                  *    *                             *                      ***              *         
;         *                                  *    *                               *                        **             *        
;        *                                   *   *                                 *                         ***           *       
;       *                                    *  *                                   *                           ***         *      
;      *                                    *  *                                     *                             **        *     
;     *                                     * *                                       *                              ***      *    
;    *                                      **                                         *                                ***    *   
;   *                                      **                                           *                                  **   *  
;  *                                       *                                             *                                   *** * 
; *****************************************       *********************************************************************************
;  * ***                                   *                                             *                                       * 
;   *   **                                  *                                           **                                      *  
;    *    ***                                *                                         **                                      *   
;     *      ***                              *                                       * *                                     *    
;      *        **                             *                                     *  *                                    *     
;       *         ***                           *                                   *  *                                    *      
;        *           ***                         *                                 *   *                                   *       
;         *             **                        *                               *    *                                  *        
;          *              ***                      *                             *    *                                  *         
;           *                ***                    *                           *     *                                 *          
;            *                  **                   *                         *     *                                 *           
;             *                   ***                 *                       *      *                                *            
;              *                     ***               *                     *       *                               *             
;               *                       **              *                   *       *                               *              
;                *                        ***            *                 *        *                              *               
;                 *                          ***          *               *         *                             *                
;                  *                            **         *             *         *                             *                 
;                   *                             ***       *           *          *                            *                  
;                    *                               ***     *         *          *                            *                   
;                     *                                 **    *       *           *                           *                    
;                      *                                  ***  *     *            *                          *                     
;                       *                                    ****   *            *                          *                      
;                        *                                      ** *             *                         *                       
;                         *                                       *              *                        *                        
;                          *                                      *             *                        *                         
;                           *                                     *             *                       *                          
;                            *                                    *            *                       *                           
;                             *                                   *            *                      *                            
;                              *                                  *            *                     *                             
;                               *                                 *           *                     *                              
;                                *                                *           *                    *                               
;                                 *                               *           *                   *                                
;                                  *                              *          *                   *                                 
;                                   *                             *          *                  *                                  
;                                    *                            *         *                  *                                   
;                                     *                           *         *                 *                                    
;                                      *                          *         *                *                                     
;                                       *                         *        *                *                                      
;                                        *                        *        *               *                                       
;                                         *                       *        *              *                                        
;                                          *                      *       *              *                                         
;                                           *                     *       *             *                                          
;                                            *                    *      *             *                                           
;                                             *                   *      *            *                                            
;                                              *                  *      *           *                                             
;                                               *                 *     *           *                                              
;                                                *                *     *          *                                               
;                                                 *               *     *         *                                                
;                                                  *              *    *         *                                                 
;                                                   *             *    *        *                                                  
;                                                    *            *   *        *                                                   
;                                                     *           *   *       *                                                    
;                                                      *          *   *      *                                                     
;                                                       *         *  *      *                                                      
;                                                        *        *  *     *                                                       
;                                                         *       *  *    *                                                        
;                                                          *      * *    *                                                         
;                                                           *     * *   *                                                          
;                                                            *    **   *                                                           
;                                                             *   **  *                                                            
;                                                              *  ** *                                                             
;                                                               * * *                                                              
;                                                                ***                                                               
;                                                                 *                                                                
vg_sub_image_tanker_flipper
	vldraw  64, 0, 0
	.fall	L39b4





; Common code for all flavors of tanker
L39b4
	vstat   12, 2, 1
	vldraw  -64, 64, stat
	vldraw  0, -40, stat
	vldraw  64, -24, stat
	vldraw  -40, 0, stat
	vsdraw  -24, 24, stat
	vsdraw  -24, -24, stat
	vldraw  24, 64, stat
	vldraw  -64, -64, stat
	vldraw  40, 0, stat
	vsdraw  24, -24, stat
	vldraw  -64, 24, stat
	vldraw  64, -64, stat
	vldraw  0, 40, stat
	vsdraw  24, 24, stat
	vldraw  -24, -64, stat
	vldraw  64, 64, stat
	vldraw  -40, 0, stat
	vrts






; Four dots, orthogonal

;         *        
;                  
;                  
;                  
;                  
;                  
;                  
;                  
; *               *
;                  
;                  
;                  
;                  
;                  
;                  
;                  
;         *        
vg_sub_image_4_dots_orthogonal
	vstat   12, 1, 1
	vldraw  32, 0, 0
	vldraw  0, 0, 14
	vldraw  -64, 0, 0
	vldraw  0, 0, 14
	vldraw  32, 32, 0
	vldraw  0, 0, 14
	vldraw  0, -64, 0
	vldraw  0, 0, 14
	vscale  1, 0
	vrts






; Four dots, diagonal

; *               *
;                  
;                  
;                  
;                  
;                  
;                  
;                  
;                  
;                  
;                  
;                  
;                  
;                  
;                  
;                  
; *               *
vg_sub_image_4_dots_diagonal
	vstat   12, 1, 1
	vldraw  32, 32, 0
	vldraw  0, 0, 14
	vldraw  0, -64, 0
	vldraw  0, 0, 14
	vldraw  -64, 64, 0
	vldraw  0, 0, 14
	vldraw  0, -64, 0
	vldraw  0, 0, 14
	vscale  1, 0
	vrts






; Enemy shot, picture 1

; *                           *      
;  *                           *     
;   *                           *    
;    *                           *   
;     *                           *  
;      *                           * 
;       *                           *
;                                    
;                                    
;                                    
;                                    
;            *           *           
;                                    
;                                    
;                                    
;                                    
;                                    
;                                    
;                                    
;                                    
;                                    
;                                    
;                                    
;            *           *           
;                                    
;                                    
;                                    
;                                    
; *                           *      
;  *                           *     
;   *                           *    
;    *                           *   
;     *                           *  
;      *                           * 
;       *                           *
vg_sub_image_enemy_shot_1
	vstat   12, 0, 1
	vldraw  -11, 11, 0
	vsdraw  -6, 6, 12
	vsdraw  0, -28, 0
	vsdraw  6, -6, 12
	vsdraw  28, 0, 0
	vsdraw  -6, 6, 12
	vsdraw  0, 28, 0
	vsdraw  6, -6, 12
	vldraw  -11, -5, 0
	vstat   12, 3, 1
	vldraw  0, 0, 12
	vsdraw  -12, 0, 0
	vldraw  0, 0, 12
	vsdraw  0, -12, 0
	vldraw  0, 0, 12
	vsdraw  12, 0, 0
	vldraw  0, 0, 12
	vrts






; Enemy shot, picture 2

;                           *          
;                           *          
;                           *          
;                           *          
; *                         *          
; *                         *          
; *                         *          
; *                         *          
; *                         *          
; *                                    
; *                                    
; *                                    
; *                                    
; *                                    
; *                                    
; *              *                     
; *                                    
; *                                    
; *                                    
;            *             *           
;                                      
;                                      
;                                      
;                                      
;                                      
;                                      
;                                     *
;                                     *
;                                     *
;                      *              *
;                                     *
;                                     *
;                                     *
;                                     *
;                                     *
;                                      
;           *                          
;           *                          
;           *                          
;           *                          
;           *                          
;           *                          
;           *                          
;           *                          
;           *                          
vg_sub_image_enemy_shot_2
	vstat   12, 0, 1
	vsdraw  -18, 18, 0
	vsdraw  0, -14, 12
	vsdraw  10, -18, 0
	vsdraw  0, -8, 12
	vsdraw  26, 10, 0
	vsdraw  0, 8, 12
	vsdraw  -10, 18, 0
	vsdraw  0, 8, 12
	vldraw  -11, -15, 0
	vstat   12, 3, 1
	vldraw  0, 0, 12
	vsdraw  -4, -4, 0
	vldraw  0, 0, 12
	vsdraw  10, -10, 0
	vldraw  0, 0, 12
	vsdraw  4, 10, 0
	vldraw  0, 0, 12
	vrts






; Enemy shot, picture 3

;                     *******                    
;                                                
;                                                
;                                                
;                                                
;                                                
;                                                
;                                                
;                                                
;                                                
;                                                
;                                                
;                                                
;                                                
;                                                
;                        *                       
;                                                
;                                                
;                                                
;                                                
;       *                                       *
;      *                                       * 
;     *                                       *  
;    *           *               *           *   
;   *                                       *    
;  *                                       *     
; *                                       *      
;                                                
;                                                
;                                                
;                                                
;                        *                       
;                                                
;                                                
;                                                
;                                                
;                                                
;                                                
;                                                
;                                                
;                           *                    
;                          *                     
;                         *                      
;                        *                       
;                       *                        
;                      *                         
;                     *                          
vg_sub_image_enemy_shot_3
	vstat   12, 0, 1
	vldraw  -17, 3, 0
	vsdraw  -6, -6, 12
	vsdraw  20, -20, 0
	vsdraw  6, 6, 12
	vsdraw  14, 14, 0
	vsdraw  6, 6, 12
	vsdraw  -20, 20, 0
	vsdraw  -6, 0, 12
	vldraw  3, -15, 0
	vstat   12, 3, 1
	vldraw  0, 0, 12
	vsdraw  -8, -8, 0
	vldraw  0, 0, 12
	vsdraw  8, -8, 0
	vldraw  0, 0, 12
	vsdraw  8, 8, 0
	vldraw  0, 0, 12
	vrts






; Enemy shot, picture 4

;           *********                          
;                                              
;                                              
;                                              
;                                              
;                                              
;                                              
;                                              
;                                              
;                                              
;                                     *********
;                          *                   
;                                              
;                                              
;                                              
;                *             *               
;                                              
;                                              
;                                              
;                                              
;                                              
;                                              
;                                              
;                                              
;                                              
;                    *                         
; *********                                    
;                                              
;                                              
;                                              
;                                              
;                                              
;                                              
;                                              
;                                              
;                                              
;                           *********          
vg_sub_image_enemy_shot_4
	vstat   12, 0, 1
	vsdraw  -22, -8, 0
	vsdraw  8, 0, 12
	vsdraw  18, -10, 0
	vsdraw  8, 0, 12
	vsdraw  2, 26, 0
	vsdraw  8, 0, 12
	vsdraw  -26, 10, 0
	vsdraw  -8, 0, 12
	vldraw  5, -15, 0
	vstat   12, 3, 1
	vldraw  0, 0, 12
	vsdraw  4, -10, 0
	vldraw  0, 0, 12
	vsdraw  10, 10, 0
	vldraw  0, 0, 12
	vsdraw  -4, 4, 0
L3afe
	vldraw  0, 0, 12
	vrts






; Shot-hit-player explosion, size 6
vg_sub_image_hit_6
	vscale  0, 0
	vjsr	vg_sub_image_hit_common
	.fall	vg_sub_image_hit_5




; Shot-hit-player explosion, size 5
vg_sub_image_hit_5
	vscale  0, 64
	vjsr	vg_sub_image_hit_common
	.fall	vg_sub_image_hit_4




; Shot-hit-player explosion, size 4
vg_sub_image_hit_4
	vscale  1, 0
	vjsr	vg_sub_image_hit_common
	.fall	vg_sub_image_hit_3




; Shot-hit-player explosion, size 3
vg_sub_image_hit_3
	vscale  1, 64
	vjsr	vg_sub_image_hit_common
	.fall	vg_sub_image_hit_2



; Shot-hit-player explosion, size 2
vg_sub_image_hit_2
	vscale  2, 0
	vjsr	vg_sub_image_hit_common
	.fall	vg_sub_image_hit_1



; Shot-hit-player explosion, size 1
vg_sub_image_hit_1
	vscale  2, 64
	.fall	vg_sub_image_hit_common


; Common shot-hit-player code
1
;                                                                                                                                 *                                                                            
;                                                                                                                                *                                                                             
;                                                                                                                              ***                                                                             
;                                                                                                                            **  *                                                                             
;                                                                                                                          **    *                                                                             
;                                                                                                                         *      *                                                                             
;                                                                         *                                             **       *                                                                             
;                                                                         ***                                         **         *                                                                             
;                                                                         *  ***                                    **           *                                                                             
;                                                                         *     ***                                *             *                                                                             
;                                                                         *        ***                           **              *                                                                             
;                                                                         *           **                       **                *                                                                             
;                                                                         *             ***                  **                  *                                                                             
;                                                                         *                ***              *                    *                                                                             
;                                                                         *                   ***         **                    *                                                                              
;                                                                         *                      ***    **                      *                                                                              
;                                                                         *                         ****                        *                                                                              
;                                                                         *                                                     *                                                                              
;                                                                         *                                                     *                                                                              
;                                                                         *                                                     *                                                                              
;                                                                        *                                                      *                                                                              
;                                                                        *                                                      *                                                                              
;                                                                        *                                                      *                                                                              
;                                                                        *                                                      *                                                                              
;                                                                        *                                                      *                                                                              
;                                                                        *                                                      *                                                                              
;                                                                        *                                                      *                                                                              
;                                                                        *                                                     *                                                                               
;                                                                        *                                                     *                                                                               
;                                                                        *                                                     *                                                                               
;                                                                        *                                                     *                                                                               
;                                                                        *                                                     *                                                                               
;                                                                        *                                                     *                                  *                                            
;                                                                        *                                                     *                                 *                                             
;                                                                       *                                                      *                               **                                              
;                                                                       *                                                      *                             ** *                                              
;                                                                       *                                                      *                           **  *                                               
;                                                                       *                                                      *                          *    *                                               
;                                                                       *                                                      *                        **    *                                                
;                                                                       *                                                      *                      **      *                                                
;                                                                       *                                                     *                     **       *                                                 
;                                                                       *                                                     *                   **         *                                                 
;                                                                       *                                                     *                  *          *                                                  
;                                                                       *                                                     *                **           *                                                  
;                                                                       *                                                     *              **            *                                                   
;                                                                       *                                                     *            **             *                                                    
;                                                                       *                                                     *          **               *                                                    
;                                                                      *                                                      *         *                *                                                     
; *                                                                    *                                                      *       **                 *                                                     
;  *****                                                               *                                                      *     **                  *                                                      
;   *   ******                                                         *                                                      *   **                    *                                                      
;    *        ******                                                   *                                                      * **                     *                                                       
;    *              *****                                              *                                                      **                       *                                                       
;     *                  ******                                        *                                                      *                       *                                                        
;      *                       ******                                  *                                                                              *                                                        
;       *                            *****                             *                                                                               ********                                                
;       *                                 ******                       *                                                                                       ********                                        
;        *                                      ******                 *                                                                                             *                                         
;         *                                           *****            *                                                                                             *                                         
;          *                                               ******      *                                                                                            *                                          
;          *                                                     *******                                                                                            *                                          
;           *                                                                                                                                                      *                                           
;            *                                                                                                                                                     *                                           
;             *                                                                                                                                                   *                                            
;             *                                                                                                                                                   *                                            
;              *                                                                                                                                                 *                                             
;               *                                                                                                                                                *                                             
;                *                                                                                                                                              *                                              
;                *                                                                                                                                              *                                              
;                 *                                                                                                                                            *                                               
;                  *                                                                                                                                           *                                               
;                   *                                                                                                                                         *                                                
;                   *                                                                                                                                         *                                                
;                    *                                                                                                                                        ******                                           
;                     *                                                                                                                                             ******                                     
;                      *                                                                                                                                                  ******                               
;                      *                                                                                                                                                        ******                         
;                       *                                                                                                                                                             ******                   
;                        *                                                                                                                                                                  ******             
;                         *                                                                                                                                                                       ******       
;                         *                                                                                                                                                                             *******
;                          *                                                                                                                                                                                ** 
;                           *                                                                                                                                                                             **   
;                            *                                                                                                                                                                          **     
;                            *                                                                                                                                                                        **       
;                             *                                                                                                                                                                     **         
;                              *                                                                                                                                                                  **           
;                               *                                                                                                                                                               **             
;                               *                                                                                                                                                             **               
;                                *                                                                                                                                                          **                 
;                                 *                                                                                                                                                       **                   
;                                  *                                                                                                                                                    **                     
;                                  *                                                                                                                                                  **                       
;                                   *                                                                                                                                               **                         
;                                    *                                                                                                                                            **                           
;                                     *                                                                                                                                         **                             
;                                    **                                                                                                                                      ***                               
;                                   *                                                                                                                                      **                                  
;                                  *                                                                                                                                     **                                    
;                                 *                                                                                                                                    **                                      
;                               **                                                                                                                                   **                                        
;                              *                                                                                                                                   **                                          
;                             *                                                                                                                                  **                                            
;                            *                                                                                                                                 **                                              
;                          **                                                                                                                                **                                                
;                         *                                                                                                                                **                                                  
;                        *                                                                                                                               **                                                    
;                       *                                                                                                                              **                                                      
;                     **                                                                                                                             **                                                        
;                    *                                                                                                                             **                                                          
;                   *                                                                                                                            **                                                            
;                  *                                                                                                                           **                                                              
;                 ***                                                                                                                         *                                                                
;                    ***                                                                                                                      *                                                                
;                       ***                                                                                                                   *                                                                
;                          ***                                                                                                                 *                                                               
;                             *                                                                                                                *                                                               
;                             *                                                                                                                 *                                                              
;                             *                                                                                                                 *                                                              
;                            *                                                                                                                   *                                                             
;                            *                                                                                                                   *                                                             
;                           *                                                                                                                     *                                                            
;                           *                                                                                                                     *                                                            
;                          *                                        *                                                                              *                                                           
;                          *                                      ***                                                                              *                                                           
;                         *                                    ***  *                                                                              *                                                           
;                         *                                 ***     *                                                                               *                                                          
;                        *                               ***        *                                                                               *                                                          
;                        *                             **           *                                                                                *                                                         
;                       *                           ***             *                                                                                *                                                         
;                       *                        ***                *                                                                                 *                                                        
;                       *                     ***                  *                                                                                  *                                                        
;                      *                   ***                     *                                                                                   *                                                       
;                      *                 **                        *                                                                                   *                                                       
;                     *               ***                          *                                                                                    *                                                      
;                     *            ***                             *                                                                                    *                                                      
;                    *          ***                                *                                                                                    *                                                      
;                    *        **                                   *                                                                                     *                                                     
;                   *      ***                                    *                                                                                      *                                                     
;                   *   ***                                       *                                                                                       *                                                    
;                  * ***                                          *                                                                                       *                                                    
;                  **                                             *                                                                                        *                                                   
;                 *                                               *                                                                                        *                                                   
;                                                                 *                                                                                         *                                                  
;                                                                 *                                                              ****                       *                                                  
;                                                                *                                                               *   ***                     *                                                 
;                                                                *                                                               *      **                   *                                                 
;                                                                *                                                               *        ***                *                                                 
;                                                                *                                                               *           ***              *                                                
;                                                                *                                                               *              **            *                                                
;                                                                *                                                               *                ***          *                                               
;                                                               *                                                                *                   ***       *                                               
;                                                               *                                                                *                      **      *                                              
;                                                               *                                                                *                        ***   *                                              
;                                                               *                                                               *                            *** *                                             
;                                                               *                                                               *                               **                                             
;                                                               *                                                               *                                 *                                            
;                                                               *                                                               *                                                                              
;                                                              *                                                                *                                                                              
;                                                              *                                                                *                                                                              
;                                                              *     **                               *                         *                                                                              
;                                                              *   **  *                             * *                        *                                                                              
;                                                              * **    *                            *   *                       *                                                                              
;                                                              **       *                          *     *                      *                                                                              
;                                                             **        *                         *       *                    *                                                                               
;                                                                       *                        *         *                   *                                                                               
;                                                                        *                      *           *                  *                                                                               
;                                                                        *                     *             *                 *                                                                               
;                                                                        *                    *               *                *                                                                               
;                                                                         *                  *                 *               *                                                                               
;                                                                         *                 *                   *              *                                                                               
;                                                                         *                *                     *             *                                                                               
;                                                                          *              *                       *            *                                                                               
;                                                                          *             *                         *           *                                                                               
;                                                                          *            *                           *         *                                                                                
;                                                                           *          *                             *        *                                                                                
;                                                                           *         *                               *       *                                                                                
;                                                                           *        *                                 *      *                                                                                
;                                                                            *      *                                   *     *                                                                                
;                                                                            *     *                                     *    *                                                                                
;                                                                            *    *                                       *   *                                                                                
;                                                                             *  *                                         *  *                                                                                
;                                                                             * *                                           * *                                                                                
;                                                                             **                                             **                                                                                
;                                                                             **                                              *                                                                                
vg_sub_image_hit_common
	vstat   12, 9, 1
	vldraw  48, -16, 0
	vldraw  64, 32, 14
	vldraw  -48, 8, 14
	vstat   12, 11, 1
	vsdraw  8, 16, 14
	vsdraw  -16, 2, 14
	vstat   12, 10, 1
	vsdraw  12, 22, 14
	vldraw  -36, -20, 14
	vstat   12, 9, 1
	vldraw  4, 52, 14
	vsdraw  -28, -16, 14
	vstat   12, 11, 1
	vsdraw  -28, 10, 14
	vldraw  -4, -54, 14
	vstat   12, 10, 1
	vldraw  -68, 12, 14
	vldraw  36, -48, 14
	vstat   12, 9, 1
	vsdraw  -20, -16, 14
	vsdraw  12, -4, 14
	vstat   12, 11, 1
	vsdraw  -12, -26, 14
	vldraw  50, 18, 14
	vstat   12, 9, 1
	vldraw  -6, -40, 14
	vsdraw  8, 4, 14
	vstat   12, 10, 1
	vsdraw  8, -24, 14
	vsdraw  24, 24, 14
	vstat   12, 11, 1
	vsdraw  24, -24, 14
	vldraw  4, 40, 14
	vstat   12, 10, 1
	vldraw  32, -12, 14
	vldraw  -20, 44, 14
	vldraw  -48, 16, 0
	vrts






; Starfields of various sizes
; fuzzballed player 1
vg_sub_image_fuzzballed_player_1
	vstat   12, 0, 1
	vscale  5, 0
	vjmp	L3622



; fuzzballed player 2
vg_sub_image_fuzzballed_player_2
	vstat   12, 0, 1
	vscale  4, 96
	vjmp	L3622



; fuzzballed player 3
vg_sub_image_fuzzballed_player_3
	vstat   12, 1, 1
	vscale  4, 64
	vjmp	L3622



; fuzzballed player 4
vg_sub_image_fuzzballed_player_4
	vstat   12, 1, 1
	vscale  4, 32
	vjmp	L3622



; fuzzballed player 5
vg_sub_image_fuzzballed_player_5
	vstat   12, 3, 1
	vscale  4, 0
	vjmp	L3622




; fuzzballed player 6
vg_sub_image_fuzzballed_player_6
	vstat   12, 3, 1
	vscale  3, 96
	vjmp	L3622




; fuzzballed player 7
vg_sub_image_fuzzballed_player_7
	vstat   12, 7, 1
	vscale  3, 64
	vjmp	L3622



; Draw spiked-apart or pulsared-apart player.
; vecram_2ffc is called before the motions between pieces; it contains a vscale
; which is adjusted with time to cause the pieces to move.
vg_sub_image_spiked_player
	vjsr	vecram_2ffc
	vldraw  128, -56, 0
	vscale  1, 0
	vstat   12, 1, 1
	vsdraw  20, 0, 14
	vsdraw  0, -20, 14
	vldraw  84, 48, 14
	vldraw  -48, 4, 14
	vsdraw  8, -8, 14
	vldraw  -64, -24, 14
	vjsr	vecram_2ffc
	vldraw  -64, 80, 0
	vjsr	L3afe
	vjsr	vecram_2ffc
	vldraw  8, 96, 0
	vscale  1, 0
	vstat   12, 1, 1
	vldraw  64, -32, 14
	vldraw  40, 0, 14
	vldraw  -104, 32, 14
	vjsr	vecram_2ffc
	vldraw  -8, 72, 0
	vjsr	L3afe
	vjsr	vecram_2ffc
	vldraw  -80, 0, 0
	vscale  1, 0
	vstat   12, 1, 1
	vldraw  -112, -32, 14
	vldraw  52, -32, 14
	vsdraw  -8, 16, 14
	vsdraw  28, 0, 14
	vldraw  -32, 8, 14
	vldraw  72, 40, 14
	vjsr	vecram_2ffc
	vldraw  -32, -128, 0
	vjsr	L3afe
	vjsr	vecram_2ffc
	vldraw  -128, 32, 0
	vjsr	L3afe
	vjsr	vecram_2ffc
	vldraw  16, -80, 0
	vscale  1, 0
	vstat   12, 1, 1
	vsdraw  8, -16, 14
	vsdraw  24, -20, 14
	vldraw  32, 4, 14
	vsdraw  -8, 28, 14
	vldraw  -32, 4, 14
	vsdraw  -24, 0, 14
	vjsr	vecram_2ffc
	vldraw  112, -64, 0
	vjsr	L3afe
	vjsr	vecram_2ffc
	vldraw  -8, -68, 0
	vscale  1, 0
	vstat   12, 1, 1
	vsdraw  4, -12, 14
	vldraw  -36, -4, 14
	vldraw  56, -28, 14
	vldraw  48, 24, 14
	vsdraw  4, 16, 14
	vsdraw  -20, 4, 14
	vldraw  -32, -12, 14
	vsdraw  -24, 12, 14
	vjsr	vecram_2ffc
	vldraw  152, -28, 0
	vjmp	L3afe



; fuzzball, picture 1

;                                                                               *                                  
;                                                                                *                                 
;                                                                                *                *                
;                                                                                *                *                
;                                                                                 *                *               
;                                                                                 *                *               
;                                                                                 *                 *              
;                                                                                 *                  *             
;                                                                                 *                  **            
;                                                                                 *                   *            
;                                                                                  *                   *           
;                                                                                  *                   *           
;                                                                                   *                   *          
;                                                                                  *                    *          
;                                                                                **                      *         
;                                                                               *                        *         
;                                                                              *                          *        
;                                                                            **                          *         
;                                                                           *                          **          
;                                                                         **                          *            
;                                                                       **                          **             
;                                                                        ***                       *               
;                                                                           ***                  **                
;                                                                              ***              *                  
;                                                                                 ***         **                   
;                                                                                  *          *                    
;                                                                                 *            *                   
;                                                                                 *            *                   
;                                                                                *              *                  
;                                                                               *               *                  
;                                                                               *                *                 
;                                                                              *                 *                 
;                                                                             *                   *                
;                                                                            *                   *                 
;                                                                           *                   *                  
;                                                                          *                   *                   
;                                                                         **                  *                    
;                                                                          *                 *                     
;                                                                           *               *                      
;                                                                            *             *                       
;                                                 **                         *            *                        
;                                                * *                          *          *                         
;                                              **  *          **              *         *                          
;                                             *     *        * *               *       *                           
;                                           **      *       *  *                *     *               *            
;                                          *         *     *    *               *    *           *****             
;                                        **          *    *     *                *  *       *****    *             
;                                       *            *   *       *                **   *****         *             
;                                    ***              * *        *             ********              *             
;                                  **                 **         *         ****   *                 *              
;                                 *                   *           *    ****       *                 *              
;                               **                                *****          *                  *              
;                              *                                  *              *                  *              
;                            **                                                  *                 *               
;                           *                                                   *                  *               
;                         **                                                    *                  *               
;                        **                                                    *                   *               
;                       *                                                      *                  *                
;                     **                                                       *                  *                
;                    *                                                        *                   *                
;                  **                                           ****          *                   *************    
;                 *                                              *  ***       *                              *     
;               **                                               *     ***   *                              *      
;              *                                                 *        ****                             *       
;            **                                                   *         *                             *        
;           *                                                     *                                      *         
;         **                                                      *                                     *          
;        *                                                         *                                   *           
;      **                                                          *                                  *            
;    **                                                            *                                 *             
;   *                                                              *                                *              
; **                                                                *                              *               
;                                                                   *                             *                
;                                                                   *                             *                
;                                                                   **                             *               
;                                                                   *                              *               
;                                                                   *                               *              
;                                                                  *                                *              
;                                                                  *                                 *             
;                                                                 *                                  *             
;                                                                 *                                   *            
;                                                                 *                                    *           
;                                                                *                                     *           
;                                                                *                                      *          
;                                                               *                                       *          
;                                                               *                                        *         
;                                                              *                                         **********
;                                                              *                                                   
;                                                             *************                                        
;                                                                         *                                        
;                                                                         *                                        
;                                                                         *                                        
;                                                                         *                                        
;                                                                         *                                        
;                                                                         *                                        
;                                                                         *                                        
;                                                                         *                                        
;                                                                         *                                        
;                                                                         *                                        
;                                                                         *                                        
;                                                                         *                                        
vg_sub_image_fuzzball_1
	vstat   12, 3, 1
	vsdraw  -8, 12, 14
	vsdraw  10, 12, 14
	vsdraw  -12, 4, 14
	vsdraw  12, 8, 14
	vsdraw  -4, 12, 14
	vstat   12, 1, 1
	vsdraw  18, -2, 0
	vsdraw  4, -6, 14
	vsdraw  4, -8, 14
	vsdraw  -12, -8, 14
	vsdraw  4, -8, 14
	vsdraw  -16, -16, 14
	vstat   12, 5, 1
	vsdraw  20, 4, 14
	vsdraw  -4, -16, 14
	vsdraw  12, 0, 14
	vsdraw  -12, -12, 14
	vsdraw  8, -14, 14
	vsdraw  8, 0, 14
	vstat   12, 2, 1
	vldraw  -40, -14, 0
	vsdraw  0, 12, 14
	vsdraw  -12, 0, 14
	vsdraw  6, 14, 14
	vsdraw  -4, 14, 14
	vsdraw  12, -4, 14
	vsdraw  6, 16, 14
	vstat   12, 4, 1
	vsdraw  -16, -4, 14
	vsdraw  -4, 10, 14
	vsdraw  -8, -8, 14
	vsdraw  -4, 10, 14
	vsdraw  -24, -16, 14
	vrts

; fuzzball, picture 2

;                                                                                             *            
;                                                                                            ****          
;                                                                                           *    ***       
;                                                                                          *        ***    
;                                         ************                                    *            ****
;                                         *         *                                    *                 
;                                        *          *                                   *                  
;                                        *         *                                   *                   
;                                       *          *                                  *                    
;                                       *         *                                  *                     
;                                      *          *                                 *                      
;                                      *          *                                 *                      
;                                     *          *                                  *                      
;                                                *                                  *                      
;                                               *                                   *                      
;                                               *                                   *                      
;                                              *        *                           *                      
;                                              *    *****                            *                     
;                                             ******    *                            *                     
;                                             *         *                            *                     
;                                                       *********             *      *                     
;                                                                *           * ****  *                     
;                                                                *          *      ****                    
;                                                                *         *                               
;                                                                *         *                               
;                                                                *        *                                
;                                                                *       *                                 
;                                                                *      *                                  
;                                                                *      *                                  
;                                                                 *    *                                   
;                                                                 *   *                                    
;                                                                 *  *                                     
;                                                                 *  *                                     
;                                                                 * *                                      
;                                                                 **                                       
;                                                                 *                                        
;                                                 *****************          ********                      
;                                                *               * * ********       *                      
;                                               *               *   *               *                      
;                                              *               *                     *                     
;                                ***          *               *                      *                     
;                              **   **       *               *                       *                     
;                            **       **    *               *                         *                    
;                          **           ** *               *                          *                    
;                        **               *               *                            *                   
;                      **                                *                             *                   
;                    **                                 *                              *******             
;                  **                                  *                                      *****        
;                **                                   *                                           *        
;              **                                     *                                          *         
;            **                                       *                                          *         
;          **                                        *                                          *          
;        **                                          *                                          *          
;      **                                            *                                         *           
;    **                                             *                                          *           
;  **                                               *                                         *            
; *                                                 *                                         *******      
;                                                  *                                                 ******
;                                                  *                                                       
;                                                  *                                                       
;                                                 **********                                               
;                                                         *                                                
;                                                        *                                                 
;                                                        *                                                 
;                                                       *                                                  
;                                                      *                                                   
;                                                      *                                                   
;                                                     *                                                    
;                                                    *                                                     
;                                                    *                                                     
;                                                   *                                                      
;                                                  *                                                       
;                                                 *                                                        
;                                                 *                                                        
;                                                 *                                                        
;                                                 *                                                        
;                                                 *                                                        
;                                                 *                                                        
;                                                 *                                                        
;                                                 *                                                        
;                                                 *                                                        
vg_sub_image_fuzzball_2
	vstat   12, 3, 1
	vsdraw  -2, 16, 14
	vsdraw  -8, 0, 14
	vsdraw  0, 4, 14
	vsdraw  -10, -2, 14
	vsdraw  6, 14, 14
	vsdraw  -10, 0, 14
	vsdraw  -4, -8, 14
	vstat   12, 1, 1
	vldraw  68, 8, 0
	vsdraw  -12, 4, 14
	vsdraw  -10, -10, 14
	vsdraw  2, -12, 14
	vsdraw  -8, 2, 14
	vsdraw  -12, -16, 14
	vstat   12, 5, 1
	vsdraw  2, -2, 14
	vsdraw  16, 2, 14
	vsdraw  4, -10, 14
	vsdraw  10, -2, 14
	vsdraw  -4, -8, 14
	vsdraw  12, -2, 14
	vstat   12, 2, 1
	vldraw  -56, -22, 0
	vsdraw  0, 8, 14
	vsdraw  8, 12, 14
	vsdraw  -8, 0, 14
	vsdraw  4, 12, 14
	vsdraw  12, 12, 14
	vstat   12, 4, 1
	vsdraw  -16, 0, 14
	vsdraw  -8, -8, 14
	vsdraw  -8, 4, 14
	vsdraw  -16, -8, 14
	vrts

; fuzzball, picture 3
1
;                                                                     *                                
;                                                                    *                                 
;                                                                    *                                 
;                                                                   *                                  
;                                                                   *                                  
;                                                                  *                                   
;                                                                  *                                   
;                                                                 *                                    
;                                                                 *                                    
;                                                                *                                     
;                                                                *                                     
;                                                               *                                      
;                                                               *                                      
;                                                              *                                       
;                                                              *                                       
;                                                             *                                        
;                                                             *                                        
;                                                             *                                        
;                                                              *                                       
;                                                              *                                       
;                                                               *                                      
;                                                               *                                      
;                                                                *                                     
;                                                                *                                     
;                                                                 *                                    
;                                                                *                                     
;                                                              **                                      
;                                                            **                                        
;                                                           *                             *************
;                                                         **                             *             
;                                                       **                               *             
;                                                       *                                *             
;                                                        *                               *             
;                                                        *                              *              
;                                                         *                             *              
;                                                         *                             *              
;                                                          *                            *              
;                                                          *                           *               
;                                                           *                          *               
;                                                          **                          *               
;                                                        **                            *               
;                                                       *                             *                
;                                                     **                              *                
;                                                     *                               *                
;                                                     *               *               *                
;                                                     *              **              *                 
;                                                     *             *  *            *                  
;                                                     *           **   *          **                   
;                                                     *          *      *        *                     
;                                                     *         *       *      **                      
;                                                     *       **         *    *                        
;                                                     *      *           *  **                         
;                                 *           *       *     *             **                           
;                             **** *        ** **     *   **              *                            
;                         ****      *     **     **   *  *                                             
;                     ****           *  **         ** * *                                              
;                 ****                **             ***                                               
;                 *                                   **                                               
;                *                                   *  *                                              
;               *                                    *   *                                             
;               *                                   *     *                                            
;              *                                    *      *                                           
;             *                                    *        *                                          
;             *                                    *         *                                         
;            *                                    *           *********                                
;           *                                     *                   *                                
;           *                                    *                    *                                
;          *                                     *                    *                                
;         *                                     *                      *                               
;         *                                     *                      *                               
;        *                                     *                       *                               
;       *                                      *                       *                               
;       *                                     *                         ********                       
;      *                                      *                                 *******                
;     *                                      *                                        *                
;     *                                     **                                        *                
;    *                                   ****                                         *                
;   *                                ****                                             *                
;   *                             ***                                                 *                
;  *                           ***                                                    *                
; *                           *                                                       *                
;                              *                                                      *                
;                              *                                                       *               
;                               *                                                      *               
;                               *                                                      *               
;                                *                                                     *               
;                                *                                                     *               
;                                 *                                                    *               
;                                 *                                                    ****************
;                                  *                                                                   
;                                  *                                                                   
;                                   *                                                                  
;                                   *                                                                  
;                                    *                                                                 
;                                    *                                                                 
;                                     *                                                                
;                                     *                                                                
;                                    *                                                                 
;                                   *                                                                  
;                                  *                                                                   
;                                 *                                                                    
;                                *                                                                     
;                               *                                                                      
;                              *                                                                       
;                             *                                                                        
vg_sub_image_fuzzball_3
	vstat   12, 3, 1
	vsdraw  0, 14, 14
	vsdraw  6, 4, 14
	vsdraw  -4, 8, 14
	vsdraw  10, 6, 14
	vsdraw  -4, 8, 14
	vsdraw  8, 16, 14
	vstat   12, 1, 1
	vldraw  32, -28, 0
	vsdraw  -12, 0, 14
	vsdraw  -4, -16, 14
	vsdraw  -12, -8, 14
	vsdraw  -4, 8, 14
	vsdraw  -16, -12, 14
	vstat   12, 5, 1
	vsdraw  8, -8, 14
	vsdraw  8, 0, 14
	vsdraw  2, -8, 14
	vsdraw  14, -2, 14
	vsdraw  2, -14, 14
	vsdraw  14, 0, 14
	vstat   12, 2, 1
	vldraw  -72, -16, 0
	vsdraw  8, 8, 14
	vsdraw  -8, 16, 14
	vsdraw  14, 4, 14
	vsdraw  10, 20, 14
	vstat   12, 4, 1
	vsdraw  -8, 4, 14
	vsdraw  -8, -4, 14
	vsdraw  -4, 4, 14
	vsdraw  -16, -4, 14
	vsdraw  -8, -12, 14
	vrts

; fuzzball, picture 4

;                               *                                                                
;                               *                                                                
;                               *                                                                
;                               *                                                                
;                               *                                                       *        
;                               *                                                     **         
;                               *                                                  ***           
;                               *                                               ***              
;                               *************                               ****                 
;                                            *                              **                   
;                                             *                               *                  
;                                              *                               *                 
;                                              *                                *                
;                                               *                                *               
;                                                *                                *              
;                                                 *                              *               
;                                                 *                            **                
;                                                 *                           *                  
;                                                 *                         **                   
;                                                 *                       **                     
;                                                 *                     **                       
;                                                 *                     *                        
;                                                *                       *                       
;                                                *                       *                       
;                                                *                        *                      
;                                                *                        *                      
;                                                *                         *                     
;                                                *                         *                     
;                                               *                           *                    
;                                                *                        **                     
;                                                 *                     **                       
;                                                  *                 ***                         
;                                                   *              **                            
;                                                    *          ***                              
;                                                     *       **                                 
;                                                      *   ***                                   
;                                                     *****                                      
;                                                   **  *  ***                                   
;                           *********             **    *     **                                 
;                           *        *          **      *       ***                              
;                           *        *       ***         *         ***                           
;                           *        *     **            *            **                         
;                           *         *  **              *              *                        
;                           *         ***                *              *           *            
;                           *         *                   *             *          **********    
;                          *                              *             *        **         *    
;                          *                              *              *     **           *    
;                          *                              *              *    *             *    
;                          *                               *             *  **              *    
;                          *                               *             * *                 *   
;                      *****                               *              *                  *   
;                   ***                                    *                                 *   
;                 **                                       **                                *   
;              ***                                        *                                  *   
;           ***                                         **                                    *  
;        ***                                           *                                      *  
;     ***                                            **                                       *  
;  ***                                              *                                         *  
; *                                               **                                          *  
;                                                *                                             * 
;                                               *                                              * 
;                                                *                                             * 
;                                                 *                                            * 
;                                                  *                                           * 
;                                                   *                                           *
;                                                    *                                           
;                                                     *                                          
;                                                      *                                         
;                                                       *                                        
;                                                      *                                         
;                                                     *                                          
;                                                    *                                           
;                                                   *                                            
;                                                  *                                             
;                                                 *                                              
;                                                *                                               
;                                               *                                                
;                                                *                                               
;                                                 *                                              
;                                                  *                                             
;                                                   *                                            
;                                                    *                                           
;                                                     *                                          
;                                                      *                                         
;                                                       *                                        
vg_sub_image_fuzzball_4
	vstat   12, 3, 1
	vsdraw  -8, 8, 14
	vsdraw  2, 12, 14
	vsdraw  -6, 8, 14
	vsdraw  -12, 0, 14
	vsdraw  0, 8, 14
	vstat   12, 1, 1
	vldraw  56, -4, 0
	vsdraw  -12, -4, 14
	vsdraw  6, -6, 14
	vsdraw  -10, -6, 14
	vsdraw  4, -8, 14
	vsdraw  -20, -8, 14
	vstat   12, 5, 1
	vsdraw  16, -6, 14
	vsdraw  2, -8, 14
	vsdraw  10, 6, 14
	vsdraw  8, 0, 14
	vsdraw  4, -20, 14
	vstat   12, 2, 1
	vldraw  -40, -20, 0
	vsdraw  -8, 8, 14
	vsdraw  8, 8, 14
	vsdraw  -8, 8, 14
	vsdraw  12, 8, 14
	vsdraw  -4, 16, 14
	vstat   12, 4, 1
	vsdraw  -18, -8, 14
	vsdraw  -2, 6, 14
	vsdraw  -8, 0, 14
	vsdraw  -2, -12, 14
	vsdraw  -12, -4, 14
	vrts


vg_sub_image_score_750 ; "750"
	vstat   12, 0, 1
	vscale  1, 32
	vldraw  -36, 0, 0
	vjsr	vg_sub_char_7 ; 7
	vjmp	vg_sub_string_50 ; "50"

vg_sub_image_score_500 ; "500"
	vstat   12, 0, 1
	vscale  1, 32
	vldraw  -36, 0, 0
	vjsr	vg_sub_char_5 ; 5
	vjsr	vg_sub_char_O ; 0 ; uses "oh" instead of 0
	vjmp	L3db0 ; 0

vg_sub_image_score_250 ; "250"
	vstat   12, 0, 1
	vscale  1, 32
	vldraw  -36, 0, 0
	vjsr	vg_sub_char_2 ; 2
	.fall	vg_sub_string_50

vg_sub_string_50
	vjsr	vg_sub_char_5 ; 5
	.fall	L3db0

L3db0
	vjmp	vg_sub_char_O ; 0

; Not sure what these are.
L3db2
	vjsr	L3afe
L3db4
	vjsr	vecram_2004
	vjsr	vecram_240a
	vjsr	vecram_2a54
	vjsr	vecram_2dbc
	vjsr	vecram_2690
	vjsr	vecram_28fe
	vjsr	vecram_2cd6
	vjsr	vecram_2200
	vjsr	vecram_2e22
	vjmp	vecram_2000 (halt)
L3dc8
	vjsr	vecram_2004
	vjmp	vecram_2000 (halt)
L3dcc
	vhalt
; Draw selftest display, fixed parts - the display that's shown when
; the service switch is turned on live.
vg_sub_image_selftest_labels
	vjsr	vg_sub_image_box_around_screen
	vcentre
	vscale  1, 0
	vstat   12, 0, 1
	vldraw  -120, 300, 0
	vjsr	vg_sub_string_seconds_space ; "SECONDS "
	vjsr	vg_sub_char_O ; O
	vjsr	vg_sub_char_N ; N
	vldraw  -240, -30, 0
	vjsr	vg_sub_string_seconds_space ; "SECONDS "
	vjsr	vg_sub_char_P ; P
	vjsr	vg_sub_char_L ; L
	vjsr	vg_sub_char_A ; A
	vjsr	vg_sub_char_Y ; Y
	vjsr	vg_sub_char_E ; E
	vjsr	vg_sub_char_D ; D
	vldraw  -336, -30, 0
	vjsr	vg_sub_char_1 ; 1
	vjsr	vg_sub_string_space_player_games ; " PLAYER GAMES"
	vldraw  -336, -30, 0
	vjsr	vg_sub_char_2 ; 2
	vjsr	vg_sub_string_space_player_games ; " PLAYER GAMES"
	vldraw  -336, -30, 0
	vjsr	vg_sub_string_seconds_space ; "SECONDS "
	vjsr	vg_sub_char_A ; A
	vjsr	vg_sub_char_V ; V
	vjsr	vg_sub_char_E ; E
	vjsr	vg_sub_char_R ; R
	vjsr	vg_sub_char_A ; A
	vjsr	vg_sub_char_G ; G
	vjsr	vg_sub_char_E ; E
	vldraw  -360, -72, 0
	vstat   12, 4, 1
	vjsr	vg_sub_char_X ; X
	vjsr	vg_sub_char_1 ; 1
	vldraw  -48, -32, 0
	vjsr	vg_sub_char_B ; B
	vjsr	vg_sub_char_O ; O
	vjsr	vg_sub_char_N ; N
	vjsr	vg_sub_char_U ; U
	vjsr	vg_sub_char_S ; S
	vjsr	vg_sub_char_space ; space
	vjsr	vg_sub_char_A ; A
	vjsr	vg_sub_char_D ; D
	vjsr	vg_sub_char_D ; D
	vjsr	vg_sub_char_E ; E
	vjsr	vg_sub_char_R ; R
	vstat   12, 0, 1
	vldraw  -496, 224, 0
	vrts

vg_sub_string_seconds_space
	vjsr	vg_sub_char_S ; S
	vjsr	vg_sub_char_E ; E
	vjsr	vg_sub_char_C ; C
	vjsr	vg_sub_char_O ; O
	vjsr	vg_sub_char_N ; N
	vjsr	vg_sub_char_D ; D
	vjsr	vg_sub_char_S ; S
	vjsr	vg_sub_char_space ; space
	vrts
vg_sub_string_space_player_games
	vjsr	vg_sub_char_space ; space
	vjsr	vg_sub_char_P ; P
	vjsr	vg_sub_char_L ; L
	vjsr	vg_sub_char_A ; A
	vjsr	vg_sub_char_Y ; Y
	vjsr	vg_sub_char_E ; E
	vjsr	vg_sub_char_R ; R
	vjsr	vg_sub_char_space ; space
	vjsr	vg_sub_char_G ; G
	vjsr	vg_sub_char_A ; A
	vjsr	vg_sub_char_M ; M
	vjsr	vg_sub_char_E ; E
	vjsr	vg_sub_char_S ; S
	vrts
; Routines to display the "press fire and <foo> for <bar>" strings.
vg_sub_string_press_fire_and_space
	vcentre
	vstat   12, 3, 1
	vldraw  -412, 380, 0
	vjsr	vg_sub_char_P ; P
	vjsr	vg_sub_char_R ; R
	vjsr	vg_sub_char_E ; E
	vjsr	vg_sub_char_S ; S
	vjsr	vg_sub_char_S ; S
	vjsr	vg_sub_char_space ; space
	vjsr	vg_sub_char_F ; F
	vjsr	vg_sub_char_I ; I
	vjsr	vg_sub_char_R ; R
	vjsr	vg_sub_char_E ; E
	vjsr	vg_sub_char_space ; space
	vjsr	vg_sub_char_A ; A
	vjsr	vg_sub_char_N ; N
	vjsr	vg_sub_char_D ; D
	vjsr	vg_sub_char_space ; space
	vrts

vg_sub_string_space_to_zero_space
	vjsr	vg_sub_char_space ; space
	vjsr	vg_sub_char_T ; T
	vjsr	vg_sub_char_O ; O
	vjsr	vg_sub_char_space ; space
	vjsr	vg_sub_char_Z ; Z
	vjsr	vg_sub_char_E ; E
	vjsr	vg_sub_char_R ; R
	vjsr	vg_sub_char_O ; O
	vjsr	vg_sub_char_space ; space
	vrts

vg_sub_string_press_fire_and_zap_for_self_test
	vjsr	vg_sub_string_press_fire_and_space ; "PRESS FIRE AND "
	vjsr	vg_sub_char_Z ; Z
	vjsr	vg_sub_char_A ; A
	vjsr	vg_sub_char_P ; P
	vjsr	vg_sub_char_space ; space
	vjsr	vg_sub_char_F ; F
	vjsr	vg_sub_char_O ; O
	vjsr	vg_sub_char_R ; R
	vjsr	vg_sub_char_space ; space
	vjsr	vg_sub_char_S ; S
	vjsr	vg_sub_char_E ; E
	vjsr	vg_sub_char_L ; L
	vjsr	vg_sub_char_F ; F
	vjsr	vg_sub_char_space ; space
	vjsr	vg_sub_char_T ; T
	vjsr	vg_sub_char_E ; E
	vjsr	vg_sub_char_S ; S
	vjsr	vg_sub_char_T ; T
	vstat   12, 4, 1
	vrts

vg_sub_string_press_fire_and_start_1_to_zero_times
	vjsr	vg_sub_string_press_fire_and_space ; "PRESS FIRE AND "
	vjsr	vg_sub_char_S ; S
	vjsr	vg_sub_char_T ; T
	vjsr	vg_sub_char_A ; A
	vjsr	vg_sub_char_R ; R
	vjsr	vg_sub_char_T ; T
	vjsr	vg_sub_char_space ; space
	vjsr	vg_sub_char_1 ; 1
	vjsr	vg_sub_string_space_to_zero_space ; " TO ZERO "
	vjsr	vg_sub_char_T ; T
	vjsr	vg_sub_char_I ; I
	vjsr	vg_sub_char_M ; M
	vjsr	vg_sub_char_E ; E
	vjsr	vg_sub_char_S ; S
	vstat   12, 4, 1
	vrts

vg_sub_string_press_fire_and_start_2_to_zero_scores
	vjsr	vg_sub_string_press_fire_and_space ; "PRESS FIRE AND "
	vjsr	vg_sub_char_S ; S
	vjsr	vg_sub_char_T ; T
	vjsr	vg_sub_char_A ; A
	vjsr	vg_sub_char_R ; R
	vjsr	vg_sub_char_T ; T
	vjsr	vg_sub_char_space ; space
	vjsr	vg_sub_char_2 ; 2
	vjsr	vg_sub_string_space_to_zero_space ; " TO ZERO "
	vjsr	vg_sub_char_S ; S
	vjsr	vg_sub_char_C ; C
	vjsr	vg_sub_char_O ; O
	vjsr	vg_sub_char_R ; R
	vjsr	vg_sub_char_E ; E
	vjsr	vg_sub_char_S ; S
	vstat   12, 4, 1
	vrts
test_magic_tbl
	.word   vg_sub_string_press_fire_and_zap_for_self_test ; "PRESS FIRE AND ZAP FOR SELF TEST"
        .word   vg_sub_string_press_fire_and_zap_for_self_test ; "PRESS FIRE AND ZAP FOR SELF TEST"
        .word   vg_sub_string_press_fire_and_start_1_to_zero_times ; "PRESS FIRE AND START 1 TO ZERO TIMES"
        .word   vg_sub_string_press_fire_and_start_2_to_zero_scores ; "PRESS FIRE AND START 2 TO ZERO SCORES
diff_str_tbl
	.word   vg_sub_string_medium ; MEDIUM
        .word   vg_sub_string_easy ; EASY
        .word   vg_sub_string_hard ; HARD
        .word   vg_sub_string_medium ; MEDIUM

vg_sub_string_easy
	vldraw  0, -32, 0
	vjsr	vg_sub_char_E ; E
	vjsr	vg_sub_char_A ; A
	vjsr	vg_sub_char_S ; S
	vjmp	vg_sub_char_Y ; Y

vg_sub_string_medium
	vldraw  0, -32, 0
	vjsr	vg_sub_char_M ; M
	vjsr	vg_sub_char_E ; E
	vjsr	vg_sub_char_D ; D
	vjsr	vg_sub_char_I ; I
	vjsr	vg_sub_char_U ; U
	vjmp	vg_sub_char_M ; M

vg_sub_string_hard
	vldraw  0, -32, 0
	vjsr	vg_sub_char_H ; H
	vjsr	vg_sub_char_A ; A
	vjsr	vg_sub_char_R ; R
	vjmp	vg_sub_char_D ; D
	vcentre
; Draw "TEMPEST" logo
	vldraw  -432, 256, 0
	vjsr	vg_sub_logo_T
	vldraw  96, 0, 0
	vjsr	vg_sub_logo_E
	vldraw  36, 0, 0
	vjsr	vg_sub_logo_M
	vldraw  52, 0, 0
	vjsr	vg_sub_logo_P
	vldraw  248, 72, 0
	vjsr	vg_sub_logo_E
	vldraw  22, 40, 0
	vjsr	vg_sub_logo_S
	vldraw  96, -96, 0
	vjmp	vg_sub_logo_T
; Subroutines called by "TEMPEST" logo, one per letter (T and E used twice)
vg_sub_logo_T
	vldraw  0, 128, 12 ; T
	vldraw  -80, 0, 0
	vldraw  160, 0, 12
	vrts

vg_sub_logo_E
	vldraw  -80, 0, 12 ; E
	vldraw  -20, -64, 12
	vldraw  112, 0, 12
	vldraw  -112, 0, 0
	vldraw  -20, -64, 12
	vldraw  132, 0, 12
	vrts

vg_sub_logo_M
	vldraw  -32, 0, 12 ; M
	vldraw  48, 128, 12
	vsdraw  16, 0, 12
	vldraw  32, -88, 12
	vldraw  32, 88, 12
	vsdraw  16, 0, 12
	vldraw  48, -128, 12
	vldraw  -32, 0, 12
	vrts

vg_sub_logo_P
	vsdraw  -16, 0, 12 ; P
	vldraw  0, 128, 12
	vldraw  92, 0, 12
	vldraw  26, -72, 12
	vldraw  -118, 0, 12
	vrts

vg_sub_logo_S
	vldraw  -16, -40, 12 ; S
	vldraw  144, 0, 12
	vldraw  0, 56, 12
	vldraw  -112, 32, 12
	vldraw  16, 40, 12
	vldraw  100, 0, 12
	vldraw  -12, -32, 12
	vrts
; Move to the upper right and lower left extreme corners of the screen.
; It's not clear what this is for; I speculate it's to prevent the hardware
; that deals with broken driver transistors from kicking in when certain
; displays don't (otherwise) drive the beam each side of each axis.
L3ff2
	vcentre
	vscale  1, 0
	vldraw  500, 540, 0
	vldraw  -1000, -1080, 0

; The $69 is at the next to last byte of the rom, and is ignored
; by the vector processor. I bet it is a checksum byte
; Checksum byte for ROM #1 at $3800 - $3FFF
	vrts	$69

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Tempest ROMs
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

* = $9000

; Don't (yet) know what this data is.
; CRC data?

;L9000
	.byte	$02
	.byte	$bb
	.byte	$5a	;"Z"
	.byte	$30	;"0"
	.byte	$50     ;"P"
	.byte	$ee
	.byte	$3d	;"="
	.byte	$a8
	.byte	$4d	;"M"


	.local
start_level
	jsr	setup_level		
	; Set number of enemies to appear and the size
	; of the spikes to begin with
	jsr	set_enm_and_spikes
	jsr	?s1
	jsr	reset_zapper
	lda	#$fa
	sta	y_scale_2_h
	lda	#0
	sta	L0106
	sta	y_scale_2_l
	lda	#_game_mode_00
	sta	game_mode
	rts	

;;;
;;; Game initialization
;;;

L9025	jsr	set_player_position
	jsr	setup_level
?s1
	jsr	clear_shots
	jsr	remove_all_enemies_from_tube
	jsr	reset_pending_enemy_timers
	jsr	clear_enemy_deaths
	jsr	zero_out_spinner
	jsr	Lc16e
	lda	#$ff
	sta	L0124
	sta	pulsing
	lda	#0
	sta	L0123
	rts

	.local
game_state_zoom_to_next_level
	lda	#$10	; Put player at top of tunnel
	sta	player_along
	lda	#0
	sta	L29
	sta	L2b
	lda	L0121
	sta	L2a
	bpl	?f1
	dec	L2b
?f1	ldx	#1
?b1	lda	L2a
	asl	
	ror	L2a
	ror	L29
	dex	
	bpl	?b1
	lda	L29
	clc	
	adc	L0122
	sta	L0122
	lda	L2a
	adc	y_out_offset_l
	sta	y_out_offset_l
	lda	L2b
	adc	y_out_offset_h
	sta	y_out_offset_h


	lda	y_scale_2_l
	clc	
	adc	#$18
	sta	y_scale_2_l


	lda	y_scale_2_h
	adc	#0
	sta	y_scale_2_h
	cmp	#$fc
	bcc	?f2
	lda	#1
	sta	L0115
?f2

	lda	y_scale_2_l
	sec	
	sbc	L5d
	lda	y_scale_2_h
	beq	?f3
	sbc	#$ff
?f3	bne	?f5
	lda	L5d
	sta	y_scale_2_l


	lda	#$ff
	sta	y_scale_2_h
	lda	#$04
	; Branch if in play mode
	bit	play_state
	bmi	?f4
	lda	#_game_state_test_screen
?f4	sta	game_state
	ldx	curplayer
	lda	#$00		; Clear out selected level
	sta	p1_startchoice,x
?f5	lda	#$ff
	sta	L0114
	jmp	move_player


	.local
; Existing disassembled code says of this location
; "LEVEL SELECTION CODE BEGINS HERE"
; I haven't (yet) checked this claim out.

L90c4	lda	L0126			; Find out what level the player
	ldx	#$1c			; is permitted to restart on, Look it
?b1	dex				; up in a table to see how many
	cmp	startlevtbl,x		; levels they have to choose from.
	bcc	?b1			; X = # of levels to present
	ldy	#$04
	lda	diff_bits
	and	#$04			; rating bit
	beq	?f3			; branch if 1, 3, 4, 7, 9
	lda	hs_score_1+2		; top two digits of high score
	cmp	#$30			; highest score > 300,000?
	bcc	?f1
	iny	
?f1	cmp	#$50			; highest score > 500,000?
	bcc	?f2
	iny	
?f2	cmp	#$70			; highest score > 700,000?
	bcc	?f3
	iny	
?f3	lda	coinage_shadow
	and	#$43			; coinage + 1 bit of bonus coins
	cmp	#$40			; free play + 1/4,2/4,demo
	bne	?f4
	ldy	#$1b			; Limit the # of menu items it #$1b?
?f4	sty	L29
	cpx	L29
	bcs	?f5
	ldx	L29
?f5	stx	L0127
	; Branch if in attract mode
	lda	play_state
	bpl	game_state_28
	lda	#$00
	sta	L0126
game_state_28
	ldx	L3f
	stx	curplayer
	beq	?f6
	jsr	swap_players		; Swap some game data between the 
					; active and inactive players
?f6	lda	#$04			
	sta	L7c
	lda	#$ff
	sta	y_scale_2_h
	lda	#0			; set countdown_timer to 0 in attrct mode
	sta	player_seg		; start the player on segment 0
	sta	player_position		; start the player at position 0
	sta	L7b
	sta	hs_timer


	; Branch in attract mode
	ldx	play_state
	bpl	?f7

	lda	#20
	sta	hs_timer
	lda	#$ff
	sta	open_level
	lda	#_game_state_pregame		; set the game mode to pre-game
	sta	game_state
	lda	#_game_mode_copyright		; set the mode to pre-game level selection screen
	sta	game_mode
	lda	#$00		; set the current level to the first screen
	sta	curlevel
	jsr	setcolours

	; Going into game_state_pregame; countdown timer is in BCD
	lda	#$10	; Give the player 10 seconds to select level
?f7	sta	countdown_timer

	jsr	zero_out_spinner





game_state_pregame	
	dec	hs_timer	; Has the 1 second timer reached 0?
	bpl	?f10

	; Decrement timer in decimal
	sed	
	lda	countdown_timer
	sec	
	sbc	#1
	sta	countdown_timer
	cld	
	bpl	?f8

	; Set the fire button as being needed to be processed
	lda	#$10
	sta	zap_fire_new

?f8	cmp	#$03
	bne	?f9
	jsr	sound_Lccfe

	; Reset the timer to 1 second
?f9	lda	#20
	sta	hs_timer
?f10	jsr	Lb0ab
	lda	#$18
	ldy	countdown_timer
	cpy	#$08
	bcs	?f11

	; Any buttons pressed?
	lda	#$78
?f11	and	zap_fire_new
	beq	?f13

	; Clear the list of buttons to be processed
	lda	#0
	sta	zap_fire_new

; New-level entry, used by attract mode(?) and new game start
	lda	player_seg
	tay	

	; Current player number in x
	ldx	curplayer

	; Store the menu selection chosen
	sta	p1_startchoice,x

	; If real game play, branch
	lda	startlevtbl,y

	; Branch in play mode
	bit	play_state
	bmi	?f12


; Attract mode setup

	; Set player lives to 1
	ldy	#$01
	sty	players_lives

	; Pick random level number 0-7
	lda	pokey1_rand
	and	#$07

	; Set the level number
?f12	sta	players_level,x
	sta	curlevel

	jsr	setcolours
	jsr	setup_level
	jsr	set_enm_and_spikes
	jsr	reset_zapper
	lda	#_game_state_attract_mode
	sta	game_state
	jsr	zero_out_spinner
?f13	lda	zap_fire_new
	and	#$07
	sta	zap_fire_new
	rts	

; Loads the start bonus (level choice in A) into 29/2a/2b
ld_startbonus
	asl	
	tax	
	lda	#0
	sta	L29_l
	lda	start_bonus,x
	sta	L29_m
	lda	start_bonus+1,x
	sta	L2b
	rts	

; Start bonuses, in BCD, low 00 not stored.

start_bonus
	.word   $0000, $0060, $0160, $0320
	.word   $0540, $0740, $0940, $1140
	.word   $1340, $1520, $1700, $1880
	.word   $2080, $2260, $2480, $2660
	.word   $3000, $3400, $3820, $4150
	.word   $4390, $4720, $5310, $5810
	.word   $6240, $6560, $7660, $8980

; Start level numbers?  (ie, is this table maybe mapping from index
; of level-select entry chosen to actual level number?)

;  Highest level
;  reached in
;  last game            Level choices this game
;  -------------  -----------------------
;  1-11  1,3,5,7,9
;  12-13  1,3,5,7,9,11
;  14-15  1,3,5,7,9,11,13
;  16-17  1,3,5,7,9,11,13,15
;  18-20  1,3,5,7,9,11,13,15,17
;  21-22  1,3,5,7,9,11,13,15,17,20
;  23-24  1,3,5,7,9,11,13,15,17,20,22
;  25-26  1,3,5,7,9,11,13,15,17,20,22,24
;  27-28  1,3,5,7,9,11,13,15,17,20,22,24,26
;  29-31  1,3,5,7,9,11,13,15,17,20,22,24,26,28
;  32-33  1,3,5,7,9,11,13,15,17,20,22,24,26,28,31
;  34-36  1,3,5,7,9,11,13,15,17,20,22,24,26,28,31,33
;  37-40  1,3,5,7,9,11,13,15,17,20,22,24,26,28,31,33,36
;  41-44  1,3,5,7,9,11,13,15,17,20,22,24,26,28,31,33,36,40
;  45-47  1,3,5,7,9,11,13,15,17,20,22,24,26,28,31,33,36,40,44
;  48-49  1,3,5,7,9,11,13,15,17,20,22,24,26,28,31,33,36,40,44,47
;  50-52  1,3,5,7,9,11,13,15,17,20,22,24,26,28,31,33,36,40,44,47,49
;  53-56  1,3,5,7,9,11,13,15,17,20,22,24,26,28,31,33,36,40,44,47,49,52
;  57-60  1,3,5,7,9,11,13,15,17,20,22,24,26,28,31,33,36,40,44,47,49,52,56
;  61-63  1,3,5,7,9,11,13,15,17,20,22,24,26,28,31,33,36,40,44,47,49,52,56,60
;  64-65  1,3,5,7,9,11,13,15,17,20,22,24,26,28,31,33,36,40,44,47,49,52,56,60,63
;  66-73  1,3,5,7,9,11,13,15,17,20,22,24,26,28,31,33,36,40,44,47,49,52,56,60,63,65
;  74-81  1,3,5,7,9,11,13,15,17,20,22,24,26,28,31,33,36,40,44,47,49,52,56,60,63,65,73
;  82-99  1,3,5,7,9,11,13,15,17,20,22,24,26,28,31,33,36,40,44,47,49,52,56,60,63,65,73,81
;  
startlevtbl
	.byte	 0,  2,  4,  6
	.byte	 8, 10, 12, 14
	.byte	16, 19, 21, 23
	.byte	25, 27, 30, 32
	.byte	35, 39, 43, 46
	.byte	48, 51, 55, 59
	.byte	62, 64, 72, 80
	.byte	<-1

;;;
;;; Set the players position
;;;

set_player_position

	; Put the player on segment $f ($e+1) of the tunnel
	lda	#$0e
	sta	player_seg

	; Position the player on the segment
	lda	#$f0
	sta	player_position

	lda	#0
	sta	L0106

	; Put the player on segment 15 of the tunnel
	lda	#15
	sta	player_status

	; Put the player at the top of the tunnel
	lda	#$10
	sta	player_along
	rts	

; Upon new tunnel, set # of enemies and size of spikes.
; Only used for *certain* levels.

	.local
set_enm_and_spikes

	; Find out how many enemies to create for this level and set it
	lda	wave_enemies
	sta	enemies_pending

	; Find out how tall the spikes should be and create spikes
	; in all the tunnel segmenst to be that large
	lda	wave_spikeht
	ldx	#(n_segments_per_tunnel-1)
?b1	sta	spike_ht,x
	dex	
	bpl	?b1
	rts	


	.local

; Initialize the pending_seg and pending_vid tables.

	; Clear out the $40 timers used to say when an enemy can be put
	; onto the tube.
reset_pending_enemy_timers
	lda	#0
	ldx	#n_pending_enemies-1
?b1	sta	pending_vid,x
	dex	
	bpl	?b1

;L9250
	; Get the number of enemies to make an appearance in this tube.

	ldx	enemies_pending
	dex	

	; Randomize the movement styles for the enemies that are going
	; to be placed in the tube.

?b2	lda	pokey1_rand
	and	#$0f
	sta	pending_seg,x
	txa	
	asl	
	asl	
	asl	
	asl	
	ora	pending_seg,x
	bne	?f3
	lda	#$0f
?f3	sta	pending_vid,x
	dex	
	bpl	?b2
	rts	


	.local

; Clear all enemies?  (eg, zap?)

remove_all_enemies_from_tube

	; Clear out the table that holds the height of the enemies inside
	; the tunnel

	ldx	#$06
	lda	#0
?b1	sta	enemy_along,x
	dex	
	bpl	?b1

	; No enemies inside the tube
	sta	enemies_in

	; No enemies at the top of the tube
	sta	enemies_top

	; Clear out the addresses which contain how many of each type
	; of enemy are currently in the tunnel
	sta	n_spikers
	sta	n_flippers
	sta	n_tankers
	sta	n_pulsars
	sta	n_fuzzballs
	rts	


	.local

; Remove all bullets from play

clear_shots
	lda     #$00
	ldx     #$0b
?b1	sta     ply_shotpos,x
	dex
	bpl     ?b1
	sta     ply_shotcnt
	sta     enm_shotcnt
	rts

	.local

; Clear out the special images to display for an enemy death
; and set the death-in-progress counter to 0

clear_enemy_deaths
	ldx     #$07
	lda     #0
?b1	sta     L030a,x
	dex
	bpl     ?b1

	; Clear out any enemy death sequences in progress.
	sta     L0116

	rts


; Zero out the spinner since last read.

zero_out_spinner
	lda     #0
	sta     spinner_delta
	rts



	.local
; This will swap the following variables between the active
; player and the inactive player:
;   # of times zapper used
;   # of enemies left
;   Height of the spikes in the segments.

swap_players
	ldx     #player_data_len-1
?b1	lda     player_data_start,x
	ldy     other_pl_data,x
	sta     other_pl_data,x
	tya
	sta     player_data_start,x
	dex
	bpl     ?b1
	rts



	.local
setup_level
	; Are we at the last level?
	lda     curlevel
	cmp     #n_levels-1
	bcc     ?f1

	; Yes. Get a random number $40 - $5f (64-95)
	lda     pokey2_rand
	and     #$1f
	ora     #$40

?f1	sta     L2b
	inc     L2b

	; L2b now holds the effective level number
;L92d6




; for (loopidx = _lvl_tbls_len-1; loopidx != $ff; loopidx -= 4)

	ldx     #_lvl_tbls_len-1
	stx     loopidx

	; Loop for X from $6f(111) down through $03 
	; lvl_tbls is 112 bytes long

?loop
	; Get the current index
	ldx     loopidx

	; Store the second word of the lvl_tbls entry at ptr1
	; The address of the variable being set
	lda     ?lvl_tbls,x
	sta     ptr1_h
	lda     ?lvl_tbls-1,x
	sta     ptr1_l

	; Store the first word of the table entry at ptr2
	; The address of the lvl_tbl
	lda     ?lvl_tbls-2,x
	sta     ptr2_h
	lda     ?lvl_tbls-3,x
	sta     ptr2_l


	lda     #1
	sta     L38

	ldy     #0

; lvl_tbl layout
	; 0: parameter stored in L015e; offset into jump table at L968f
	;    0 means store 0 in the lvl_tbls second parameter
	; 1: min level #
	; 2: max level #
?b3
	; Get the y'th byte from the lvl_tbl
	lda     (ptr2),y
	sta     L015e
;L92fb
	; Jump table offset of 0 means zero the lvl_tbls parameter,
	; ignoring the lvl range test
	beq     ?f6

	; Get the effective level number
	lda     L2b

	; Compare to the 2nd byte in the lvl_tbl
	iny
	cmp     (ptr2),y
	iny

	; Branch if eff. lvl < lvl_tbl[1];
	bcc     ?f5 ; branch if lvl # is too low

	; Compare to the 3rd byte in the lvl_tbl
	cmp     (ptr2),y

	; Branch if eff. lvl != lvl_tbl[2];
	bne     ?f4 ; branch to ?f4 if lvl # >= (ptr2),y

	; eff. lvl >= lvl_tbl[1] && eff. lvl == lvl_tbl[2]
	clc
?f4
	; Covoluted test for eff. lvl > lvl_tbl[2];
	bcs     ?f5

	; eff. lvl >= lvl_tbl[1] && eff. lvl <= lvl_tbl[2]

	; Bump Y to the 4th byte
	iny

	; Jump to the L015e'th entry of the jump table at L968f
	jsr     L9677

	jmp     ?f6
?f5	jsr     L9683
	clc
	bcc     ?b3
?f6	ldy     #0
	sta     (ptr1),y

	; Decrement the index by 4 (move to the previous table entry)
	lda     loopidx
	sec
	sbc     #$04
	sta     loopidx

	; Test for end of loop
	cmp     #$ff
	bne     ?loop


;L9328

	; Set up for easy/medium/hard difficultly switch setting

	; Get the switch shadow and mask the difficulty bits
	lda     diff_bits
	and     #pokey2_sw_diff_mask ; difficulty

	; Easy setting?
	cmp     #pokey2_sw_diff_val_easy ; easy
	bne     ?not_easy

	; Yes...

	; Fewer enemy bullets
	dec     enm_shotmax

	; Slower enemies
        lda     spd_flipper_lsb
        eor     #$ff
        lsr     a
        lsr     a
        lsr     a
        adc     spd_flipper_lsb
        sta     spd_flipper_lsb


	; Are up to at least the red level?
        lda     curlevel
        cmp     #curlevel_red
        bcs     ?f7
        dec     flip_top_accel
?f7	clv
        bvc     ?not_hard	; Always branch



?not_easy
	; Hard setting?
	cmp     #pokey2_sw_diff_val_hard ; hard
        bne     ?not_hard

	; Yes...

	
	; More enemy bullets
        inc     enm_shotmax
        lda     enm_shotmax
        cmp     #$03
        bcc     ?f9
        lda     #$03
        sta     enm_shotmax
?f9	lda     spd_flipper_lsb
        lsr     a
        lsr     a
        lsr     a
        ora     #$e0
        adc     spd_flipper_lsb
        sta     spd_flipper_lsb
        lda     wave_enemies
        lsr     a
        lsr     a
        lsr     a
        adc     wave_enemies
        sta     wave_enemies
;L937a
        lda     pulsar_fire
        ora     #$40
        sta     pulsar_fire
?not_hard
	lda     spd_spiker_lsb
        jsr     crack_speed
        sta     spd_spiker_lsb
        sty     spd_spiker_msb
        stx     hit_tol+3	; hit_tol + spiker
        lda     enm_shotspd_lsb
        jsr     crack_speed
        sta     enm_shotspd_lsb
        sty     enm_shotspd_msb
        stx     La7
        lda     spd_flipper_lsb
        jsr     crack_speed
        sta     spd_flipper_lsb
        sta     spd_tanker_lsb
        sty     spd_tanker_msb
        sty     spd_flipper_msb
        stx     hit_tol
        stx     hit_tol+2	; hit_tol + tanker
        stx     hit_tol+1	; hit_tol + pulsar
        lda     spd_flipper_lsb
        asl     a
        sta     spd_fuzzball_lsb
        lda     spd_flipper_msb
        rol     a
        sta     spd_fuzzball_msb
        lda     #$06
        sta     hit_tol+4	; hit_tol + fuzzball
        lda     #$a0
        sta     spd_pulsar_lsb
        lda     #$fe
        sta     spd_pulsar_msb
        lda     #$01
        sta     tanker_load+1
        sta     tanker_load
        rts

crack_speed
	ldy     #$ff
        sty     L29
        asl     a
        rol     L29
        asl     a
        rol     L29
        asl     a
        rol     L29
        ldy     L29
        pha
        tya
        eor     #$ff
        clc
        adc     #$0d
        lsr     a
        tax
        pla
        rts



; Computation of various per-level parameters.  See the table at ?lvl_tbls and
; the code at L92d6 for more.  Each chunk is commented with the address or
; symbol for the byte it computes.

?shot_holdoff_lvl_tbl
	.byte	$08, $01, $14, $50, $fd	; (fd = 80 - 3)
	.byte	$02, $15, $40, $14	; 93ff
	.byte	$02, $41, $63, $0a	; 9403

; enm_shotmax
?enm_shotmax_lvl_tbl
	.byte	$04, $01, $09, $01, $01, $01, $02, $03, $02, $02, $03, $03
	.byte	$02, $0a, $40, $02	; 9413
	.byte	$02, $41, $63, $03	; 9417

; spd_flipper_lsb
?spd_flipper_lsb_lvl_tbl
	.byte	$08, $01, $08, $d4, $fb	; (-44 -5)
	.byte	$04, $09, $10, $af, $ac, $ac, $ac, $a8, $a4, $a0, $a0	; 9420
	.byte	$08, $11, $19, $af, $fd	; (-81 -3)	; 942b
	.byte	$08, $1a, $20, $9d, $fd	; (-99 -3)	; 9430
	.byte	$08, $21, $27, $94, $fd	; (-108 -3)	; 9435
	.byte	$08, $28, $30, $92, $ff	; (-110 -1)	; 943a
	.byte	$08, $31, $40, $88, $ff	; (-120 -1)	; 943f
	.byte	$0c, $41, $63, $60, $41			; 9444
; enm_shotspd_lsb
?enm_shotspd_lsb_lvl_tbl	; 9449
	.byte	$0a, $01, $63, $c0

; spd_spiker_lsb
?spd_spiker_lsb_lvl_tbl
	.byte	$0a, $01, $14, $00	; 944d
	.byte	$0a, $15, $20, $d0	; 9451
	.byte	$0a, $21, $30, $d8	; 9455
	.byte	$0a, $31, $63, $d0	; 9459
?L0157_lvl_tbl
	.byte	$02, $01, $20, $a0	; 945d
	.byte	$02, $21, $40, $a0	; 9461
	.byte	$02, $41, $63, $c0	; 9465
?pulse_beat_lvl_tbl
	.byte	$02, $01, $30, $04	; 9469
	.byte	$02, $31, $40, $06	; 946d
	.byte	$02, $41, $63, $08	; 9471
; tanker_load+2
?tanker_load_2_lvl_tbl
	.byte	$02, $01, $20, $01	; 9475
	.byte	$02, $21, $28, $03	; 9479
	.byte	$02, $29, $63, $02	; 947d
; tanker_load+3
?tanker_load_3_lvl_tbl
	.byte	$02, $01, $30, $01	; 9481
	.byte	$02, $31, $63, $03	; 9485
; min_spikers
?min_spikers_lvl_tbl
	.byte	$04, $01, $04, $00, $00, $00, $01
	.byte	$02, $05, $10, $02	; 9490
	.byte	$02, $11, $13, $00	; 9494
	.byte	$02, $14, $20, $01	; 9498
	.byte	$02, $23, $27, $01	; 949c
	.byte	$02, $2c, $63, $01	; 94a0
	.byte	$00			; 94a4

; max_spikers
?max_spikers_lvl_tbl
	.byte	$04, $01, $06, $00, $00, $00, $02, $03, $04	; 94a5
	.byte	$02, $07, $0a, $04	; 94ae
	.byte	$02, $0b, $10, $03	; 94b2
	.byte	$02, $14, $19, $02	; 94b6
	.byte	$04, $1a, $20, $01, $02, $02, $02, $01, $01, $02	; 94ba

; I conjecture the 35 in this next line is intended to be 23 - ie, 35
; *decimal*.  This would make sense, as level 35 is the point at which
; we start getting spikes after level 32.  But with the table as is, we
; don't get spikers until level 43 ($2b - see the following line).
; This doesn't explain the weird 27, though - having no spikers on levels
; $28 through $2a seems peculiar.

	.byte	$02, $35, $27, $01	; 94c4
	.byte	$02, $2b, $63, $01	; 94c8
	.byte	$00			; 94cc

; min_flippers
?min_flippers_lvl_tbl
	.byte	$02, $01, $04, $01	; 94cd
	.byte	$02, $05, $63, $00	; 94d1
	.byte	$00			; 94d5

; max_flippers
?max_flippers_lvl_tbl
	.byte	$02, $01, $04, $04	; 94d6
	.byte	$02, $05, $10, $05	; 94da
	.byte	$02, $11, $13, $03	; 94de
	.byte	$02, $14, $19, $04	; 94e2
	.byte	$02, $1a, $63, $05	; 94e6
	.byte	$00			; 94ea

; min_tankers
?min_tankers_lvl_tbl
	.byte	$04, $01, $04, $00, $00, $01, $00	; 94eb
	.byte	$02, $05, $10, $01	; 94f2
	.byte	$02, $11, $20, $01	; 94f6
	.byte	$02, $21, $27, $01	; 94fa
	.byte	$02, $28, $63, $01	; 94fe
	.byte	$00	; 9502

; max_tankers
?max_tankers_lvl_tbl
	.byte	$04, $01, $05, $00, $00, $01, $00, $01	; 9503
	.byte	$02, $06, $10, $02	; 950b
	.byte	$02, $11, $1a, $01	; 950f
	.byte	$02, $1b, $20, $01	; 9513
	.byte	$02, $21, $2c, $02	; 9517
	.byte	$02, $2d, $63, $03	; 951b
	.byte	$00	; 951f

; min_pulsars
?min_pulsars_lvl_tbl
	.byte	$02, $11, $20, $02	; 9520
	.byte	$02, $21, $63, $01	; 9524
	.byte	$00	; 9528

; max_pulsars
?max_pulsars_lvl_tbl
	.byte	$04, $11, $20, $05, $03, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $03, $04, $02	; 9529
	.byte	$02, $21, $63, $03	; 953c
	.byte	$00	; 9540

; min_fuzzballs
?min_fuzzballs_lvl_tbl
	.byte	$02, $0b, $10, $01	; 9541
	.byte	$02, $16, $19, $01	; 9545
	.byte	$02, $1b, $63, $01	; 9549
	.byte	$00	; 954d

; max_fuzzballs
?max_fuzzballs_lvl_tbl
	.byte	$02, $0b, $10, $01	; 954e
	.byte	$02, $16, $19, $01	; 9552
	.byte	$02, $1b, $20, $01	; 9556
	.byte	$02, $21, $27, $04	; 955a
	.byte	$02, $28, $63, $03	; 955e
	.byte	$00	; 9562

; pulsar_fliprate
?pulsar_fliprate_lvl_tbl
	.byte	$04, $11, $12, $28, $14	; 9563
	.byte	$0c, $13, $20, $14, $28	; 9568
	.byte	$08, $21, $27, $14, $ff	; 956d
	.byte	$0c, $28, $63, $14, $0a	; 9572
	.byte	$00	; 9577

; fuzz_move_flg
?fuzz_move_flg_level_tbl
	.byte	$0c, $11, $20, $00, $40	; 9578
	.byte	$0c, $21, $30, $40, $c0	; 957d
	.byte	$02, $31, $63, $c0	; 9582
	.byte	$00	; 9586

; fuzz_move_prb
?fuzz_move_prb_lvl_tbl
	.byte	$02, $01, $10, $dc	; 9587
	.byte	$02, $11, $27, $c0	; 958b
	.byte	$08, $28, $40, $c0, $01	; 958f
	.byte	$02, $41, $63, $e6	; 9594

; max_enm
?max_enm_lvl_tbl
	.byte	$02, $01, $63, $06	; 9598

; wave_spikeht
?wave_spikeht_lvl_tbl
	.byte	$06, $01, $63, $00, $00, $00, $e0, $d8, $d4, $d0, $c8, $c0, $b8, $b0, $a8, $a0, $a0, $a0, $a8	; 959c
	.byte	$a0	; 95af
	.byte	$9c	; 95b0
	.byte	$9a	; 95b1
	.byte	$98	; 95b2

; wave_enemies
?wave_enemies_lbl_tbl
	.byte	$04, $01, $10, $0a, $0c, $0f, $11, $14, $16, $14, $18, $1b, $1d, $1b, $18, $1a, $1c, $1e, $1b	; 95b3
	.byte	$08, $11, $1a, $14, $01	; 95c6
	.byte	$02, $1b, $27, $1b	; 95cb
	.byte	$08, $28, $30, $1d, $01	; 95cf
	.byte	$08, $31, $40, $1f, $01	; 95d4
	.byte	$08, $41, $50, $23, $01	; 95d9
	.byte	$08, $51, $63, $2b, $01	; 95de

; flip_top_accel
?flip_top_accel_lvl_tbl
	.byte	$02, $01, $14, $02	; 95e3
	.byte	$02, $15, $20, $02	; 95e7
	.byte	$02, $21, $63, $03	; 95eb

; pulsar_fire
?pulsar_fire_lvl_tbl
	.byte	$02, $3c, $63, $40		; 95ef
	.byte	$00			; 95f3

; flipper_move
?flipper_move_lvl_table
	.byte	$06, $01, $63, $07, $0b, $19, $24, $53, $0b, $24, $19, $53, $87, $24, $19, $53, $07, $87, $24	; 95f4

; See the code beginning L92d6.

?lvl_tbls
	.word    ?pulsar_fire_lvl_tbl,		pulsar_fire
	.word    ?flip_top_accel_lvl_tbl,	flip_top_accel
	.word    ?shot_holdoff_lvl_tbl,		shot_holdoff
	.word    ?enm_shotmax_lvl_tbl,		enm_shotmax
	.word    ?min_flippers_lvl_tbl,		min_flippers
	.word    ?max_flippers_lvl_tbl,		max_flippers
	.word    ?min_pulsars_lvl_tbl,		min_pulsars
	.word    ?max_pulsars_lvl_tbl,		max_pulsars
	.word    ?min_tankers_lvl_tbl,		min_tankers
	.word    ?max_tankers_lvl_tbl,		max_tankers
	.word    ?min_spikers_lvl_tbl,		min_spikers
	.word    ?max_spikers_lvl_tbl,		max_spikers
	.word    ?min_fuzzballs_lvl_tbl,	min_fuzzballs
	.word    ?max_fuzzballs_lvl_tbl,	max_fuzzballs
	.word    ?L0157_lvl_tbl,		L0157
	.word    ?pulse_beat_lvl_tbl,		pulse_beat
	.word    ?tanker_load_2_lvl_tbl,	tanker_load+2
	.word    ?tanker_load_3_lvl_tbl,	tanker_load+3
	.word    ?max_enm_lvl_tbl,		max_enm
	.word    ?wave_enemies_lbl_tbl,		wave_enemies
	.word    ?wave_spikeht_lvl_tbl,		wave_spikeht
	.word    ?pulsar_fliprate_lvl_tbl,	pulsar_fliprate
	.word    ?flipper_move_lvl_table,	flipper_move
	.word    ?spd_spiker_lsb_lvl_tbl,	spd_spiker_lsb
	.word    ?enm_shotspd_lsb_lvl_tbl,	enm_shotspd_lsb
	.word    ?spd_flipper_lsb_lvl_tbl,	spd_flipper_lsb
	.word    ?fuzz_move_flg_level_tbl,	fuzz_move_flg
	.word    ?fuzz_move_prb_lvl_tbl,	fuzz_move_prb
_lvl_tbls_len = * -?lvl_tbls




	.local

	; Jump to the L015e'th entry of the jump table at L968f
L9677
	ldx     L015e
	lda     ?t1+1,x
	pha
	lda     ?t1,x
	pha
	rts

L9683
	ldx     L015e
	lda     ?t2+1,x
	pha
	lda     ?t2,x
	pha
	rts


; Jump table used by code at L9677.
; ltmin = first level-test byte
; ltmax = second level-test byte
; b[] = bytes following level test bytes
; thus, we have: opcode ltmin ltmax b[0] b[1] b[2] etc...
; (loc) = contents of memory location loc
; lev = current level number
; lwb = (((lev-1)&15)+1 - level # within its block of 16 levels
?t1	; L968f
	.word   0000 ; not used - tested for at L92fb
	.jump   L968f_02 ; A = b[0]
	.jump   L968f_04 ; A = b[lev-ltmin]
	.jump   L968f_06 ; A = b[lwb-ltmin]
	.jump   L968f_08 ; A = b[0] + ((lev-ltmin) * b[1])
	.jump   L968f_0a ; A = b[0] + ($0160)
	.jump   L968f_0c ; A = b[(lev-ltmin)&1]
; Jump table used by code at 9683.
?t2 ; L969d
	.word   0000 ; not used - tested for at L92fb
	.jump   L969d_02_0a ; Y += 2
	.jump   L969d_04_06 ; Y += ltmax - ltmin + 2
	.jump   L969d_04_06 ; Y += ltmax - ltmin + 2
	.jump   L969d_08_0c ; Y += 3
	.jump   L969d_02_0a ; Y += 2
	.jump   L969d_08_0c ; Y += 3


L968f_06
	lda     L2b
	sec
	sbc     #$01
	and     #$0f
	clc
	adc     #$01
	bpl     ?f1
L968f_04
	lda     L2b
?f1
	sty     L29
	dey
	dey
	sec
	sbc     (ptr2),y
	clc
	adc     L29
	tay
L968f_02
	lda     (ptr2),y
	rts

L969d_08_0c
	iny
L969d_02_0a
	iny
	iny
	rts

L969d_04_06
	lda     (ptr2),y
	dey
	sec
	sbc     (ptr2),y
	sta     L29
	tya
	sec
	adc     L29
	tay
	iny
	iny
	rts

L968f_0a
	lda     (ptr2),y
	clc
	adc     spd_flipper_lsb
	rts

L968f_08
	jsr     ?s4
	tax
	lda     (ptr2),y
	iny
	cpx     #$00
	beq     ?f3
?b2
	clc
	adc     (ptr2),y
	dex
	bne     ?b2
?f3	rts

; Set A to current level number minus base level number
?s4
	lda     L2b
	sty     L29
	dey
	dey
	sec
	sbc     (ptr2),y
	iny
	iny
	rts

L968f_0c
	jsr     ?s4
	and     #$01
	beq     ?f5
	iny
?f5
	lda     (ptr2),y
	rts

	.local

game_state_4
	jsr     move_player
	jsr     player_fire
	jsr     check_zap
	jsr     create_enemies
	jsr     move_enemies
	jsr     move_shots
	jsr     enm_shoot
	jsr     pshot_hit
	jsr     La416
	jmp     La504


	.local
game_state_zoom
	lda     L0123
	and     #$7f ; ~$80
	sta     L0123
	jsr     move_player
	jsr     L97f8
	jsr     La416
	jsr     player_fire
	jsr     move_shots
	; Branch if player alive
	lda     player_status
	bpl     ?f1
	jsr     La504
?f1	rts




	.local
move_player

	; Branch if player alive
	lda     player_status
	bpl     ?f1
	; Player dead, return
	rts
?f1


	ldx     #0
	; Branch in play mode
	lda     play_state
	bmi     ?f2


	; Game is in attract mode

	jsr     attract_mode_move_player
	clv
	bvc     ?f6	; Always branch

	; Game is in play mode

?f2
	; Clamp spinner_delta to +/-31

	lda     spinner_delta
	bpl     ?f4

	; Spinner delta < 0

	cmp     #<-31
	bcs     ?f3
	lda     #<-31
?f3	clv
	bvc     ?f5	; Always branch
?f4	cmp     #31
	bcc     ?f5
	lda     #31

	; dismiss spinner_delta
?f5	stx     spinner_delta


	; Merge point for play/attract
	; A contains a spinner_delta

?f6	sta     L2b

	; L2c = player_position - spinner_delta
	eor     #$ff
	sec
	adc     player_position
	sta     L2c		; this will be player_position


	; Determine if this level is open or closed (the playing field
	; is a sheet or a tube

	ldx     open_level
	beq     ?f10

	; Sheet; don't let the player move off of the ends

	cmp     #$f0
	bcc     ?f7
	; Clamp maximum position
	lda     #$ef
	sta     L2c		; this will be player_position
?f7
	
	eor     L2b		; spinner delfa
	bpl     ?f10
	lda     L2c		; this will be player_position
	eor     player_position
	bpl     ?f10
	lda     player_position
	bmi     ?f8
	lda     #$00
	clv
	bvc     ?f9
?f8	lda     #$ef
?f9	sta     L2c		; this will be player_position
?f10




	lda     L2c		; this will be player_position
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     L2a		; this will be player_seg
	clc
	adc     #$01
	and     #$0f
	sta     L2b		; this will be player_status
	lda     L2a		; this will be player_seg


	; Same segment as the player?
	cmp     player_seg
	beq     ?f11
	jsr     sound_segment_change
?f11


	; Update player variables

	lda     L2a
	sta     player_seg

	lda     L2b
	sta     player_status

	lda     L2c
	sta     player_position

	rts




	.local
; Find extant enemy which is highest up the tube.  Return -9 or 9 depending
; on which way we need to go to get to it, or -1 if there is no such enemy,
; or 0 if there is but we're already on the correct segment.
attract_mode_move_player
	lda     #$ff
	sta     L29
	sta     L2a
	; Start with slot 6 of 0-6
	ldx     max_enm
?b1
	; Is there an enemy here?
	lda     enemy_along,x
	beq     ?f2
	cmp     L29
	bcs     ?f2
	sta     L29
	stx     L2a
?f2
	dex
	bpl     ?b1
	ldx     L2a
	bmi     ?f4
	lda     enemy_seg,x
	ldy     player_seg
	jsr     La7a6
	tay
	beq     ?f4
	bmi     ?f3
	lda     #<-9
	clv
	bvc     ?f4
?f3
	lda     #9
?f4
	rts





	.local
L97f8
	; Is the player alive? If so return
	lda     player_status
	bpl     ?f1
	rts
?f1
	lda     L0106
	bmi     ?f2
	rts
?f2
	; Get player's Y position
	lda     player_along
	; At the top of the tunnel?
	cmp     #$10
	bne     ?f3
	jsr     sound_Lccee
?f3
	lda     along_lsb
	clc
	adc     zoomspd_lsb
	sta     along_lsb
	; Get player's Y positions
	lda     player_along
	; Move them downwards
	adc     zoomspd_msb
	; Store player's Y position
	sta     player_along
	bcs     ?f4
	cmp     #$f0
?f4
	bcc     ?f5
	lda     #_game_state_get_level
	sta     game_state
	jsr     sound_Lccf2
	; Put player at bottom of tunnel
	lda     #$ff
	sta     player_along
?f5
	; Is the player above or below the mid-point of the tunnel?
	lda     player_along
	cmp     #$50
	bcc     ?f6
	lda     L0115
	bne     ?f6
	jsr     La7bd
?f6
	lda     L5c
	clc
	adc     zoomspd_lsb
	sta     L5c




	lda     y_scale_2_l
	adc     zoomspd_msb
	bcc     ?f7
	inc     y_scale_2_h
?f7
	cmp     y_scale_2_l
	beq     ?f8
	inc     L0114
?f8
	sta     y_scale_2_l



; Accelerate based on current level value.  The computation here is
; [zoomspd_msb:zoomspd_lsb] += v, where v is
; (((((curlevel<<2)&$ff)<$30)?$30:((curlevel<<2)&$ff))+$20)&$ff, which
; simplifies to (((((curlevel&63)<12)?12:curlevel)<<2)+$20)&$ff.
; This means slow zooms starting at level 56 (where level<<2 hits $e0),
; because the carry out of the +$20 add is explicitly cleared (L9869).
	lda     curlevel
	asl     a
	asl     a
	cmp     #$30
	bcc     ?f9 ; branch for 1-11 and 64-74
	lda     #$30
?f9
	clc
	adc     #$20
;L9869
	clc
	adc     zoomspd_lsb
	sta     zoomspd_lsb
; Why not "bcc 1f; inc zoomspd_msb; 1:"?  I have no idea.
	lda     zoomspd_msb
	adc     #$00
	sta     zoomspd_msb
	
	; Spike/player collision detection

	; Is the player at the very bottom of the tunnel?
	lda     player_along
	cmp     #$f0
	; If so, return
	bcs     ?f12
; Check for player getting spiked
; I do not understand why scan all segments here, instead of just checking
; the value for player_seg, when L9886/L9889 ensure that only player_seg's
; value actually matters anyway.

	; For all tunnel segmens
	ldx     #$0f
?b10
	; Get the height of the spike
	lda     spike_ht,x
	; If no spike, next
	beq     ?f11
;L9886
	; Player on the same segment?
	cpx     player_seg
;L9889
	; No, next
	bne     ?f11

	; Player ran into the segment
	cmp     player_along
	; No, next
	bcs     ?f11
	; Collision
	jsr     sound_pulsar
	jsr     pieces_death
	lda     #$00
	sta     L0115
	jsr     clear_shots

	; Next spike
?f11
	dex
	bpl     ?b10
?f12
	rts



	.local
create_enemies
	ldy     #$00
	sty     L014f
	; Get # of enemies in the tube
	lda     enemies_in
	clc
	; Add with the # of enemies at the top of the tube
	adc     enemies_top
	cmp     max_enm
	bcc     ?f1
	beq     ?f1
	ldy     #$ff
?f1
	lda     zap_running
	beq     ?f2
	ldy     #$ff
?f2
	sty     L2f

	; Go through all of the countdown positions for an enemy to appear.
	ldx     #$3f
?b3
	; No enemy, next
	lda     pending_vid,x
	beq     ?f8
	bit     L2f
	bmi     ?f5
	sec
	sbc     #$01
	sta     pending_vid,x
	bne     ?f4
	jsr     L9923
	clv
	bvc     ?f5
?f4
	cmp     #$3f
	bne     ?f5
	ldy     pending_seg,x
	lda     L014f
	ora     L014f
;L98e6
	and     Lca38,y
	beq     ?f5
	inc     pending_vid,x
?f5
	lda     pending_vid,x
	cmp     #$40
	bcc     ?f7
	lda     timectr
	and     #$01
	bne     ?f6
	lda     pending_seg,x
	clc
	adc     #$01
	and     #$0f
	sta     pending_seg,x
?f6
	clv
	bvc     ?f8
?f7
	cmp     #$20
	bcc     ?f8
	ldy     pending_seg,x
;L9910
	lda     Lca38,y
	ora     L014f
	sta     L014f
?f8
	dex
	bpl     ?b3
	lda     L014f
	sta     L0150
	rts


	.local
L9923
	lda     #$f0
	sta     L29
	lda     pending_seg,x
	sta     L2a
	stx     L35
	jsr     L99a5
	ldx     L35
	lda     L29
	beq     ?f1
	jsr     L994d
	beq     ?f1
	; One less enemy at the very bottom
	dec     enemies_pending
	lda     #$00
	sta     pending_vid,x
	rts
?f1
	lda     #$ff
	sta     L2f
	inc     pending_vid,x
	rts


	.local
L994d
	sty     L36
	; Start with slot 6 of 0-6
	ldy     max_enm
?b1
	; Is there an enemy in this slot?
	lda     enemy_along,y
	; No, next
	bne     ?f3
	lda     L29 ; along value
	sta     enemy_along,y
	lda     L2a ; segment number
	cmp     #$0f
	bne     ?f2
	bit     open_level
	bpl     ?f2
	; Get a random number, 0-$e, even
	lda     pokey1_rand
	and     #$0e
?f2
	sta     enemy_seg,y
	clc
	adc     #$01
	and     #$0f
	sta     L02cc,y
	lda     #$00
	sta     shot_delay,y
	lda     L2c
	sta     L028a,y
	lda     L2d
	sta     enm_move_pc,y
	; One more enemy inside the tube
	inc     enemies_in
	; Set their movement style based on the passed parameter
	lda     L2b
	sta     enemy_movement_style,y
	ldy     L36
	and     #$07
	stx     L36
	tax
	; One more of some type of enemy in the tunnel
	inc     n_flippers,x
	ldx     L36
	lda     #$10
	rts
?f3
	dey
	bpl     ?b1
	ldy     L36
	lda     #$00
	rts



	.local
L99a5
; Pick an enemy type to create a new enemy as.
; First, compute the number available to be created for each type.
	lda     #$00
	ldx     #$04
?b1
	sta     avl_flippers,x
	dex
	bpl     ?b1
	; Go through all of the enemies
	ldx     #$04
?b2
	; Find out the max # of this type of enemy allowed in the tunnel
	lda     max_flippers,x
	sec
	sbc     n_flippers,x
	; There is one ess of some type of enemy in the tunnel
	bcc     ?f3
	sta     avl_flippers,x
?f3
	dex
	bpl     ?b2
; Now, count each tanker as two of the enemy type it's holding.
; Note that this can push the availability number through zero, in which
; case it wraps around to 255.
	ldy     max_enm
?b4
	lda     enemy_along,y
	beq     ?f6
	lda     L028a,y
	and     #$03
	beq     ?f6
	tax
	cpx     #$03 ; 3 means fuzzball, not tanker!
	bne     ?f5
	ldx     #$05
?f5
	dec     L013c,x ; avl_flippers-1
	dec     L013c,x ; avl_flippers-1
?f6
	dey
	bpl     ?b4
; Take this level's maximum enemy count, plus one, and subtract off the
; counts of each type of enemy.
	ldx     #$04
	lda     max_enm
	clc
	adc     #$01
?b7
	sec
	sbc     n_flippers,x
	dex
	; There is one less of some type of enemy in the tunnel.
	bpl     ?b7
; Limit the number-available for each enemy type to the number we just
; computed, the total number of enemies available.  (In particular, this
; deals with the worst cases where availability has wrapped around.)
	ldx     #$04
?b8
	cmp     avl_flippers,x
	bcs     ?f9
	sta     avl_flippers,x
?f9
	dex
	bpl     ?b8
; Figure out how many enemy types have nonzero availability.
	ldx     #$04
	ldy     #$00
?b10
	lda     avl_flippers,x
	beq     ?f11
	iny
?f11
	dex
	bpl     ?b10
; If no enemy types have nonzero availability, nothing to do.
	tya
	beq     ?f23
; If only one type has nonzero availability, it's easy.
	dey
	bne     ?f14
; Only one type possible.  Find the type and create the enemy.
	ldx     #$04
?b12
	lda     avl_flippers,x
	beq     ?f13
;L9a15
	lda     min_flippers,x
	beq     ?f13
	jsr     L9a87
	beq     ?f13
	rts
?f13
	dex
	bpl     ?b12
	clv
	bvc     ?f23
; Hard case: multiple types possible.
; See if any of the minimum values are unsatisfied.
?f14
	sty     x_out_l
	ldx     #$04
?b15
	lda     avl_flippers,x
	beq     ?f16
	; How many of this type of enemy is in the tunnel?
	lda     n_flippers,x
;L9a32
	; Compare it to the ratio of this type of enemy that is allowed.
	cmp     min_flippers,x
	bcs     ?f16
	jsr     L9a87
	beq     ?f16
	rts
?f16
	dex
	bpl     ?b15
; No unsatisfied minima.  If we can do a spiker and we can do a tanker,
; have a look at the shortest spike, and if it's less than $cc high, create
; a spiker, else create a tanker.
	lda     avl_spikers
	beq     ?f19
	lda     avl_tankers
	beq     ?f19
	ldy     L2a
	lda     spike_ht,y
	bne     ?f17
	lda     #$ff
?f17
	ldx     #$03 ; spiker
	cmp     #$cc
	bcs     ?f18
	ldx     #$02 ; tanker
?f18
	jsr     L9a87
	beq     ?f19
	rts

; Nothing yet.  Start at a random point and go through the list of enemies
; up to four times.  Each time through, for each type with nonzero minimum
; and availability, try to create one of it.
?f19
	; Get a random number form 0-3
	lda     pokey2_rand
	and     #$03
	tax
	inx
	ldy     #$04
;L9a6a
?b20
	lda     min_flippers,x
	beq     ?f21
	lda     avl_flippers,x
	beq     ?f21
	jsr     L9a87
	beq     ?f21
	rts
?f21
	dex
	bpl     ?f22
	ldx     #$04
?f22
	dey
	bpl     ?b20
?f23
	lda     #$00
	sta     L29
	rts


	.local
; Try to create one enemy of the type found in x.  Return with Z set on
; failure, clear on success.
L9a87
	txa
L9a88
	asl     a
	tay
	lda     ?T1+1,y
	pha
	lda     ?T1,y
	pha
	rts


; Jump table, used by code at L9a87, called from various places
?T1
	.jump   L9a9d ; flipper
	.jump   L9aa9 ; pulsar
	.jump   L9abb ; tanker
	.jump   L9ab7 ; spiker
	.jump   L9ab3 ; fuzzball


	.local
L9a9d
	lda     ?t2 ; flipper
	sta     L2c
;L9aa2
	lda     flipper_move
	ldy     #$00 ; flipper
	beq     ?f6
L9aa9
	lda     ?t2+1 ; pulsar
;L9aac
	ora     pulsar_fire
	ldy     #$01 ; pulsar
	bne     ?f5
L9ab3
	ldy     #$04 ; fuzzball
	bne     ?f7
L9ab7
	ldy     #$03 ; spiker
	bne     ?f7
L9abb
	; Get a random number form 0-3
	lda     pokey1_rand ; tanker
	and     #$03
	tay
	lda     #$04
	sta     L2b
	stx     L39
?b1
	dec     L2b
	bpl     ?f2
	ldx     L39
	lda     #$00
	rts
?f2
	dey
	bpl     ?f3
	ldy     #$03
?f3
	ldx     tanker_load,y
	cpx     #$03
	bne     ?f4
	ldx     #$05
?f4
	lda     L013c,x
	beq     ?b1
	ldx     L39
	lda     tanker_load,y
	ora     #$40
	ldy     #$02
;L9aec
	bne     ?f5
L9aee
?f7
	lda     ?t2,y
?f5
	sta     L2c
;L9af3
	lda     ?t1,y
?f6
	sty     L2b
	sta     L2d
	lda     L29
	rts

; Values for L2d, per-enemy-type.  See L9af3.
; I think these are the initial movement p-code pc values.
; The flipper value is mostly ignored, using flipper_move instead.
?t1	.byte	$07 ; flipper
	.byte	$72 ; pulsar
	.byte	$07 ; tanker
	.byte	$00 ; spiker
	.byte	$61 ; fuzzball

; Values for L2c, per-enemy-type.  See code at L9a87 and the fragments it
; branches to.  This ends up in the L028a vector for the enemy.

?t2	.byte	$40 ; flipper
	.byte	$00 ; pulsar - ORed with pulsar_fire; see L9aac
	.byte	$41 ; tanker - not actually used; see L9abb..L9aec
	.byte	$40 ; spiker
	.byte	$00 ; fuzzball


	.local
L9b07
	sty     L36
	lda     L29
	cmp     #$20
	lda     L2b
	bcs     ?f1
	tay
	jsr     L9aee
	clv
	bvc     ?f2
?f1
	jsr     L9a88
?f2
	ldy     L36
	rts



	.local
move_enemies
	lda     player_status
	bmi     ?f4
	ldx     max_enm
	stx     loopidx
?loop
	ldx     loopidx
	lda     enemy_along,x
	beq     ?f3
	lda     #$01
	sta     pcode_run
	lda     enm_move_pc,x
	sta     pcode_pc
; This appears to be a p-code engine!
; The engine's pc is pcode_pc, with the code itself at La0f7.  The jump
; table at L9ba2 and the code it points to determines the actions of
; each p-opcode.  The p-machine is halted (ie, the interpreter loop
; here is exited) by setting pcode_run to zero.
;L9b3a
?b2
	lda     pcode_pc
	tay
	lda     La0f7,y
	jsr     ?f10
	inc     pcode_pc
	lda     pcode_run
	bne     ?b2
	lda     pcode_pc
	sta     enm_move_pc,x
?f3
	dec     loopidx
	bpl     ?loop
;L9b56
?f4
	lda     pulsing
	clc
;L9b5a
	adc     pulse_beat
	tay
	eor     pulsing
	sty     pulsing
	bpl     ?f6
	tya
	bpl     ?f5
	jsr     sound_pulsar
	clv
	bvc     ?f6
?f5
	lda     n_pulsars
	beq     ?f6
	lda     player_status
	bmi     ?f6
	jsr     sound_Lcd02
;L9b7c
?f6
	lda     pulsing
	bmi     ?f7
	cmp     #$0f
	bcs     ?f8
	clv
	bvc     ?f9
?f7
	cmp     #$c1
	bcs     ?f9
?f8
;L9b8c
	lda     pulse_beat
	eor     #$ff
	clc
	adc     #$01
;L9b94
	sta     pulse_beat
?f9
	rts
?f10
	tay
	lda     ?t1+1,y
	pha
	lda     ?t1,y
	pha
	rts


; See L9b3a for what this jump table is.
?t1 ;L9ba2
	.jump   eact_00 ; 00 = halt
	.jump   eact_02 ; 02 = next byte -> L0298,x
	.jump   eact_04 ; 04 = if L010c holds zero, skip next two bytes
	.jump   eact_06 ; 06 = unconditional branch
	.jump   eact_08 ; 08 = if (--L0298,x) branch else skip
	.jump   eact_0a ; 0a = nop
	.jump   eact_0c ; 0c = move per its type's speed setting
                        ;      also handles reaching end-of-tube
	.jump   eact_0e ; 0e = grow spike, reverse, convert
	.jump   eact_10 ; 10 = $00<next byte> contents -> L0298,x
	.jump   eact_12 ; 12 = start flip
	.jump   eact_14 ; 14 = continue/end flip
	.jump   eact_16 ; 16 = reverse direction (segmentwise)
	.jump   eact_18 ; 18 = check and maybe grab player
	.jump   eact_1a ; 1a = if L010c == 0, branch
	.jump   eact_1c ; 1c = enemy-above-spike? -> L010c
	.jump   eact_1e ; 1e = fuzzball movement?
	.jump   eact_20 ; 20 = check for enemy-touches-player death?
	.jump   eact_22 ; 22 = do pulsar motion
	.jump   eact_24 ; 24 = set enemy direction towards player
	.jump   eact_26 ; 26 = check for pulsing

	.local
eact_00
	lda     #$00
	sta     pcode_run
eact_0a
	rts
eact_02
	inc     pcode_pc
	ldy     pcode_pc
	lda     La0f7,y
	sta     L0298,x
	rts
eact_10
	inc     pcode_pc
	ldy     pcode_pc
	lda     La0f7,y
	tay
	lda     page0,y
	sta     L0298,x
	rts
eact_04
	lda     L010c
	bne     ?f1
	inc     pcode_pc
	inc     pcode_pc
?f1
	rts
eact_1a
	inc     pcode_pc
	lda     L010c
	bne     ?f2
	ldy     pcode_pc
	lda     La0f7,y
	sta     pcode_pc
?f2
	rts
eact_08
	dec     L0298,x
	bne     eact_06
	inc     pcode_pc
	clv
	bvc     ?f3
eact_06
	ldy     pcode_pc
	lda     La0f7+1,y
	sta     pcode_pc
?f3
	rts
; Set L010c to 1 if the enemy is above the end of its segment's spike,
; 0 if not.
eact_1c
	ldy     enemy_seg,x
	lda     spike_ht,y
	bne     ?f4
	lda     #$ff
?f4
	cmp     enemy_along,x
	bcs     ?f5
	lda     #$00
	clv
	bvc     ?f6
?f5
	lda     #$01
?f6
	sta     L010c
	rts
; Set L010c to $80 if we're pulsing now, or we will be four ticks in the
; future, or to $00 if not.
eact_26
	lda     pulse_beat
	asl     a
	asl     a
	clc
	adc     pulsing
	and     pulsing
	and     #$80
	eor     #$80
	sta     L010c
	rts
eact_16
	; Get enemy movement style and set it to ??????
	lda     enemy_movement_style,x
	eor     #$40
	sta     enemy_movement_style,x
	rts
eact_0c
	; Get enemy movement style and set it to upwards movement only.
	lda     enemy_movement_style,x
	and     #$07
	tay
	lda     L028a,x
	bmi     L9c99
L9c63
	lda     enemy_along_lsb,x
	clc
	adc     spd_flipper_lsb,y
	sta     enemy_along_lsb,x
	; Get the position of a tunnel enemy, and move them *UP* by their
	; pretermined movement rate.
	lda     enemy_along,x
	adc     spd_flipper_msb,y
	sta     enemy_along,x
	; Enemy at the top of the tunnel?
	cmp     player_along
	beq     ?f7
	bcs     ?f8
?f7
	jsr     z0c_at_top
	clv
	bvc     ?f9
?f8
	cmp     #$20
	bcs     ?f9
	lda     L028a,x
	and     #$03
	beq     ?f9
	txa
	pha
	tay
	jsr     La06f
	pla
	tax
?f9
	clv
	bvc     ?f10
L9c99
	lda     enemy_along_lsb,x
	sec
	sbc     spd_flipper_lsb,y
	sta     enemy_along_lsb,x
	; Get the Y pos of an enemy, and move them *UP* by their
	; predetermined movement rate.
	lda     enemy_along,x
	sbc     spd_flipper_msb,y
	sta     enemy_along,x
	cmp     #$f0
	bcc     ?f10
	lda     #$f2
	sta     enemy_along,x
?f10
	rts
eact_22
	ldy     #$01 ; pulsar
	lda     L028a,x
	bmi     ?f12
	lda     enemy_along,x
	cmp     L0157
	bcc     ?f11 ; branch if closer than L0157
	ldy     #$00 ; flipper
?f11
	jsr     L9c63 ; move per speed for type Y
;                                       includes z0c_at_top call
	clv
	bvc     ?f14
?f12
	jsr     L9c99	; move away per speed for type Y
			; leaves enemy_along value in A
	; Are the enemies waiting at the bottom? If so, branch
	ldy     enemies_pending
	bne     ?f13
	lda     #$ff
?f13
	cmp     L0157
	bcc     ?f14 ; branch if closer than L0157
	lda     L028a,x
	eor     #$80
	sta     L028a,x
;L9ce4
?f14
	lda     pulsing
	bmi     ?f15
	lda     enemy_along,x
	cmp     L0157
	bcs     ?f15 ; branch if farther away than L0157
	lda     player_seg
	cmp     enemy_seg,x
	bne     ?f15
	lda     player_status
	cmp     L02cc,x
	bne     ?f15
	jsr     pieces_death
?f15
	rts


;L9d05
	.byte	$16

z0c_at_top
	lda     player_along
	sta     enemy_along,x
	; Look at this enemy. Is it a pulsar>
	lda     enemy_movement_style,x
	and     #$07
	cmp     #$01 ; pulsar
	bne     ?f16
	; If nom more enemies waiting at the bottom, branch
	lda     enemies_pending
	beq     ?f16
	lda     L028a,x
	eor     #$80
	sta     L028a,x
	rts
?f16
	lda     enemy_movement_style,x
	bpl     ?f17
	; Move this enemy upwards
	inc     enemy_along,x
	rts
?f17
	; One less enemy inside the tube
	dec     enemies_in
	; Any enemies at the top?
	lda     enemies_top
	cmp     #$01
	beq     ?f18
	jsr     eact_24
	clv
	bvc     ?f22
?f18
	ldy     #$06
?b19
	; Get the Y position of the enemy
	lda     enemy_along,y
	; Are they at the top?
	beq     ?f20
	sty     L38
	cpx     L38
	beq     ?f20
	lda     enemy_along,y
	cmp     player_along
	beq     ?f21
?f20
	dey
	bpl     ?b19
?f21
	; If they are at the top, change their movement style to >
	lda     enemy_movement_style,y
	and     #$40
	eor     #$40
	sta     enemy_movement_style,x
?f22
	lda     #$41
	sta     pcode_pc
	; One more enemy at the top
	inc     enemies_top
	rts

eact_24
	lda     enemy_seg,x
	tay
	lda     player_seg
	jsr     La7a6
	asl     a
	; get enemy type and movement
	lda     enemy_movement_style,x
	bcs     ?f23
	ora     #$40
	clv
	bvc     ?f24
?f23
	and     #$bf
?f24
	; store enemy type and movement
	sta     enemy_movement_style,x
	rts


; This code is used to continue and maybe end a flipper's flip, or other
; enemy movement from one segment to the next.
eact_14
	ldy     L02cc,x
	; get enemy type and movement
	lda     enemy_movement_style,x
	and     #$40
	bne     ?f25
	iny
	clv
	bvc     ?f26
?f25
	dey
?f26
	tya
	and     #$0f
	ora     #$80
	sta     L02cc,x
	; get enemy type and movement
	lda     enemy_movement_style,x
	and     #$07
	cmp     #$04 ; fuzzball
	bne     ?f30
	lda     L02cc,x
	and     #$07
	bne     ?f29
	lda     L02cc,x
	and     #$08
	beq     ?f27
	lda     enemy_seg,x
	clc
	adc     #$01
	and     #$0f
	sta     enemy_seg,x
?f27
	; get enemy type and movement
	lda     enemy_movement_style,x
	; strip away any clockwise movement
	and     #$7f
	; store enemy type and movement
	sta     enemy_movement_style,x
	lda     #$20
	sta     L02cc,x
	lda     L028a,x
	eor     #$80
	sta     L028a,x
	; If no more enemies waiting at the bottom, skip ahead
	lda     enemies_pending
	bne     ?f29
	lda     enemy_along,x
	cmp     player_along
	bne     ?f28
	jsr     L9f81
	clv
	bvc     ?f29
?f28
	lda     L028a,x
	and     #$80
	sta     L028a,x
?f29
	clv
	bvc     ?f32
; check if flip ended
?f30
	ldy     enemy_seg,x
	lda     enemy_movement_style,x
	eor     #$40
	jsr     get_angle
	cmp     L02cc,x
	bne     ?f32
; yes, stop flipping
	lda     enemy_movement_style,x
	and     #$7f
	sta     enemy_movement_style,x
	and     #$40
	bne     ?f31
	lda     enemy_seg,x
	sta     L02cc,x
	sec
	sbc     #$01
	and     #$0f
	sta     enemy_seg,x
	clv
	bvc     ?f32
?f31
	lda     enemy_seg,x
	clc
	adc     #$01
	and     #$0f
	sta     L02cc,x
?f32
	lda     enemy_movement_style,x
	and     #$80
	sta     L010c
	rts

eact_18	lda     enemy_movement_style,x
	bmi     ?f33
	lda     enemy_seg,x
	cmp     player_seg
	bne     ?f33
	lda     L02cc,x
	cmp     player_status
	bne     ?f33
	jsr     La33a
?f33
	rts


eact_20
	lda     enemy_along,x
	cmp     player_along
	bne     ?f34
	lda     enemy_seg,x
	cmp     player_seg
	bne     ?f34
	jsr     La343
?f34
	rts


eact_12
	jsr     rev_if_edge
L9e5f
?b35
	lda     enemy_movement_style,x
	ora     #$80
	sta     enemy_movement_style,x
	and     #$07
	cmp     #$04 ; fuzzball
	bne     ?f38
	lda     enemy_movement_style,x
	and     #$40
	bne     ?f36
	lda     #$81
	clv
	bvc     ?f37
?f36
	lda     enemy_seg,x
	sec
	sbc     #$01
	and     #$0f
	sta     enemy_seg,x
	lda     #$87
?f37
	sta     L02cc,x
	clv
	bvc     ?f40
?f38
	lda     enemy_movement_style,x
	and     #$40
	beq     ?f39
	lda     enemy_seg,x
	clc
	adc     #$01
	and     #$0f
	sta     enemy_seg,x
?f39
	lda     enemy_movement_style,x
	ldy     enemy_seg,x
	jsr     get_angle
	sta     L02cc,x
?f40
	rts



	.local
; Reverse motion direction if level open and we've run into an edge.
rev_if_edge
	lda     open_level
	beq     ?f3
	lda     enemy_movement_style,x
	and     #$40
	beq     ?f2
	lda     enemy_seg,x
	cmp     #$0e
	bcc     ?f1
	lda     enemy_movement_style,x
	and     #$bf
	sta     enemy_movement_style,x
?f1
	clv
	bvc     ?f3
?f2
	lda     enemy_seg,x
	bne     ?f3
	lda     enemy_movement_style,x
	ora     #$40
	sta     enemy_movement_style,x
?f3
	rts


	.local
; Enter with motion value in A, segment number in Y; returns with angle
; value ($0-$f) in A, |ed with $80.
get_angle
	and     #$40
	beq     ?f1
	dey
	tya
	and     #$0f
	tay
	lda     segment_angle,y
	clc
	adc     #$08
	and     #$0f
	clv
	bvc     ?f2
?f1
	lda     segment_angle,y
?f2
	ora     #$80
	rts


	.local
eact_1e
	ldy     #$04
	lda     L028a,x
	bmi     ?f16
	lda     enemy_along_lsb,x
	clc
	adc     spd_fuzzball_lsb
	sta     enemy_along_lsb,x
	lda     enemy_along,x
	adc     spd_fuzzball_msb
	sta     enemy_along,x
	cmp     player_along
	bcs     ?f1
	lda     player_along
	sta     enemy_along,x
	clv
	bvc     ?f4
?f1
	ldy     enemies_pending ; if no pending, rush to top
	beq     ?f3
	ldy     curlevel
	cpy     #$11
	bcs     ?f2 ; branch if level >= 17
	cmp     #$20
?f2
	clv
	bvc     ?f4
?f3
	rts
?f4
	bcs     ?f7
;L9f2c
	lda     fuzz_move_flg
	bpl     ?f5
	jsr     L9f81
	clv
	bvc     ?f6
?f5
	jsr     L9f8a
?f6
	clv
	bvc     ?f8
?f7
	jsr     ?f13
?f8
	clv
	bvc     ?f12
?f16
	jsr     L9c99 ; move away per speed for type Y
	cmp     #$80
	bcc     ?f11
;L9f4a
	bit     fuzz_move_flg
	bvc     ?f9 ; branch if level < 17
	jsr     L9f81
	clv
	bvc     ?f10
?f9
	jsr     L9f8a
?f10
	clv
	bvc     ?f12
?f11
	jsr     ?f13
?f12
	rts

?f13
	lda     enemy_along,x
	and     #$20
	beq     ?f15
	lda     pokey2_rand
;L9f69
	cmp     fuzz_move_prb
	bcc     ?f15
;L9f6e
	bit     fuzz_move_flg
	bvc     ?f14
	txa
	lsr     a
	bcc     L9f8a
	jsr     L9f81
	clv
	bvc     ?f15
?f14
	jsr     L9f8a
?f15
	rts





	.local
L9f81
	jsr     eact_24
	jsr     eact_16
	jmp     ?f4




L9f8a
	lda     enemy_movement_style,x
	and     #$bf
	bit     pokey1_rand
	bvc     ?f0
	ora     #$40
?f0
	sta     enemy_movement_style,x
?f4
	lda     open_level
	beq     ?f3
	lda     enemy_movement_style,x
	and     #$40
	bne     ?f1
	lda     enemy_seg,x
	cmp     #$0f
	bcs     ?f2
	clv
	bvc     ?f3
?f1
	lda     enemy_seg,x
	bne     ?f3
?f2
	lda     enemy_movement_style,x
	eor     #$40
	sta     enemy_movement_style,x
;L9fbc
?f3
	lda     #$66
	sta     pcode_pc
	jmp     L9e5f



	.local
eact_0e
	lda     #$01
	sta     L010c
	ldy     enemy_seg,x
	lda     spike_ht,y
	bne     ?f1
	lda     #$f1
	sta     spike_ht,y
?f1
	lda     enemy_along,x
	cmp     spike_ht,y
	bcs     ?f2
	sta     spike_ht,y
	lda     #$80
	sta     L039a,y
?f2
	lda     enemy_along,x
	cmp     #$20
	bcs     ?f3
	lda     L028a,x
	ora     #$80
	sta     L028a,x
	lda     #$20
	sta     enemy_along,x
	clv
	bvc     ?f4
?f3
	cmp     #$f2
	bcc     ?f4
	jsr     spiker_hop
	lda     #$f0
	sta     enemy_along,x
	lda     enemies_pending
	bne     ?f4
; If no enemies pending, turn it into a flipper-holding tanker
	lda     L028a,x
	and     #$fc
	ora     #$01
	sta     L028a,x
	lda     enemy_movement_style,x
	and     #$f8
	ora     #$02
	sta     enemy_movement_style,x
	lda     #$00
	sta     L010c
?f4
	rts



	.local
spiker_hop
	lda     #$00
	sta     L2d
	lda     #$0f
	sta     avl_spikers
	lda     pokey2_rand
	and     #$0f
	tay
?b1
	cpy     #$0f
	bne     ?f2
	lda     open_level
	bne     ?f4
?f2
	lda     spike_ht,y
	bne     ?f3
	lda     #$ff
?f3
	cmp     L2d
	bcc     ?f4
	sta     L2d
	sty     L29
?f4
	dey
	bpl     ?f5
	ldy     #$0f
?f5
	dec     avl_spikers
	bpl     ?b1
	lda     L29
	sta     enemy_seg,x
	clc
	adc     #$01
	and     #$0f
	sta     L02cc,x
	lda     L028a,x
	and     #$7f
	sta     L028a,x
	rts


	.local
; Enemy has reached the $20 point in the tube.  Handle it.
La06f
	lda     enemy_along,y
	sta     L29
	cmp     player_along
	bne     ?f1
	lda     enemy_movement_style,y
	and     #$07
	cmp     #$04 ; fuzzball
	beq     ?f1
	dec     enemies_top
	clv
	bvc     ?f2
?f1
	dec     enemies_in
?f2
	lda     #$00
	sta     enemy_along,y
	lda     enemy_movement_style,y
	and     #$07
	stx     L35
	tax
	dec     n_flippers,x
	ldx     L35
	lda     L028a,y
	and     #$03
	beq     ?f6
	sec
	sbc     #$01
	cmp     #$02
	bne     ?f3
	lda     #$04
?f3
	sta     L2b
	lda     enemy_seg,y
	sec
	sbc     #$01
	and     #$0f
	cmp     #$0f
	bcc     ?f4
	bit     open_level
	bpl     ?f4
	lda     #$00
?f4
	sta     L2a
	jsr     L9b07
	lda     L2d
	sta     pcode_pc
	dec     pcode_pc
	lda     #$00
	sta     pcode_run
	jsr     L994d
	beq     ?f6
	lda     L2a
	clc
	adc     #$02
	and     #$0f
	cmp     #$0f
	bne     ?f5
	bit     open_level
	bpl     ?f5
	lda     #$0e
?f5
	sta     L2a
	lda     L2b
	ora     #$40
	sta     L2b
	jsr     L994d
?f6
	rts

; See the comments on L9b3a for what this is.
; Spiker entry point.  Grow, reverse at $20, convert to tanker...
La0f7
	.byte   $0c ; 00: move per speed
	.byte   $0e ; 01: spike, reverse, convert to tanker
	.byte   $1a ; 02: branch conditional (if converted to tanker)
	.byte   $06 ; 03:   to 07
	.byte   $00 ; 04: done
	.byte   $06 ; 05: branch
	.byte   $ff ; 06:   to 00
; Entry point for "just move up".  Used for tankers, for flippers on some
; levels, in some cases for the pieces when a tanker splits...
	.byte   $0c ; 07: move per speed
	.byte   $00 ; 08: done
	.byte   $06 ; 09: branch
	.byte   $06 ; 0a:   to 07
; Flipper entry point: move 8 times, flip, repeat.  Don't move during flip.
	.byte   $02 ; 0b: store in L0298,x...
	.byte   $08 ; 0c:   ...08
	.byte   $0c ; 0d: move per speed
	.byte   $00 ; 0e: done
	.byte   $08 ; 0f: if --L0298,x then branch
	.byte   $0c ; 10:   to 0d
	.byte   $12 ; 11: start flip
	.byte   $00 ; 12: done
	.byte   $14 ; 13: continue/end flip
	.byte   $04 ; 14: if L010c == 0, skip to 17
	.byte   $06 ; 15: branch
	.byte   $11 ; 16:   to 12
	.byte   $06 ; 17: branch
	.byte   $0a ; 18:   to 0b
; Flipper entry point: flip constantly, moving for one tick between flips.
	.byte   $0c ; 19: move per speed
	.byte   $00 ; 1a: done
	.byte   $12 ; 1b: start flip
	.byte   $00 ; 1c: done
	.byte   $14 ; 1d: continue/end flip
	.byte   $0c ; 1e: move per speed
	.byte   $04 ; 1f: if L010c == 0, skip to 22
	.byte   $06 ; 20: branch
	.byte   $1b ; 21:   to 1c
	.byte   $06 ; 22: branch
	.byte   $18 ; 23:   to 19
; Flipper entry point: flips twice one way, three times the other, twice,
; three times, twice, three times, etc.  Move on every tick except the
; ones on which we start a flip.
	.byte   $0c ; 24: move per speed
	.byte   $00 ; 25: done
	.byte   $02 ; 26: store in L0298,x...
	.byte   $02 ; 27:   ...02
	.byte   $12 ; 28: start flip
	.byte   $00 ; 29: done
	.byte   $14 ; 2a: continue/end flip
	.byte   $0c ; 2b: move per speed
	.byte   $04 ; 2c: if L010c == 0, skip to 2f
	.byte   $06 ; 2d: branch
	.byte   $28 ; 2e:   to 29
	.byte   $00 ; 2f: done
	.byte   $08 ; 30: if --L0298,x then branch
	.byte   $27 ; 31:   to 28
	.byte   $16 ; 32: reverse direction
	.byte   $02 ; 33: store in L0298,x...
	.byte   $03 ; 34:   ...03
	.byte   $12 ; 35: start flip
	.byte   $00 ; 36: done
	.byte   $14 ; 37: continue/end flip
	.byte   $0c ; 38: move per speed
	.byte   $04 ; 39: if L010c == 0, skip to 3c
	.byte   $06 ; 3a: branch
	.byte   $35 ; 3b:   to 36
	.byte   $00 ; 3c: done
	.byte   $08 ; 3d: if --L0298,x then branch
	.byte   $34 ; 3e:   to 35
	.byte   $16 ; 3f: reverse direction
	.byte   $06 ; 40: branch
	.byte   $23 ; 41:   to 24
; Action 0c jumps here upon reaching top-of-tube.
	.byte   $02 ; 42: store in L0298,x...
	.byte   $04 ; 43:   ...04
	.byte   $18 ; 44: check and maybe grab player
	.byte   $00 ; 45: done
	.byte   $08 ; 46: if --L0298,x then branch
	.byte   $43 ; 47:   to 44
	.byte   $12 ; 48: start flip
	.byte   $00 ; 49: done
;La141
	.byte   $10 ; 4a: flip_top_accel -> L0298,x
	.byte   $b3 ; 4b:   (value for previous)
	.byte   $14 ; 4c: continue/end flip
	.byte   $1a ; 4d: if L010c == 0, branch
	.byte   $41 ; 4e:   to 42
	.byte   $08 ; 4f: if --L0298,x then branch
	.byte   $4b ; 50:   to 4c
	.byte   $06 ; 51: branch
	.byte   $48 ; 52:   to 49
; Flipper entry point: for levels where flippers ride spikes.
; Move every tick.
	.byte   $00 ; 53: done
	.byte   $0c ; 54: move per speed
	.byte   $1c ; 55: set L010c to enemy-above-spike-p
	.byte   $1a ; 56: if L010c == 0, branch
	.byte   $52 ; 57:   to 53
	.byte   $12 ; 58: start flip
	.byte   $00 ; 59: done
	.byte   $0c ; 5a: move per speed
	.byte   $14 ; 5b: continue/end flip
	.byte   $1a ; 5c: if L010c == 0, branch
	.byte   $52 ; 5d:   to 53
	.byte   $00 ; 5e: done
	.byte   $06 ; 5f: branch
	.byte   $5a ; 60:   to 5b
; Fuzzball entry point.
	.byte   $1e ; 61: fuzzball movement?
	.byte   $20 ; 62: check for enemy-touches-player death
	.byte   $00 ; 63: done
	.byte   $06 ; 64: branch
	.byte   $60 ; 65:   to 61
	.byte   $00 ; 66: done
; eact_1e sets pc to here under some circumstances; see L9fbc.
	.byte   $02 ; 67: store in L0298,x...
	.byte   $03 ; 68:   ...03
	.byte   $20 ; 69: check for enemy-touches-player death
	.byte   $00 ; 6a: done
	.byte   $08 ; 6b: if --L0298,x then branch
	.byte   $68 ; 6c:   to 69
	.byte   $14 ; 6d: continue/end flip
	.byte   $1a ; 6e: if L010c == 0, branch
	.byte   $60 ; 6f:   to 61
	.byte   $06 ; 70: branch
	.byte   $65 ; 71:   to 66
; Pulsar entry point.
	.byte   $10 ; 72: pulsar_speed -> L0298,x
	.byte   $b2 ; 73:   (value for previous)
	.byte   $22 ; 74: do pulsar motion
	.byte   $00 ; 75: done
	.byte   $08 ; 76: if --L0298,x then branch
	.byte   $73 ; 77:   to 74
	.byte   $26 ; 78: check if pulsing
	.byte   $1a ; 79: if not pulsing, branch
	.byte   $7e ; 7a:   to 7f
	.byte   $22 ; 7b: do pulsar motion
	.byte   $00 ; 7c: done
	.byte   $06 ; 7d: branch
	.byte   $77 ; 7e:   to 78
	.byte   $24 ; 7f: enemy attract to player
	.byte   $12 ; 80: start flip
	.byte   $00 ; 81: done
	.byte   $14 ; 82: continue/end flip
	.byte   $1a ; 83: if L010c == 0, branch
	.byte   $71 ; 84:   to 72
	.byte   $06 ; 85: branch
	.byte   $80 ; 86:   to 81
; Flipper entry point: flip away from player, move four ticks, repeat.
; Move on every tick except those on which we start flips.
	.byte   $24 ; 87: enemy attract to player
	.byte   $16 ; 88: reverse enemy direction
	.byte   $12 ; 89: start flip
	.byte   $00 ; 8a: done
	.byte   $0c ; 8b: move per speed
	.byte   $14 ; 8c: continue/end flip
	.byte   $04 ; 8d: if L010c == 0, skip to 90
	.byte   $06 ; 8e: branch
	.byte   $89 ; 8f:   to 8a
	.byte   $02 ; 90: store in L0298,x...
	.byte   $04 ; 91:   ...04
	.byte   $00 ; 92: done
	.byte   $0c ; 93: move per speed
	.byte   $08 ; 94: if --L0298,x then branch
	.byte   $91 ; 95:   to 92
	.byte   $06 ; 96: branch
	.byte   $86 ; 97:   to 87



	.local
; Handle shots
move_shots
	ldx     #$0b
	stx     loopidx
?loop
	ldx     loopidx
	lda     ply_shotpos,x
	beq     ?f4 ; branch if this shot doesn't exist
	cpx     #8 ; enemy or friendly?
	bcs     ?f5 ; branch if enemy shot
; Friendly shot.  Move it down the tube.  L02f2, if set, appears to slow
; the shot down, presumably so it doesn't go off the back wall before it
; gets a chance to hit a spiker.
	adc     #$09
;La1a0
	ldy     L02f2,x
	beq     ?f1
	sec
	sbc     #$04
?f1
	sta     ply_shotpos,x
; Check to see if it hit a spike.
	jsr     La1fa
	lda     ply_shotpos,x
	cmp     #$f0
	bcc     ?f2
; Shot went off back end of tube; destroy it
	dec     ply_shotcnt
	lda     #$00
	sta     ply_shotpos,x
?f2
	clv
	bvc     ?f4
; Enemy shot
?f5
	lda     L02e6,x ; enm_shot_lsb-8
	clc
	adc     enm_shotspd_lsb
	sta     L02e6,x ; enm_shot_lsb-8
	lda     ply_shotpos,x
	adc     enm_shotspd_msb
; Reached player's end of tube yet?
	cmp     player_along
	bcs     ?f3
; Yes, at this end of tube
	dec     enm_shotcnt
	jsr     La1e4 ; check to see if hit player
	lda     #$00
?f3
	sta     ply_shotpos,x
; Next shot
?f4
	dec     loopidx
	bpl     ?loop
	rts


	.local
; Called to see if enemy shot hit player.  Enemy shot number is in X,
; offset by 8 (which is why we see ply_shotseg,x here instead of the
; enm_shotseg,x we'd expect to).
La1e4
	lda     player_seg
	cmp     ply_shotseg,x
	bne     ?f1
	lda     player_status
	bmi     ?f1
	jsr     La34b
	lda     #$81
	sta     player_status
?f1
	rts



	.local
; Called to see if player shot hit a spike.
La1fa
	ldy     ply_shotseg,x
	lda     spike_ht,y
	beq     ?f3
	lda     ply_shotpos,x
	cmp     spike_ht,y
	bcc     ?f2
	cmp     #$f0
	bcc     ?f1
	lda     #$00
?f1
	sta     spike_ht,y
;La213
	inc     L02f2,x
	lda     #$c0
	sta     L039a,y
	jsr     sound_spike_shot
	ldx     #$ff
	lda     #$00
	sta     L2a
	sta     L2b
	lda     #$01
	sta     L29
	jsr     inc_score
	ldx     loopidx
;La22f
?f2
	lda     L02f2,x
	cmp     #$02
	bcc     ?f3
	lda     #$00
	sta     ply_shotpos,x
	dec     ply_shotcnt
?f3
	rts


	.local
; Check to see if player fires?
player_fire
	lda     player_status
	bmi     ?f8
	; Branch in play mode
	lda     play_state
	bmi     ?f4
	lda     L0106
	sta     L29
	ldx     #$0a
?b1
	lda     enm_shotpos,x
	beq     ?f3
	lda     enm_shotseg,x
	sec
	sbc     player_seg
	bpl     ?f2
	eor     #$ff
	clc
	adc     #$01
?f2
	cmp     #$02
	bcs     ?f3
	inc     L29
?f3
	dex
	bpl     ?b1
	lda     L29
	clv
	bvc     ?f5
?f4
	lda     zap_fire_debounce
	and     #$10 ; fire
?f5
	beq     ?f8
	ldx     #$07
?b6
	lda     ply_shotpos,x
	bne     ?f7
	inc     ply_shotcnt
	lda     player_along
	sta     ply_shotpos,x
	lda     player_seg
	sta     ply_shotseg,x
	lda     player_status
	sta     L02c0,x
	lda     #$00
	sta     L02f2,x
	jsr     sound_Lccea
	lda     player_along
	jsr     La463
	ldx     #$00
?f7
	dex
	bpl     ?b6
?f8
	rts



	.local
enm_shoot
	lda     player_status
	bmi     ?f5
	ldx     #$06
?b1
	lda     enemy_along,x
	beq     ?f4
	cmp     #$30
	bcc     ?f4
	lda     L028a,x
	and     #$40
	beq     ?f4
	dec     shot_delay,x
	bpl     ?f4
	inc     shot_delay,x
	lda     enemy_movement_style,x
	and     #$80
	bne     ?f4
;La2cc
	lda     pokey1_rand
	ldy     enm_shotcnt
	cmp     ?t1,y
	bcc     ?f4
;La2d6
	ldy     enm_shotmax
?b2
	lda     enm_shotpos,y
	bne     ?f3
	lda     enemy_along,x
	sta     enm_shotpos,y
	lda     enemy_seg,x
	sta     enm_shotseg,y
	lda     L02cc,x
	sta     L02c8,y
	lda     shot_holdoff
	sta     shot_delay,x
	jsr     sound_enemy_fire
	inc     enm_shotcnt
	ldy     #$00
?f3
	dey
	bpl     ?b2
?f4
	dex
	bpl     ?b1
?f5
	rts
; Chance of a new shot, indexed by number of existing shots.  See La2cc.
?t1
	.byte   $00
	.byte   $e0
	.byte   $f0
	.byte   $fa
	.byte   $ff


	.local
La309
	stx     loopidx
	lda     #$ff
	sta     L02f2,x
	tya
	sec
	sbc     #$04
	tay
	lda     enemy_seg,y
	sta     L2d
	lda     pokey2_rand
	and     #$07
	cmp     #$03
	bcc     ?f1
	lda     #$00
?f1
	pha
	clc
	adc     #$02
	jsr     La3ca
	jsr     La06f
	pla
	clc
	adc     #$05
	tax
	jsr     inc_score
	ldx     loopidx
	rts




	.local
La33a
	lda     #$05
	jsr     La352
	dec     player_status
	rts



	.local
La343
	lda     #$09
	bne     ?f1
pieces_death
	lda     #$07
	bne     ?f1
La34b
	lda     #$ff
?f1
	sta     L013b
	lda     #$01
La352
	sta     L2c
	lda     player_along
	sta     L29
	lda     player_seg
	sta     L2d
	jsr     sound_Lccb0
	jsr     La3d6
	lda     #$81
	sta     player_status
	lda     #$01
	sta     L013c
	rts


	.local
La36f
	jsr     sound_Lccc1
	lda     enm_shotpos,y
	sta     L29
	lda     enm_shotseg,y
	sta     L2d
	lda     #$00
	jsr     La3d4
	lda     #$00
	sta     enm_shotpos,y
	dec     enm_shotcnt
	lda     #$ff
	sta     L02f2,x
	rts


	.local
La38e
	lda     #$ff
	sta     L02f2,x
	tya
	sec
	sbc     #$04
	tay
; Kill enemy?  (Guess based on zapper.)
La398
	lda     enemy_movement_style,y
	and     #$c0
	cmp     #$c0
	beq     ?f1
	lda     enemy_seg,y
	clv
	bvc     ?f2
?f1
	lda     enemy_seg,y
	sec
	sbc     #$01
	and     #$0f
?f2
	sta     L2d
	lda     #$00
	jsr     La3ca
	jsr     La06f
	lda     enemy_movement_style,y
	and     #$07
	tay
	ldx     ?t1,y
	jmp     inc_score
?t1
	.byte   01
	.byte   02
	.byte   03
	.byte   04
	.byte   01


	.local
La3ca
	pha
	jsr     sound_Lccc1
	lda     enemy_along,y
	sta     L29
	pla
La3d4
	sta     L2c
La3d6
	stx     L35
	sty     L36
	lda     #$00
	sta     L2a
	sta     L2b
	ldx     #$07
;La3e2
?b1
	lda     L030a,x
	beq     ?f3
;La3e7
	lda     L0312,x
	cmp     L2a
	bcc     ?f2
	sta     L2a
	stx     L2b
?f2
	dex
	bpl     ?b1
	dec     L0116
	ldx     L2b
?f3
	lda     #$00
	sta     L0312,x
	lda     L2c
;La401
	sta     L0302,x
	lda     L29
	sta     L030a,x
	lda     L2d
	sta     L02fa,x
	inc     L0116
	ldx     L35
	ldy     L36
	rts



	.local
La416
	lda     L0116
	beq     ?f4
	lda     #$00
	sta     L0116
	ldx     #$07
?b1
	lda     L030a,x
	beq     ?f3
	lda     L0312,x
	ldy     L0302,x
	clc
	adc     ?t2,y
	sta     L0312,x
	cmp     ?t1,y
	bcc     ?f2
	lda     #$00
	sta     L030a,x
	clv
	bvc     ?f3
?f2
	inc     L0116
?f3
	dex
	bpl     ?b1
?f4
	rts


?t1
	.byte	$10
	.byte	$15
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$10
?t2	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03




	.local
; Check player shots to see if they hit anything.
pshot_hit
	ldx     #$07
?b1
	lda     ply_shotpos,x
	beq     ?f2
	jsr     La463
?f2
	dex
	bpl     ?b1
	rts


; Curious: Lab is only referenced once in the code...

	.byte	$ab	; XXX ??? a462	



	.local
; Check to see if a player shot hit an enemy or enemy shot.  X is player
; shot number, A is player shot position.
La463
	sta     L2e
	ldy     #$0a ; check enemies as well as their shots
?b1
	lda     enm_shotpos,y
	beq     ?f12
	cmp     L2e
	bcc     ?f2
	sbc     L2e
	clv
	bvc     ?f3
?f2
	lda     L2e
	sec
	sbc     enm_shotpos,y
?f3
	cpy     #$04 ; enemy, or enemy shot?
	bcs     ?f5
	cmp     La7
	bcs     ?f4
	lda     enm_shotseg,y
	eor     ply_shotseg,x
	bne     ?f4
	jsr     La36f
?f4
	clv
	bvc     ?f12
?f5
	pha
	sty     L38
	lda     pending_vid+60,y ; enemy_movement_style - 4
	and     #$07
	tay
	pla
	cmp     hit_tol,y
	bcs     ?f11
	cpy     #$04 ; fuzzball
	bne     ?f7
	ldy     L38
	lda     enm_shotpos,y ; enemy_along - 4
	cmp     player_along
	beq     ?f6
	lda     ply_shotseg,x
	cmp     enm_shotseg,y ; enemy_seg - 4
	bne     ?f6
	lda     L02cc-4,y
	bpl     ?f6
	jsr     La309
?f6
	clv
	bvc     ?f11
?f7
	ldy     L38
	lda     L02cc-4,y
	bpl     ?f8
	lda     enm_shotseg,y ; enemy_seg - 4
	cmp     L02c0,x
	beq     ?f10
	bne     ?f9
?f8
	lda     enm_shotpos,y ; enemy_along - 4
	cmp     player_along
	beq     ?f11
?f9
	lda     enm_shotseg,y ; enemy_seg - 4
	cmp     ply_shotseg,x
	bne     ?f11
?f10
	stx     loopidx
	jsr     La38e
	ldx     loopidx
?f11
	ldy     L38
?f12
	dey
	bmi     ?f13
	jmp     ?b1
?f13
	lda     L02f2,x
	cmp     #$ff
	bne     ?f14
	lda     #$00
	sta     ply_shotpos,x
	dec     ply_shotcnt
	sta     L02f2,x
?f14
	rts



	.local
La504
	lda     player_status
	bpl     ?f10
	lda     ply_shotcnt
	ora     enm_shotcnt
	ora     L0116
	bne     ?f9
	ldx     max_enm
?b1
	lda     enemy_along,x
	beq     ?f4
	clc
	adc     #$0f
	bcs     ?f2
	cmp     #$f0
?f2
	bcc     ?f3
	lda     #$00
?f3
	sta     enemy_along,x
?f4
	dex
	bpl     ?b1
	ldx     curplayer
	lda     players_lives,x
	cmp     #$01
	bne     ?f6
	lda     #$00
	sta     L010f
	lda     #1
	sta     L0114



	lda     y_scale_2_l
	sec
	sbc     #$20
	sta     y_scale_2_l



	lda     y_scale_2_h
	sbc     #$00
	sta     y_scale_2_h
	cmp     #$fa
	clc
	bne     ?f5
	sec
?f5
	clv
	bvc     ?f7
?f6
	lda     player_along
	clc
	adc     #$0f
	sta     player_along
	bcs     ?f7
	cmp     #$f0
?f7
	bcc     ?f9
	lda     #_game_state_6
	sta     game_state
	jsr     clear_shots
	lda     enemies_in
	clc
	adc     enemies_top
	clc
	adc     enemies_pending
	cmp     #$3f
	bcc     ?f8
	lda     #$3f
?f8
	sta     enemies_pending
?f9
	clv
	bvc     ?f15
; Apparent anti-piracy provision.  If either checksum of the video RAM that
; holds the copyright message is wrong, and the P1 score is 17xxxx,
; increment one byte of page zero, based on the low two digits of the score.
; See also Lb1df and Lb27d.
;La581
?f10
	lda     copyr_vid_cksum2
	ora     copyr_vid_cksum1
	beq     ?f11
	lda     #$17
	cmp     p1_score_h
	bcs     ?f11
	ldx     p1_score_l
.if PIRATE
	nop
	nop
.else
	inc     page0,x
.endif
; End apparent anti-piracy code
?f11
	lda     L0106
	bne     ?f15
	lda     enemies_pending
	ora     L0116
	bne     ?f14
	ldy     max_enm
?b12
	lda     enemy_along,y
	beq     ?f13
	cmp     #$11
	bcs     ?f14
?f13
	dey
	bpl     ?b12
	jsr     La5cb
	jsr     clear_shots
?f14
	lda     zap_fire_debounce
	and     #$60 ; start1, start2
	beq     ?f15
	; Branch in attract mode
	bit     play_state
	bpl     ?f15
	lda     coinage_shadow
	and     #$43
	cmp     #$40
	bne     ?f15
	jsr     La5cb
?f15
	rts





	.local
; Level "over"; start zooming down tube.
La5cb
	lda     #_game_state_zoom
	sta     game_state
	lda     L0106
	ora     #$80
	sta     L0106
	lda     #$00
	sta     zoomspd_lsb
	sta     along_lsb
	sta     L5c
	sta     L0123
	lda     #$02
	sta     zoomspd_msb
; Check to see if there are any spikes of nonzero height.
	ldx     #$0f
?b1
	lda     spike_ht,x
	beq     ?f2
	inc     L0123
?f2
	dex
	bpl     ?b1
	lda     L0123
	beq     ?f3
; If there are any spikes, check level.
	lda     curlevel
	cmp     #$07
	bcs     ?f3
; If level is low enough and there are spikes, display "AVOID SPIKES".

	; Going into _game_state_countdown; countdown_timer is in binary
	lda     #30 ; time delay
	sta     countdown_timer

	; Set game status to non-player input mode
	lda     #_game_state_countdown
	sta     game_state
	lda     #_game_state_zoom ; new game_state
	sta     next_game_state
	lda     #$80
	sta     L0123
?f3
	lda     #$ff
	sta     zap_running
	rts






	.local
game_state_victory
	lda     L010e
	sta     L010d
	ldx     #$0f
	stx     loopidx
?loop
	ldx     loopidx
	lda     enemy_movement_style,x
	bne     ?f3
	lda     L010e
	beq     ?f2
	jsr     La65b
?f2
	clv
	bvc     ?f4
?f3
	jsr     La6a9
	jsr     La721
	lda     #$ff
	sta     L010d
?f4
	dec     loopidx
	bpl     ?loop
	lda     timectr
	and     #$01
	bne     ?f5
	lda     L010e
	beq     ?f5
	dec     L010e
?f5
	lda     L010d
	bne     ?f6
	lda     #_game_state_got_high_score	; Game state - entry of high score into high score list
	sta     game_state
?f6
	rts



	.local
La65b
	lda     timectr
	and     #$00
	bne     ?f2
	lda     #$80
	sta     pending_vid+32,x
	sta     enemy_movement_style,x
	sta     enemy_along_lsb+4,x
	lda     pokey2_rand
	sta     L02c0+3,x
	jsr     plusminus_7
	sta     xout_h_array+9,x
	lda     pokey1_rand
	sta     enemy_along+4,x
	jsr     plusminus_7
; Why this rigamarole instead of just "lda #$00" or "and #$fe" before
; calling plusminus_7, I have no idea.
	bmi     ?f1
	eor     #$ff
	clc
	adc     #$01
?f1
	sta     yout_h_array+9,x
	lda     pokey1_rand
	sta     L0302+1,x
	jsr     plusminus_7
	sta     L035a+9,x
	jsr     sound_Lccc1
?f2
	rts


	.local

; Convert a random number in A to -7..7
;
; Return with a random number in A, from 00-07 (if input A low bit is clear)
; or $f9-$00 (if input A low bit is set).
plusminus_7
	lsr     a
	lda     pokey2_rand
	and     #$07
	bcc     ?f1
	eor     #$ff
	clc
	adc     #$01
?f1
	rts


	.local
La6a9
	lda     enemy_along+4,x
	clc
	adc     pending_seg+32,x
	sta     pending_seg+32,x
	lda     yout_h_array+9,x
	bmi     ?f2
	adc     enemy_movement_style,x
	cmp     #$f0
	bcc     ?f1
	lda     #$00
?f1
	clv
	bvc     ?f3
?f2
	adc     enemy_movement_style,x
	cmp     #$10
	bcs     ?f3
	lda     #$00
?f3
	tay
	lda     L02c0+3,x
	clc
	adc     pending_seg,x
	sta     pending_seg,x
	lda     xout_h_array+9,x
	bmi     ?f5
	adc     pending_vid+32,x
	cmp     #$f0
	bcc     ?f4
	ldy     #$00
?f4
	clv
	bvc     ?f6
?f5
	adc     pending_vid+32,x
	cmp     #$10
	bcs     ?f6
	ldy     #$00
?f6
	sta     pending_vid+32,x
	lda     L0302+1,x
	clc
	adc     pending_vid,x
	sta     pending_vid,x
	lda     L035a+9,x
	bmi     ?f8
	adc     enemy_along_lsb+4,x
	cmp     #$f0
	bcc     ?f7
	ldy     #$00
?f7
	clv
	bvc     ?f9
?f8
	adc     enemy_along_lsb+4,x
	cmp     #$10
	bcs     ?f9
	ldy     #$00
?f9
	sta     enemy_along_lsb+4,x
	tya
	sta     enemy_movement_style,x
	rts




	.local
La721
	lda     #$fd
	sta     L29
	lda     L02c0+3,x
	ldy     xout_h_array+9,x
	jsr     La75d
	sta     L02c0+3,x
	tya
	sta     xout_h_array+9,x
	lda     enemy_along+4,x
	ldy     yout_h_array+9,x
	jsr     La75d
	sta     enemy_along+4,x
	tya
	sta     yout_h_array+9,x
	lda     L0302+1,x
	ldy     L035a+9,x
	jsr     La75d
	sta     L0302+1,x
	tya
	sta     L035a+9,x
	lda     L29
	bne     ?f1
	sta     enemy_movement_style,x
?f1
	rts





	.local
La75d
	sty     L2b
	bit     L2b
	bmi     ?f1
	sec
	sbc     ?c1
	sta     L2a
	lda     L2b
	sbc     #$00
	bcc     ?f2
	clv
	bvc     ?f3
?f1
	clc
	adc     ?c1
	sta     L2a
	lda     L2b
	adc     #$00
	bcc     ?f3
?f2
	inc     L29
	lda     #$00
	sta     L2a
?f3
	tay
	lda     L2a
	rts
; XXX Why not an immediate?
?c1
	.byte	$20





	.local
La789
	ldx	#$0f
?b1
	lda     #$00
	sta     enemy_movement_style,x
	dex
	bpl     ?b1
	lda     #$20
	sta     L010e
	sta     L010d
	lda     #_game_mode_04	; set mode to end-game high score victory explosion
	sta     game_mode
	lda     #$00
	sta     y_out_offset_l
	sta     y_out_offset_h
	rts



	.local
; Subtract Y from A, returning (in A) the signed difference.  If the level
; is closed, do wraparound processing; if open, don't.
La7a6
	sty     L2a
	sec
	sbc     L2a
	sta     L2a
	bit     open_level
	bmi     ?f1
	and     #$0f
	bit     ?c1
	beq     ?f1
	ora     #$f8
?f1
	rts
?c1
; XXX Why not an immediate?
	.byte	08
	





	.local
La7bd
	ldx     #7
	lda     #0
?loop
	sta     L03fe,x
	dex
	bpl     ?loop

	lda     #$f0
	sta     L03fe+7	; strange, we just set this to 0
	lda     #$ff
	sta     L0115
	rts



	.local
; Special state
La7d2
	lda     L0115
	beq     ?f9
	lda     #$00
	sta     L29
; There appears to be a loop beginning here
; for (loopidx=7;loopidx>=0;loopidx--) running from here through a827.  I'm not sure
; just what goes on inside it, yet, though.
	ldx     #$07
	stx     loopidx
?loop
	ldx     loopidx
	lda     L03fe,x	; initialized in La7bd, 8 bytes set to [0,0,0,0,0,0,0,$f0]
	beq     ?f5
	sec
	sbc     #$07
	bcc     ?f2
	cmp     #$10
?f2
	bcs     ?f4
	ldy     L0115
	bpl     ?f3
	lda     #$f0
	clv
	bvc     ?f4
?f3
	lda     #$00
?f4
	clv
	bvc     ?f8
?f5
	ldy     L0115
	bpl     ?f8
	txa
	clc
	adc     #$01
	cmp     #$08
	bcc     ?f6
	lda     #$00
?f6
	tay
	lda     L03fe,y	; initialized in La7bd, 8 bytes set to [0,0,0,0,0,0,0,$f0]
	beq     ?f8
	cmp     #$d5
	bcs     ?f7
	lda     #$f0
	clv
	bvc     ?f8
?f7
	lda     #$00
?f8
	sta     L03fe,x
	ora     L29
	sta     L29
	dec     loopidx
	bpl     ?loop
	lda     L29
	bne     ?f9
	sta     L0115
?f9
	rts



	.local
reset_zapper
	lda     #0
	sta     zap_uses
	sta     zap_running
	rts



	.local
check_zap
	; Branch in attract mode
	lda     play_state
	bpl     ?f5
	; If zapper is running, branch to the timing code
	lda     zap_running
	bne     ?f3

	; If player is dead, skip this
	lda     player_status
	bmi     ?f2

	; If the zap button is not pressed, skip
	lda     zap_fire_new
	and     #$08 ; zap
	beq     ?f2

	; If the zap button has been used twice already, skip
	lda     zap_uses
	cmp     #$02
	bcs     ?f1

	; Count uses
	inc     zap_uses

	; Start the zap timer
	lda     #$01
	sta     zap_running

?f1
	; Ack the zap button press
	lda     zap_fire_new
	and     #$77 ; clear zap
	sta     zap_fire_new

?f2
	clv
	bvc     ?f5	; Always branch


?f3
	; Inc. the zap timer
	inc     zap_running

	; Look up the zapper run-length table to see if it
	; is time to end the current zapper session. (The table at
	; ?zap_length controls the length of time the zapper runs for the
	; first use and the second use.

	ldx     zap_uses
	lda     zap_running
	cmp     ?zap_length,x
	bcc     ?f4

	; Zap timed out
	lda     #0
	sta     zap_running
?f4
	jsr     La888
?f5
	; Clear the sign bit
	lda     zap_fire_new
	and     #$7f
	sta     zap_fire_new
	rts

?zap_length
	.byte   $00 ; Indexed by zapper use count
	.byte   $13
	.byte   $05
	.byte   $00
	.byte   $00






	.local
La888
	lda     zap_running
	cmp     #$03
	bcc     ?f2
	and     #$01
	bne     ?f2
	ldy     max_enm
?b1
	lda     enemy_along,y
	bne     ?f3
	dey
	bpl     ?b1
	lda     #$00
	sta     zap_running
?f2
	rts
?f3
	lda     L028a,y
	and     #$fc
	sta     L028a,y
	jmp     La398



; XXX
.if (VER=1)|(VER=2)
	.byte   $b2	; a8af
.endif
.if (VER=3)
	.byte   $e1	; a8af
.endif

coinage_msgs
	.byte   _msg_free_play ; FREE PLAY
	.byte   _msg_1_coin_2_plays ; 1 COIN 2 PLAYS
	.byte   _msg_1_coin_1_play ; 1 COIN 1 PLAY
	.byte   _msg_2_coins_1_play ; 2 COINS 1 PLAY


	.local
La8b4
	lda     #$01
	sta     curscale	; b scale
	jsr     vapp_scale_b
	ldy     #_colidx_score
	jsr     vapp_setcolor
	; Branch in play mode
	lda     play_state
	bmi     ?f2
	ldx     #_msg_game_over ; "GAME OVER"
	lda     timectr
	and     #$20
	bne     ?f1
	ldx     #_msg_insert_coins ; "INSERT COINS"
	lda     credits
	beq     ?f1
	bit     La2
	bmi     ?f1
	ldx     #_msg_press_start ; "PRESS START"
?f1
	jsr     vapp_msg
	; Append a vcentre to the display list
	jsr     vapp_vcentre_20
	lda     char_jsrtbl
	sta     vecram_2fa6
	sta     vecram_2fa8
.if VER=3
La8e7
.endif
	jsr     show_coin_stuff
?f2
	lda     #$01
	ldy     #$00
	jsr     show_player_stuff
	; Branch in play mode
	bit     play_state
	bmi     ?f3
	lda     p2_score_l
	ora     p2_score_m
	ora     p2_score_h
	clv
	bvc     ?f4
?f3
	lda     twoplayer
?f4
	beq     ?f5
	lda     #$01
	tay
	jsr     show_player_stuff
?f5
	; Are we in self-test screen with diagonal lines and character set
	lda     game_state
	cmp     #test_state_diag_grid
	beq     ?f8
	lda     #$1d
	sta     ptr1_l
	lda     #$07
	sta     ptr1_h
	ldx     Lcde4
	jsr     La9d7
; Checksum the code which displays the copyright message; see Laace
; See also Lc8f5.
;La91c
	ldy     #$0a
	lda     #$a7
?b6
	eor     Laace,y
	dey
	bpl     ?b6
	sta     copyr_disp_cksum1
;La929
	ldx     Lcde5
	lda     #$02
	sta     L38
?b7
	ldy     L38
	lda     hs_initials_1,y
	asl     a
	tay
	lda     ltr_jsrtbl,y
	sta     vecram_2f60,x
	inx
	inx
	dec     L38
	bpl     ?b7
?f8
	; Append a vjsr vecram_2f60 to the display list
	ldax_im	vecram_2f60
	jsr     vapp_vjsr_AX

	lda     L0123
	bpl     ?f9
	ldx     #_msg_avoid_spikes ; "AVOID SPIKES"
	jsr     vapp_msg
?f9
	lda     game_state
	cmp     #_game_state_zoom_to_next_level
	bne     ?f11
	; Branch in attract mode
	lda     play_state
	bpl     ?f11
	; Did the player choose to start out on the first level?
	ldx     curplayer
	lda     p1_startchoice,x
	beq     ?f10
	; No
	ldx     #_msg_bonus2 ; "BONUS "
	jsr     vapp_msg
	; Get the start level choice number the player selected. Note: 
	; Choice numer, not level number
	ldy     curplayer
	ldx     p1_startchoice,y
	jsr     vapp_startbonus
?f10
	ldx     #_msg_superzapper_recharge ; "SUPERZAPPER RECHARGE"
	jsr     vapp_msg
	ldx     #_msg_level2 ; "LEVEL"
	jsr     vapp_msg
?f11
	rts




	.local

; Indexed by player number; see La9ce
?t1	.byte	$42
	.byte	$45

; On entry, A=1 and Y=player number
show_player_stuff
	ldx     game_state
	cpx     #_game_state_4
	sty     L2b
	cpy     curplayer
	bne     ?f2
	; Branch in attract mode
	bit     play_state
	bpl     ?f2
	lda     #$00
?f2
	ora     #$70
;La991
	ldx     Lcdde,y
	sta     vecram_2f60,x
;La997
	ldx     Lcde0,y
	lda     players_lives,y
	sta     L38
	beq     ?f3
	cpy     curplayer
	bne     ?f3
	dec     L38
?f3
	ldy     #$01
?b4
	lda     L3284
	cpy     L38
	bcc     ?f5
	beq     ?f5
	lda     L3286
?f5
	sta     vecram_2f60,x
	inx
	inx
	iny
	cpy     #$07
	bcc     ?b4
	ldy     L2b
	lda     game_state
	cmp     #_game_state_4
	bne     ?f6
	cpy     curplayer
	bne     ?f9
?f6
;La9cb
	ldx     Lcde2,y
;La9ce
	lda     ?t1,y
	sta     ptr1_l		; storing $42 or $45 dep. on player #
	lda     #$00
	sta     ptr1_h

La9d7
	ldy     #$02
	sty     L2a
	sec
?b7
	php
	ldy     #$00
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	plp
	jsr     La9fc
	lda     L2a
	bne     ?f8
	clc
?f8
	ldy     #$00
	lda     (ptr1),y
	jsr     La9fc
	dec     ptr1_l
	dec     L2a
	bpl     ?b7
?f9
	rts





	.local
La9fc
	and     #$0f
	tay
	beq     ?f1
	clc
?f1
	bcs     ?f2
	iny
?f2
	php
	tya
	asl     a
	tay
	lda     char_jsrtbl,y
	sta     vecram_2f60,x
	inx
	inx
	plp
	rts






	.local
; Sets up the header for the text at the top of the screen.  Plugs in the
; level number, but none of the other variable pieces.
draw_header
	ldx     twoplayer	; 0 or 1
	; Is a player controlling?
	; Branch in play mode
	bit     play_state
	bmi     ?f1	; Yes

	; Is the player 2 score non-zero
	lda     p2_score_l
	ora     p2_score_m
	ora     p2_score_h
	beq     ?f1

	; Select 2 player
	ldx     #1

?f1
	; Set the vidptr to point to vecram_2f60
	lda     #<vecram_2f60
	sta     vidptr_l
	lda     #>vecram_2f60
	sta     vidptr_h


;Laa2b
	; Get the length of the sequence, based on 1 or 2 player
	lda     hdr_template_len_table,x
	tay

	sec
	adc     vidptr_l

	; A vidptr_l + template_len + 1
	pha

	; Copy [backwards] the template to *vidptr
	; Y is the template_len
?b2
	lda     hdr_template,y
	sta     (vidptr),y
	dey
	bne     ?b2


	; Copy the first byte
	lda     hdr_template,y
	sta     (vidptr),y


	; Branch if not player controlling
	lda     play_state
	bpl     ?f3

	; 2fa6 holds the vjsr for the tens digit of the level number
	lda     #>vecram_2fa6
	sta     vidptr_h
	lda     #<vecram_2fa6
	sta     vidptr_l

	; Append the ones digit
	lda     curlevel
	clc
	adc     #1
	jsr     vapp_2dig_bin

?f3
	; Update the vidptr
	pla
	sta     vidptr_l

	; Append a vrts to the display list
	jmp     vapp_vrts



	.local
game_mode_msg_play
	ldx     #_msg_play ; "PLAY"
	jsr     vapp_msg
	jmp     ?f1



game_mode_msg_game_over
	lda     #$30
	ldx     #_msg_game_over ; "GAME OVER"
	jsr     vapp_msg_at_y



?f1
	jsr     show_plyno
.if (VER=1)|(VER=2)
	jmp     La8b4
.endif
.if VER=3
	jmp     La8e7
.endif


	.local
game_mode_msg_press_start
	jsr     La8b4
	lda     #$00
	ldx     #_msg_press_start ; "PRESS START"
	jmp     vapp_msg_at_y



	.local
game_mode_msg_2_credit_minimum
	lda     #$00
	ldx     #_msg_2_credit_minimum ; "2 CREDIT MINIMUM"
	jsr     vapp_msg_at_y
	lda     timectr
	and     #$1f
	cmp     #$10
	bcs     ?f1
	lda     #$e0
	ldx     #_msg_insert_coins ; "INSERT COINS"
	jsr     vapp_msg_at_y
?f1
	jmp     La8b4



	.local
; show PLAYER and current player number
show_plyno
	ldx     #_msg_player ; "PLAYER "
	jsr     vapp_msg
Laa97
	lda     #$00
	jsr     vapp_setscale
	ldx     curplayer
Laa9e

	; Append X+1
	inx
	stx     L61
	; Append 2 digits
	lda     #L61
	ldy     #1	; 1 pair of digits
	jmp     vapp_digits



	.local
show_coin_stuff
	lda     coinage_shadow
	and     #$03 ; coinage
	tax
	lda     coinage_msgs,x
	tax
	jsr     vapp_msg
	dec     L016e
	lda     optsw2_shadow
	and     #$01 ; 2-credit minimum
	beq     ?f1
	lda     timectr
	and     #$20 ; flash
	bne     ?f1
	ldx     #_msg_2_credit_minimum ; "2 CREDIT MINIMUM"
	jsr     vapp_msg
	clv
	bvc     ?f2
?f1
	jsr     Laeca
?f2
Laace
	ldx     #_msg_copyright ; "(c) MCMLXXX ATARI"
	jsr     vapp_msg
	ldx     #_msg_credits ; "CREDITS "
	jsr     vapp_msg
	; If the number of game credits exceed $28 (40), then reduce it
	; back down to 40.

	lda     credits
	cmp     #$28 ; 40
	bcc     ?f3
	lda     #$28 ; 40
	sta     credits
?f3
	jsr     vapp_2dig_bin
	lda     uncredited
	beq     ?f4
	;ldax_my	?l1
	lda	?l1+1
	ldx	?l1
	; Append a vjsr vg_sub_char_onehalf to the display list
	jsr     vapp_vjsr_AX
?f4
	rts

?l1	.word	vg_sub_char_onehalf ; 1/2






	.local
; Converts number in accumulator (binary) to BCD, storing two-digit BCD
; in L29 (and leaving it in L2c) on return.  Discards the hundreds digit.
bin_to_bcd
	sed
	sta     L29
	lda     #$00
	sta     L2c
	ldy     #$07
?b1
	asl     L29
	lda     L2c
	adc     L2c
	sta     L2c
	dey
	bpl     ?b1
	cld
	sta     L29
	rts





	.local

;
; vapp_vcentre_20
;
;   Append a vcentre to vidptr
;
; (why $20? who knows.) I suspect the the 20 is a marker that can be
; searched for.
;

vapp_vcentre_20
	lda     #$20
	ldx     #_vg_opc_vcentre
	jmp     vapp_A_X
	.tail




	.local
vapp_msg
	lda     Ld121+1,x
vapp_msg_at_y
	stx     L35
	sta     L2b
	ldy     L35
	lda     (strtbl),y
	sta     ptr1_l
	iny
	lda     (strtbl),y
	sta     ptr1_h
; If we're displaying the copyright message, save the location in video RAM
; where it's displayed, for the checksumming code at Lb1df and Lb27d.
	cpx     #_msg_copyright ; "(c) MCMLXXX ATARI"
	bne     ?f1
	lda     vidptr_l
	sta     copyr_vid_loc
	lda     vidptr_h
	sta     copyr_vid_loc+1
?f1
	ldy     #$00
	lda     (ptr1),y
	sta     L2a
	; Append a vcentre to the display list
	jsr     vapp_vcentre_20
Lab3b
	; Set color and intensity to 0
	lda     #0
	sta     draw_z

	lda     #$01
	sta     curscale	; b scale
	jsr     vapp_scale_b
	lda     L2a		; X coord
	ldx     L2b		; Y coord
	jsr     vapp_ldraw_XY
	ldy     L35
	lda     (strtbl),y
	sta     ptr1_l
	iny
	lda     (strtbl),y
	sta     ptr1_h
	ldx     L35
	lda     Ld121,x
	pha
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	tay		; Y is the color index
	jsr     vapp_setcolor
	pla
	and     #$0f
	jsr     vapp_setscale
	ldy     #$01
	lda     #$00
	sta     L2a
?b2
	lda     (ptr1),y
	sta     L2b
	and     #$7f
	iny
	sty     L2c
	tax
	lda     char_jsrtbl,x
	ldy     L2a
	sta     (vidptr),y
	iny
	lda     char_jsrtbl+1,x
	sta     (vidptr),y
	iny
	sty     L2a
	ldy     L2c
	bit     L2b
	bpl     ?b2
	ldy     L2a
	dey
	jmp     inc_vidptr





; Append a message.  X holds message number, A holds delta-x from current
; position (delta-y is zero).
Lab98
	stx     L35
	sta     L2a
	lda     #$00
	sta     L2b
	beq     Lab3b	; Always branch



	.local

; Initialize the high-score list if either of the please-init bits is set.
maybe_init_hs
	jsr     check_settings
	lda     hs_initflag
	and     #$03
	beq     ?f5

; Initialize the low five scores on the high-score list, and if the
; please-init bits are set, the upper three as well.
init_hs
	jsr     check_settings
	lda     #$08
	sta     L0100
	; Is the highest score 0?
	lda     hs_score_1
	ora     hs_score_1+1
	ora     hs_score_1+2
	bne     ?f1
	jsr     hs_needs_init
?f1
	ldx     #$17
	lda     hs_initflag
	and     #$01
	bne     ?l2
	; Load from ROM the initials of the bottom 5 high score into the
	; high score list
	ldx     #$0e
?l2
	lda     ?t1,x
	sta     hs_initials_8,x
	dex
	bpl     ?l2
	ldx     #$17
	lda     hs_initflag
	and     #$02
	bne     ?l3
	; Set the last five high scores to "10101"
	ldx     #$0e
?l3
	lda     #$01
	sta     hs_score_8,x
	dex
	bpl     ?l3
	lda     hs_initflag
	and     #$03
	beq     ?f4
	lda     optsw2_shadow
	and     #$f8
	sta     life_settings
	lda     diff_bits
	and     #$03 ; difficulty
	sta     diff_settings
?f4
	lda     hs_initflag
	and     #$fc
	sta     hs_initflag
?f5
	rts

; Default high score initials.
; Bytes are reversed compared to the order they're displayed in.
?t1
	.byte	$07, $04, $01	; BEH
	.byte	$0f, $09, $0c	; MJP
	.byte	$0b, $03, $12	; SDL
	.byte	$13, $05, $03	; DFT
	.byte	$07, $0f, $0c	; MPH
	.byte	$11, $11, $11	; RRR
	.byte	$12, $04, $03	; DES
	.byte	$03, $09, $04	; EJD






	.local
check_settings
	jsr     read_optsws
	lda     optsw2_shadow
	and     #$f8 ; initial lives & points per life
;Lac20
	cmp     life_settings
	bne     ?f1
	lda     diff_bits
	and     #$03 ; difficulty
	cmp     diff_settings
?f1
	beq     ?f2
hs_needs_init
	lda     hs_initflag
	ora     #$03
	sta     hs_initflag
?f2
	rts




	.local
game_state_16
	; Mark player dead?
	lda     play_state
	and     #$bf
	sta     play_state
	lda     coinage_shadow
	and     #$43
	cmp     #$40
	bne     ?f1
	jsr     clear_players_scores
?f1
	jsr     Lddfb
	lda     #$00
	sta     L0601
	ldx     twoplayer
	beq     ?l2
	ldx     #$03
?l2
	lda     p1_score_h,x	; p1_score_h or p2_score_h, depending on X
	sta     L2c
	lda     p1_score_m,x	; p1_score_m or p2_score_m, depending on X
	sta     L2d
	lda     p1_score_l,x	; p1_score_l or p2_score_l, depending on X
	sta     L2e
	txa
	and     #$01
	sta     L36
	lda     #$00
	sta     L2b
	lda     #$1a
	sta     L2a
	sta     L29
	lda     #0
	sta     hs_timer
	ldy     #$fd
?b3
	lda     L061e+2,y
	cmp     L2c
	bne     ?f5
	lda     L061e+1,y
	cmp     L2d
	bne     ?f5
	cpy     #$52
	bcc     ?f4
	lda     L061e,y
	cmp     L2e
	clv
	bvc     ?f5
?f4
	sec
?f5
	bcs     ?f10
?b6
	cpy     #$e8
	bcc     ?f7
	lda     L29

; High score sort routine
	ldx     L051e,y
	sta     L051e,y
	stx     L29
	lda     L2a
	ldx     L051e+1,y
	sta     L051e+1,y
	stx     L2a
	lda     L2b
	ldx     L051e+2,y
	sta     L051e+2,y
	stx     L2b
?f7
	lda     L2d
	ldx     L061e+1,y
	sta     L061e+1,y
	stx     L2d
	lda     L2c
	ldx     L061e+2,y
	sta     L061e+2,y
	stx     L2c
	cpy     #$52
	bcc     ?f8
	lda     L2e
	ldx     L061e,y
	sta     L061e,y
	stx     L2e
?f8
	cpy     #$55
	bcc     ?f9
	dey
?f9
	dey
	dey
	bne     ?b6
	ldy     #$02
?f10
	inc     hs_timer
	cpy     #$55
	bcc     ?f11
	dey
?f11
	dey
	dey
	bne     ?b3
	ldx     L36
	lda     hs_timer
	sta     L0600,x
	dex
	bmi     ?f12
	jmp     ?l2
?f12
	lda     L0601
	cmp     L0600
	bcc     ?f13
	cmp     #$63
	bcs     ?f13
	inc     L0601
?f13
	lda     curplayer
	eor     #$01
	asl     a
	asl     a
	ora     curplayer
	adc     #$05
	sta     L0603
Lad22
	ldy     #_game_state_enter_initials
	lda     L0603
	beq     ?f16
	and     #$03
	sta     curplayer
	dec     curplayer
	lsr     L0603
	lsr     L0603
	ldx     curplayer
	lda     L0600,x
	beq     ?f15
	cmp     #$09
	bcs     ?f15
	asl     a
	clc
	adc     L0600,x
	eor     #$ff
	sec
	sbc     #$e5
	sta     hs_whichletter
	jsr     setup_inverted
; Entering high score?
	; Set high score entry timer to 96/20 (4.8) seconds
	lda     #96
	sta     hs_timer
	; Reset buttons to be processed and spinner position
	lda     #$00
	sta     zap_fire_new
	sta     spinner_delta
	lda     #$02
	sta     L0604
	jsr     La789
	ldy     #_game_state_victory	; Set game node to post game victory explosion
	sty     game_state
	rts
?f15
	jmp     Lad22
?f16
	sty     game_state
	rts





	.local
; High score entry
game_state_got_high_score
	; Set game mode to high score input screen
	lda     #_game_mode_enter_initials
	sta     game_mode
	lda     timectr
	and     #$1f
	bne     ?f1
	dec     hs_timer
	bne     ?f1
	ldy     #_game_state_enter_initials
	sty     game_state
	rts
?f1
	ldx     hs_whichletter
	lda     hs_initials_8,x
	jsr     track_spinner
; enforce 0..$1a (0-26, A through space) range
	tay
	bpl     ?f2
	lda     #$1a
	clv
	bvc     ?f3
?f2
	cmp     #$1b
	bcc     ?f3
	lda     #$00
?f3
	ldx     hs_whichletter
	sta     hs_initials_8,x
	lda     zap_fire_new
	and     #$18
	tay
	lda     zap_fire_new
	and     #$67
	sta     zap_fire_new
	tya
	beq     ?f7
	dec     hs_whichletter
	dec     L0604
	bpl     ?f5
	ldx     curplayer
	lda     L0600,x
	cmp     #$04
	bcs     ?f4
	jsr     Lddf7
?f4
	jsr     Lad22
	clv
	bvc     ?f7
?f5
	dex
	lda     #$00
	sta     hs_initials_8,x
?f7
	rts





	.local

; Track the spinner, maybe?  Input value in A, return value in A is either
; unchanged, one higher, or one lower.  Adds spinner_delta into player_position and clears spinner_delta.

track_spinner
	pha
	lda     spinner_delta
	asl     a
	asl     a
	asl     a
	clc
	adc     player_position
	sta     player_position
	pla
	ldy     spinner_delta
	bmi     ?f1
	adc     #$00
	clv
	bvc     ?f2
?f1
	adc     #$ff
?f2
	ldy     #$00
	sty     spinner_delta
	rts



	.local
game_mode_enter_initials
	jsr     La8b4
	lda     #$c0
	ldx     #$02 ; "PLAYER "
	jsr     vapp_msg_at_y
	dec     L016e
	jsr     Laa97
	ldx     #_msg_enter_your_initials ; "ENTER YOUR INITIALS"
	jsr     vapp_msg
	lda     #$a6
	ldx     #_msg_spin_knob_to_change ; "SPIN KNOB TO CHANGE"
	jsr     vapp_msg_at_y
	lda     #$9c
	ldx     #_msg_press_fire_to_select ; "PRESS FIRE TO SELECT"
	jsr     vapp_msg_at_y
	ldx     #_msg_copyright ; "(c) MCMLXXX ATARI"
	jsr     vapp_msg
	lda     hs_whichletter
	sec
	sbc     L0604
	jmp     Lae4e



	.local
game_mode_high_scores
	jsr     La8b4
; This is the start of a very clever routine for Tempest
; Pokey chip protection. The interrupts are disabled to
; preserve timing. From the POKEY chip emulator 4.5 --

; 4.5: changed the 9/17 bit polynomial formulas such that the
; values required for the Tempest Pokey protection will be found.
; Tempest expects the upper 4 bits of the RNG to appear in the
; lower 4 bits after four cycles, so there has to be a shift
; of 1 per cycle (which was not the case before). Bits #6-#13 of
; the new RNG give this expected result now, bits #0-7 of the 9 bit
; poly.

	sei
	; Randomize A
	lda     pokey1_rand
	; Randomize Y
	ldy     pokey1_rand
	sty     L29
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	eor     L29
	sta     L29
	; Randomize A
	lda     pokey2_rand
	; Randomize Y
	ldy     pokey2_rand
	cli
	eor     L29
	and     #$f0
	eor     L29
	sta     L29
	tya
	asl     a
	asl     a
	asl     a
	asl     a
	eor     L29
	sta     pokey_piracy_detected
	jsr     Laf26
	lda     #$ff
Lae4e
	sta     L63
	ldx     #_msg_high_scores ; "HIGH SCORES"
	jsr     vapp_msg
	lda     #$01
	sta     L61
	jsr     vapp_setscale
	lda     #$28
	sta     L2c
	ldx     #$15
	stx     loopidx
?loop
	; Append a vcentre to the display list
	jsr     vapp_vcentre_20
	lda     #$00
	sta     draw_z
	lda     L2c		; Y coord
	tax
	sec
	sbc     #$0a
	sta     L2c
	lda     #$d0		; X coord
	jsr     vapp_ldraw_XY
	ldy     #_colidx_high_score
	lda     L63
	cmp     loopidx
	bne     ?f2
	ldy     #_colidx_white
?f2
	jsr     vapp_setcolor
	lda     #L61	; append value at L61
	ldy     #1	; one pair of digits
	jsr     vapp_digits
	lda     #$a0
	jsr     Lb56a
	lda     #$00		; Y coord, and color/intensity
	; Set color and intensity t0 0
	sta     draw_z
	tax
	lda     #$08		; X coord
	jsr     vapp_ldraw_XY
	inc     L61
	lda     loopidx
	jsr     Laef8
	ldx     #$00		; Y coord
	lda     #$08		; X coord
	jsr     vapp_ldraw_XY
	ldx     loopidx
	lda     hs_score_8,x
	sta     L56
	lda     hs_scores+7,x
	sta     L57
	lda     hs_scores+8,x
	sta     L58
	lda     #L56	; append value at L56
	ldy     #3	; 3 pairs of digits
	jsr     vapp_digits
	dec     loopidx
	dec     loopidx
	dec     loopidx
	bpl     ?loop
	rts




	.local
Laeca
	lda     bonus_life_each
	beq     ?f1
	sta     L58
	ldx     #_msg_bonus_every ; "BONUS EVERY "
	jsr     vapp_msg
	lda     #$00
	sta     L56
	sta     L57
	lda     #L56	; Append value at L56
	ldy     #3	; 3 pairs of digits
	jsr     vapp_digits
?f1
	clc
	ldy     #$10
	lda     #$85
?b2
	adc     msg_en_copyright,y ; "(c) MCMLXXX ATARI" data
	dey
	bpl     ?b2
	sta     copyr_cksum
	rts
	lda     hs_whichletter
	sec
	sbc     L0604
Laef8
	clc
	adc     #$02
	sta     L38
	ldy     #$00
	lda     #$02
	sta     L39
?b3
	ldx     L38
	lda     hs_initials_8,x
	cmp     #$1e
	bcc     ?f4
	lda     #$1a
?f4
	asl     a
	tax
	lda     ltr_jsrtbl,x
	sta     (vidptr),y
	iny
	lda     ltr_jsrtbl+1,x
	sta     (vidptr),y
	iny
	dec     L38
	dec     L39
	bpl     ?b3
	dey
	jmp     inc_vidptr





	.local
Laf26
	lda     L0600
	ora     L0601
	beq     ?f2
	ldx     #_msg_ranking_from_1_to_
	jsr     vapp_msg
	lda     #$63
	jsr     Laf71
	ldx     #$00
	jsr     ?f1
	ldx     #$01
?f1
	lda     L0600,x
	beq     ?f2
	pha
	stx     L2e
	ldy     #_colidx_red
	jsr     vapp_setcolor
	; Append a vcentre to the display list
	jsr     vapp_vcentre_20
	lda     #$d0		; X coord
	ldy     L2e
	ldx     ?t1,y		; Y coord
	jsr     vapp_ldraw_XY
	pla
	jsr     Laf71
	lda     #$a0
	jsr     Lb56a
	lda     #$10 ; +16
	ldx     #$04 ; "PLAYER "
	jsr     Lab98
	ldx     L2e
	jsr     Laa9e
?f2
	rts

; Y coordinates
?t1
	.byte	$c0, $b0






	.local
Laf71
	cmp     #$63
	bcc     vapp_2dig_bin
	lda     #$63

; Convert A to bcd and append to vidptr
vapp_2dig_bin
	jsr     bin_to_bcd
	lda     #L29	; Append value at L29
	ldy     #1	; One pair of digits
	jmp     vapp_digits






	.local
game_mode_copyright
	jsr     setup_inverted
	dec     L016e
	ldy     #_colidx_red
	jsr     vapp_setcolor
	lda     #$01
	sta     curscale	; b scale
	jsr     vapp_scale_b
	ldx     #$2c ; "(c) MCMLXXX ATARI"
	lda     #$60 ; Y coord (normally $92 for this msg)
	jsr     vapp_msg_at_y
	jsr     show_plyno
	ldx     #$07
	stx     loopidx
?loop
	ldy     loopidx
	ldx     ?selfrate_msgs,y
	jsr     vapp_msg
	dec     loopidx
	bpl     ?loop
	lda     player_seg
	sec
	sbc     L7b
	bpl     ?f2
	dec     L7b
	dec     L7c
	clv
	bvc     ?f7
?f2
	bne     ?f4
	dec     L7c
	dec     L7b
	bpl     ?f3
	inc     L7b
	inc     L7c
?f3
	clv
	bvc     ?f7
?f4
	lda     L7c
	cmp     L0127
	beq     ?f5
	bcs     ?f7
?f5
	sec
	sbc     player_seg
	bne     ?f6
	clc
?f6
	bcs     ?f7
	inc     L7b
	inc     L7c
?f7
	lda     L7c
	sta     L3a
	ldx     #$04
	stx     loopidx
?loop2
	ldy     #_colidx_score
	jsr     vapp_setcolor
	; Set color and intensity to zero
	lda     #0
	sta     draw_z
	; Append a vcentre to the display list
	jsr     vapp_vcentre_20
	ldx     #$d8	; Y coord
	ldy     loopidx
;Laff9
	lda     ?t1,y
	clc
	adc     #$f8	; X coord
	jsr     vapp_ldraw_XY


	ldx     L3a
	ldy     startlevtbl,x
	cpy     #$63
	bcs     ?f9
	iny
	tya
	jsr     vapp_2dig_bin
	ldy     #_colidx_red
	jsr     vapp_setcolor
	; Append a vcentre to the display list
	jsr     vapp_vcentre_20
	ldx     #$ba	; Y coord
	ldy     loopidx
	lda     ?t1,y
	clc
	adc     #$ec	; X coord
	jsr     vapp_ldraw_XY
	ldx     L3a
	jsr     vapp_startbonus
	; Append a vcentre to the display list
	jsr     vapp_vcentre_20
	ldx     #$cc	; Y coord
	ldy     loopidx
	lda     ?t1,y
	clc
	adc     #$00	; X coord
	jsr     vapp_ldraw_XY
	ldx     L3a
	lda     startlevtbl,x
	jsr     Lc4e1
?f9
	dec     L3a
	dec     loopidx
	bpl     ?loop2
	; Set color and intensity to zero
	lda     #0
	sta     draw_z
	; Append a vcentre to the display list
	jsr     vapp_vcentre_20
	ldx     #_msg_time ; "TIME"
	jsr     vapp_msg

	; Append the countdown timer value to the display list
	lda     #countdown_timer	; Append value at countdown_timer (in BCD)
	ldy     #1	; 1 pair of digits
	jsr     vapp_digits


	ldy     #_colidx_white
	jsr     vapp_setcolor
	; Append a vcentre to the display list
	jsr     vapp_vcentre_20
	ldx     #$b8	; Y coord
	jsr     Lb0ab
	sec
	sbc     L7b
	tay
	lda     ?t1,y
	sec
	sbc     #$16	; X coorrd
	jsr     vapp_ldraw_XY

	; Set color to 0 and intensity to 14
	lda     #$e0
	sta     draw_z
	ldx     #$00
	stx     L38
	ldy     #$03
	sty     loopidx
?loop3
	ldy     L38
;Lb083
	lda     ?t2,y
	tax		; Y coord
	iny
	lda     ?t2,y	; X coord
	iny
	sty     L38
	jsr     vapp_ldraw_XY
	dec     loopidx
	bpl     ?loop3
	rts

; These appear to be X offsets of the tube pictures on the starting-level
; selection display.  See Laff9.
?t1
	.byte   $be, $e3, $09, $30, $58

?selfrate_msgs
	.byte   _msg_rate_yourself ; "RATE YOURSELF"
	.byte   _msg_spin_knob_to_change ; "SPIN KNOB TO CHANGE"
	.byte   _msg_press_fire_to_select ; "PRESS FIRE TO SELECT"
	.byte   _msg_novice ; "NOVICE"
	.byte   _msg_expert ; "EXPERT"
	.byte   _msg_level ; "LEVEL"
	.byte   _msg_hole ; "HOLE"
	.byte   _msg_bonus ; "BONUS"

; Used at Lb083 to draw the box around the selected level, on the starting
; level selection screen.
; X/Y coords for vapp_ldraw_XY
?t2
	.word   $2600 ; x=+0,y=+38
	.word   $0028 ; x=+40,y=+0
	.word   $da00 ; x=+0,y=-38
	.word   $00d8 ; x=-40,y=+0





	.local
Lb0ab
	lda     player_seg
	jsr     track_spinner
	tay
	bpl     ?f1
	lda     #$00
	clv
	bvc     ?f2
?f1
	cmp     L0127
	bcc     ?f2
	lda     L0127
?f2
	sta     player_seg
	tay
	rts





vapp_startbonus
	txa
	jsr     ld_startbonus
	lda     #L29	; Append value at L29
	ldy     #3	; 3 pairs of digits
	jmp     vapp_digits




	.local
vapp_setcolor
	cpy     curcolor
	beq     ?f1
	sty     curcolor
	; append a vscale to the display list
	; z and color from curcolor
	lda     #_vg_sparkle_bit	; sparkle = 1
	jmp     vapp_vstat_A_Y
?f1
	rts




	.local
vapp_setscale
	cmp     curscale
	beq     ?f1
	sta     curscale	; b scale
	jmp     vapp_scale_b
?f1
	rts





	.local
game_state_26
	lda     #_game_state_countdown	; game state to non-player input mode
	sta     game_state
	lda     #_game_state_0
	sta     next_game_state

	; Going to _game_state_countdown; time is in binary
	lda     #223
	sta     countdown_timer

	;
	; Start of title screen
	;

	; Set game status to title start, where a box shrinks to the center

	lda     #_game_mode_logo_start
	sta     game_mode
	lda     #$19
	sta     L014e
	lda     #$18
	sta     L014d
	rts




	.local
game_mode_logo_start
	lda     #$34
	ldx     #$aa
	jsr     Lb15a
	lda     L014e
	cmp     #$a0
	bcs     ?f1
	adc     #$14
	sta     L014e
?f1
	cmp     #$50
	bcc     ?f2
	lda     L014d
	clc
	adc     #$08
	sta     L014d
	cmp     L014e
	bcc     ?f2
	lda     #$a0
	sta     L014d

	; Set game mode to the part of attract mode where the Tempest logo 
	; grows bigger

	lda     #_game_mode_logo_zoom
	sta     game_mode
?f2
	rts





	.local
	; Zoom in the logo
game_mode_logo_zoom
	lda     #$3f
	ldx     #$4e
	jsr     Lb15a
	lda     L014d
	; How big the logo becomes
	cmp     #$30
	bcc     ?f1
	sbc     #$01
	sta     L014d
?f1
	; How close the logo gets before the back end starts to catch up
	cmp     #$80
	bcs     ?f3
	lda     L014e
	sec
	sbc     #$01
	cmp     L014d
	bcs     ?f2
	lda     L014d
?f2
	sta     L014e
?f3
	rts




	.local
Lb15a
	sta     y_scale
	stx     x_in
	lda     L014d
	sta     loopidx
	dec     L016e
?loop
	lda     loopidx
	asl     a
	asl     a
	and     #$7f
	tay		; l scale
	lda     loopidx
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a	; b scale
	jsr     vapp_scale_lb
	lda     loopidx
	cmp     L014d
	bne     ?f2
	lda     #$00
	clv
	bvc     ?f3
?f2
	lsr     a
	lsr     a
	lsr     a
	nop
	and     #$07
	cmp     #$07
	bne     ?f3
	lda     #$03
?f3
; Draw self test screens

	; Append a vstat to the display list
	tay		; z and color
	; Minor bug: vapp_vstat_A_Y will set _vg_opc_vstat regardless of
	; the bit value in A; this should be "lda #_vg_sparkle_bit"
	lda     #_vg_opc_vstat|_vg_sparkle_bit	; Set the speckle bit in $08

	jsr     vapp_vstat_A_Y
	; Append a vjsr *x_in to the display list
	ldax_me	x_in
	jsr     vapp_vjsr_AX
	lda     loopidx
	clc
	adc     #$02
	sta     loopidx
	cmp     L014e
	bcc     ?loop
	ldx     #$2c
	lda     #$d0
	jsr     vapp_msg_at_y
	; Append a vjsr L3ff2 to the display list
	ldax_im	L3ff2	
	jmp     vapp_vjsr_AX
	.tail




	.local
Lb1b6
	jsr     Lc1c3
	; Look at the first byte in vector RAM

	lda     vecram
;Lb1bc
	cmp     Lcec6
	bne     ?f1
	lda     L0133
	bne     ?f1
	rts
?f1
	; Are we in attract or gameplay mode?
	lda     game_mode
	cmp     #_game_mode_00
	beq     ?f9
	lda     #_dblduf_reg_0
	jsr     db_init_vidptr
	jsr     Lb332
	bcs     ?f5
	jsr     Lb20d
	lda     L016e
	beq     ?f5
; Anti-piracy provision.  Checksum the video RAM that holds the copyright
; message.  See also Lb27d and La581.
;Lb1df
	ldy     #$27
	lda     #$0e
	sec
?b2
	sbc     (copyr_vid_loc),y
	dey
	bpl     ?b2
	tay
	beq     ?f3
	eor     #$e5
?f3
	beq     ?f4
.if VER=1
	eor     #$2a
.endif
.if (VER=2)|(VER=3)
	eor     #$29
.endif
?f4
	sta     copyr_vid_cksum2
?f5
	lda     #_dblduf_reg_0
	jsr     dblbuf_done
	lda     Lcec4
	sta     vecram
	lda     Lcec4+1
	sta     vecram+1
	clv
	bvc     ?f10
?f9
	jmp     game_mode_00
?f10
	rts




	.local
Lb20d
	ldx     game_mode
	lda     ?game_mode_jump_table+1,x
	pha
	lda     ?game_mode_jump_table,x
	pha
	rts

?game_mode_jump_table
	.jump   game_mode_00
	.jump   game_mode_service
	.jump   game_mode_04
	.jump   game_mode_enter_initials	; Enter high score initials
	.jump   game_mode_copyright	; Copyright
	.jump   game_mode_high_scores	; High scores
	.jump   game_mode_msg_game_over	; "GAME OVER"
	.jump   game_mode_msg_play	; "PLAY"
	.jump   game_mode_msg_press_start	; "PRESS START"
	.jump   game_mode_logo_start
	.jump   game_mode_logo_zoom	; zoom in on logo
	.jump   game_mode_msg_2_credit_minimum	; "INSERT COINS"






	.local
game_mode_00
	lda     #_dblduf_reg_7
	jsr     db_init_vidptr
	jsr     draw_player
	lda     #_dblduf_reg_7
	jsr     dblbuf_done
	lda     #_dblduf_reg_4
	jsr     db_init_vidptr
	jsr     draw_shots
	lda     #_dblduf_reg_4
	jsr     dblbuf_done
	lda     #_dblduf_reg_3
	jsr     db_init_vidptr
	jsr     draw_enemies
	lda     #_dblduf_reg_3
	jsr     dblbuf_done
	lda     #_dblduf_reg_6
	jsr     db_init_vidptr
	jsr     draw_explosions
	lda     #_dblduf_reg_6
	jsr     dblbuf_done
	lda     #_dblduf_reg_5
	jsr     db_init_vidptr
	jsr     draw_pending
	lda     #_dblduf_reg_5
	jsr     dblbuf_done
	lda     #_dblduf_reg_0
	jsr     db_init_vidptr
	jsr     La8b4
	; Branch in play mode
	lda     play_state
	bmi     ?f2
; Anti-piracy provision.  When not playing, checksum the video RAM that
; holds the copyright message.  See also Lb1df and La581.
;Lb27d
	lda     #$f2
	clc
	ldy     #$27
?b1
	adc     (copyr_vid_loc),y
	dey
	bpl     ?b1
	sta     copyr_vid_cksum1
; End anti-piracy provision.
?f2
	lda     #_dblduf_reg_0
	jsr     dblbuf_done
	jsr     Lb367
	lda     #_dblduf_reg_1
	jsr     db_init_vidptr
	jsr     Lc5c2
	lda     #_dblduf_reg_1
	jsr     dblbuf_done
	lda     #_dblduf_reg_8
	jsr     db_init_vidptr
	jsr     Lc54d
	lda     #_dblduf_reg_8
	jsr     dblbuf_done
	lda     #0
	sta     L0114
	lda     Lcec2
	sta     vecram
	lda     Lcec2+1
	sta     vecram+1
	rts





	.local

;
; db_init_vidptr
;
;   Set vidptr to point to a double buffer.
;
;   In:
;     A: Area number
;     dblbuf_flg[A]: A/B state of the area
;

db_init_vidptr
	tax
	asl     a
	tay
	lda     dblbuf_flg,x
	bne     ?f1
	ldx     dblbuf_addr_B,y
	lda     dblbuf_addr_B+1,y
	clv
	bvc     ?f2
?f1
	ldx     dblbuf_addr_A,y
	lda     dblbuf_addr_A+1,y
?f2
	stx     vidptr_l
	sta     vidptr_h
	lda     #$00
	sta     vidptr_offset
	rts





	.local

;
; db_init_ptr1
;
;   Set vidptr to point to a double buffer.
;
;   In:
;     A: Area number
;     dblbuf_flg[A]: A/B state of the area
;   Out:
;     ptr1 
;     vidptr_offset

db_init_ptr1

;
; Only called at one place, with A <- 2
;

	; X <- A
	tax

	; Y <- A *2
	asl     a
	tay

	; The the state of the area
	lda     dblbuf_flg,x
	bne     ?get_B

	; If zero, get the A table entry for the area
	ldx     dblbuf_addr_A,y
	lda     dblbuf_addr_A+1,y
	clv
	bvc     ?set	; Always branch

?get_B
	; else get the B table entry for the area
	ldx     dblbuf_addr_B,y
	lda     dblbuf_addr_B+1,y


?set
	; set ptr1 to point to the selected buffer
	stx     ptr1_l
	sta     ptr1_h

	lda     #$00
	sta     vidptr_offset
	rts




	.local
dblbuf_done
	pha

	; Append a vrts to the display list
	jsr     vapp_vrts
	pla
	tax
	asl     a
	tay
	lda     dblbuf_vjsr_loc,y
	sta     ptr1_l
	lda     dblbuf_vjsr_loc+1,y
	sta     ptr1_h
;Lb310
	lda     dblbuf_flg,x
	eor     #$01
	sta     dblbuf_flg,x
	bne     ?f1
	lda     dblbuf_vjmp_A,y
	ldx     dblbuf_vjmp_A+1,y
	clv
	bvc     ?f2
?f1
	lda     dblbuf_vjmp_B,y
	ldx     dblbuf_vjmp_B+1,y
?f2
	ldy     #$00
	sta     (ptr1),y
	txa
	iny
	sta     (ptr1),y
	rts





	.local
Lb332
	lda     Lcec4
	cmp     vecram
	beq     ?f1
	sta     vecram
	sec
	rts
?f1
	lda     dblbuf_flg
	bne     ?f2
	ldx     #$02
	clv
	bvc     ?f3
?f2
	ldx     #$08
?f3
	lda     dblbuf_vjmp_A,x
	ldy     #$00
	sty     L016e
	sta     (vidptr),y
	iny
	lda     dblbuf_vjmp_A+1,x
	sta     (vidptr),y
	lda     dblbuf_addr_A,x
	sta     vidptr_l
	lda     dblbuf_addr_A+1,x
	sta     vidptr_h
	clc
	rts





	.local
Lb367
	lda     L0114
	beq     ?f1
	lda     #_dblduf_reg_2
	jsr     db_init_vidptr
	jsr     Lc30d
	lda     #_dblduf_reg_2
	jsr     dblbuf_done
?f1
	lda     #2
	jsr     db_init_ptr1
	lda     #$00
	ldx     #$0f
?b2
	sta     L0425,x
	dex
	bpl     ?b2
	lda     L0106
	bmi     ?f7
	ldx     max_enm
?b3
	lda     enemy_along,x
	beq     ?f6
	ldy     #$00
	lda     enemy_movement_style,x
	and     #$07
	cmp     #$01
	bne     ?f6
	iny
	sty     L29
	lda     enemy_movement_style,x
	and     #$80
	bne     ?f5
;Lb3aa
	lda     pulsing
	bmi     ?f4
	lda     enemy_along,x
	cmp     L0157
	bcs     ?f4
	inc     L29
	inc     L29
?f4
	lda     L29
	ldy     L02cc,x
	ora     L0425,y
	sta     L0425,y
?f5
	ldy     enemy_seg,x
	lda     L29
	ora     #$80
	ora     L0425,y
	sta     L0425,y
?f6
	dex
	bpl     ?b3
?f7
	lda     #$06
	ldy     zap_running
	beq     ?f8
	bmi     ?f8
	lda     timectr
	and     #$07
	cmp     #$07
	bne     ?f8
	lda     #$01
?f8
	sta     L29
	ldy     #$ff
	ldx     #$ff
	stx     L2c
	lda     player_along
	beq     ?f9
	lda     player_status
	bmi     ?f9
	ldx     player_seg
	ldy     player_status
?f9
	stx     L2a
	sty     L2b
	lda     L0124
	bmi     ?f10
	and     #$0e
	lsr     a
	sta     L2c
	dec     L0124
?f10
	ldx     #$0f
?b12
	ldy     #$06
	lda     L0425,x
	beq     ?f14
	and     #$02
	beq     ?f13
	lda     timectr
	and     #$01
	tay
?f13
	clv
	bvc     ?f19
?f14
	cpx     L2a
	beq     ?f15
	cpx     L2b
?f15
	bne     ?f16
	ldy     #$01
	clv
	bvc     ?f19
?f16
	lda     L0124
	bmi     ?f18
	txa
	clc
	adc     L2c
	and     #7
	cmp     #7
	bne     ?f17
	lda     #$03
?f17
	tay
	clv
	bvc     ?f19
?f18
	ldy     L29
?f19
	tya
	ldy     ?t1,x
	sta     (ptr1),y
	dex
	bpl     ?b12
	ldx     #$0f
	bit     open_level
	bpl     ?l20
	dex
?l20
	ldy     #$c0
	lda     L0425,x
	bpl     ?f21
	ldy     #$00
?f21
	sty     L58
	ldy     ?t2,x		; b467
	lda     (vidptr_bookmark),y
	and     #$1f
	ora     L58
	sta     (vidptr_bookmark),y
	dex
	bpl     ?l20
	rts

; offsets from ptr1
?t1
	.byte	$a8
	.byte	$9c
	.byte	$92
	.byte	$86
	.byte	$7c
	.byte	$70
	.byte	$66
	.byte	$5a
	.byte	$50
	.byte	$44
	.byte	$3a
	.byte	$2e
	.byte	$24
	.byte	$18
	.byte	$0e
	.byte	$02
	.byte	$b2
?t2
	.byte	$3b
	.byte	$37
	.byte	$33
	.byte	$2f
	.byte	$2b
	.byte	$27
	.byte	$23
	.byte	$1f
	.byte	$1b
	.byte	$17
	.byte	$13
	.byte	$0f
	.byte	$0b
	.byte	$07
	.byte	$03
	.byte	$3f	; XXX bug 1 this is the item loaded in y at b467
.if VER=1
	.byte	$1e
.endif
.if (VER=2)|(VER=3)
	.byte	$1d
.endif




	.local
draw_pending
	ldy     #_colidx_high_pending_enemies
	sty     curcolor	; z and color
	lda     #$08	; sparkle
	; Append a vstat to the display list
	jsr     vapp_vstat_A_Y
	ldx     #x_out_offset_l
	jsr     vapp_scl_cen_drw_to_X
	lda     #$12
	sta     x_in
	ldx     #$3f
	stx     loopidx
	ldy     #$00
?loop
	ldx     loopidx
	lda     pending_vid,x
	bne     ?f2
	jmp     ?f6
?f2
	cmp     #$50
	bcc     ?f3
	dec     loopidx
; Construct a vscale instruction based on the pending_vid,x value
?f3
	pha
	and     #$3f
	sta     (vidptr),y
	pla
	rol     a
	rol     a
	rol     a
	and     #$03
	clc
	adc     #$01
	ora     #$70
	iny
	sta     (vidptr),y
	iny
	lda     pending_seg,x
	tax
; Construct a long draw (z=0) subtracting screen centre from $03?a,x values
	lda     L038a,x
	sec
	sbc     y_out_offset_l
	sta     y_out_l
	sta     (vidptr),y
	iny
	lda     L037a,x
	sbc     y_out_offset_h
	sta     y_out_h
	and     #$1f
	sta     (vidptr),y
	iny
	lda     L036a,x
	sta     x_out_l
	sta     (vidptr),y
	iny
	lda     L035a,x
	sta     L62
	and     #$1f
	sta     (vidptr),y
	iny
; Append a long draw, x=0 y=0 z=5
	lda     #$00
	sta     (vidptr),y
	iny
	sta     (vidptr),y
	iny
	sta     (vidptr),y
	lda     #$a0
	iny
	sta     (vidptr),y
	iny
; Append the negative of the long draw we constructed above.
	lda     y_out_l
	eor     #$ff
	clc
	adc     #$01
	sta     (vidptr),y
	iny
	lda     y_out_h
	eor     #$ff
	adc     #$00
	and     #$1f
	sta     (vidptr),y
	iny
	lda     x_out_l
	eor     #$ff
	clc
	adc     #$01
	sta     (vidptr),y
	iny
	lda     L62
	eor     #$ff
	adc     #$00
	and     #$1f
	sta     (vidptr),y
	iny
	cpy     #$f0
	bcc     ?f5
	dey
	jsr     inc_vidptr
	ldy     #$00
?f5
	dec     x_in
	bmi     ?f7
?f6
	dec     loopidx
	bmi     ?f7
	jmp     ?loop
?f7
	tya
	beq     ?f8
	dey
	jsr     inc_vidptr
; Anti-piracy code.  If the copyright string has been tampered with,
; and player 1's level is over 10, set main_loop_timer to $7a.
; I'm not sure what this does, but it can't be good. :-)
?f8
	lda     copyr_cksum
	beq     ?f9
	lda     players_level	; player 1 level
	cmp     #$0a
	bcc     ?f9
	lda     #$7a
.if PIRATE
	nop
	nop
.else
	sta     main_loop_timer
.endif
; End anti-piracy code.
?f9
	lda     #1	; b scale
	jmp     vapp_scale_b







	.local
Lb56a
	pha
	ldy     #$00
	tya
	sta     (vidptr),y
	iny
	sta     (vidptr),y
	iny
	sta     (vidptr),y
	iny
	pla
	sta     (vidptr),y
	lda     #$04
	clc
	adc     vidptr_l
	sta     vidptr_l
	bcc     ?f1
	inc     vidptr_h
?f1
	rts









	.local
draw_player
	lda     #_colidx_player
	sta     curcolor
	lda     player_along
	beq     ?f1
	cmp     #$f0
	bcs     ?f1
	sta     y_scale
	sta     L2f
	lda     player_status
	cmp     #$81
	beq     ?f1
	ldy     player_seg
	lda     player_position
	lsr     a
	and     #$07
	clc
	adc     #$01
	jsr     draw_linegfx
?f1
	rts





	.local
draw_enemies
	lda     L0106
	bmi     ?return
	ldx     #$06
	stx     loopidx
?enemies_loop
	ldx     loopidx
	lda     enemy_along,x
	beq     ?skip
	sta     y_scale
;Lb5bf
	lda     enemy_movement_style,x
	and     #$18
	lsr     a
	lsr     a
	lsr     a
	sta     L55
	lda     enemy_movement_style,x
	and     #$07
	asl     a
	jsr     ?draw_enemy	; index in Y, 0-4
?skip
	dec     loopidx
	bpl     ?enemies_loop
?return
	rts







?draw_enemy
	tay
	lda     ?draw_enemy_jump_table+1,y
	pha
	lda     ?draw_enemy_jump_table,y
	pha
	rts
; Indexed by enemy type.  Draws enemy.
?draw_enemy_jump_table
	.jump   draw_flipper ; flipper
	.jump   draw_pulsar ; pulsar
	.jump   draw_tanker ; tanker
	.jump   draw_spiker ; spiker
	.jump   draw_fuzzball ; fuzzball








; Code to draw a flipper.
?draw_flipper
draw_flipper=?draw_flipper
	lda     #_colidx_red
	sta     curcolor
	lda     enemy_movement_style,x
	bmi     ?f1
	ldy     enemy_seg,x
	ldx     L55
	lda     ?t1,x
	jsr     draw_linegfx
	clv
	bvc     ?f2
?f1
	jsr     ?Lb634
	ldy     #$00
	jsr     Lbdcb
?f2
	rts
; Graphic numbers for flippers.  Indexed by $18 bits of enemy_movement_style value.
?t1
	.byte   0
	.byte   0
	.byte   0
	.byte   0





; Code to draw a tanker.
?draw_tanker
draw_tanker=?draw_tanker
	lda     L028a,x
	and     #$03
	tay
	lda     ?t2,y
	ldy     enemy_seg,x
	jmp     graphic_at_mid
; Graphic number for tankers.  Indexed by contents value (L028a bits $03).
?t2
	.byte   $1a
	.byte   $1a
	.byte   $4a
	.byte   $4c



; Code to draw a spiker.
?draw_spiker
draw_spiker=?draw_spiker
	ldy     enemy_seg,x
	lda     timectr
	and     #$03
; Lb629
	asl     a
	clc
; Lb62b
	adc     #$12
	jmp     graphic_at_mid
; Not used; a table version of the value computed by Lb629-Lb62b.
	.byte   $12
	.byte   $14
	.byte   $16
	.byte   $18




?Lb634
	lda     y_scale
	sta     L2f
	ldy     enemy_seg,x
	lda     tube_x,y
	sta     x_in
	lda     tube_y,y
	sta     y_in
	lda     L02cc,x
	and     #$0f
	tay
	lda     x_in
	eor     #$80
	clc
	adc     ?Lb634_t1+4,y
	bvc     ?Lb634_f2
	bpl     ?Lb634_f1
	lda     #$7f
	clv
	bvc     ?Lb634_f2
?Lb634_f1
	lda     #$80
?Lb634_f2
	eor     #$80
	sta     L2e
	lda     y_in
	eor     #$80
	clc
; Lb667
	adc     ?Lb634_t1,y
	bvc     ?Lb634_f4
	bpl     ?Lb634_f3
	lda     #$7f
	clv
	bvc     ?Lb634_f4
?Lb634_f3
	lda     #$80
?Lb634_f4
	eor     #$80
	sta     L30
	ldy     curtube
	lda     lev_fscale,y
	sta     fscale
	lda     lev_fscale2,y
	sta     fscale+1
	rts
; Used - apparently overlappingly - at Lb667 and Lb68b.
; Maybe this is a sine wave, and the overlapping is sin-vs-cos?
?Lb634_t1
	.byte   $00
	.byte   $10
	.byte   $1f
	.byte   $28
?Lb634_t1+4
	.byte   $2c
	.byte   $28
	.byte   $1f
	.byte   $10
	.byte   $00
	.byte   $f0
	.byte   $e1
	.byte   $d8
	.byte   $d4
	.byte   $d8
	.byte   $e1
	.byte   $f0
	.byte   $00
	.byte   $10
	.byte   $1f
	.byte   $28






; Code to draw a fuzzball.
?draw_fuzzball
draw_fuzzball=?draw_fuzzball
	lda     enemy_along,x
	sta     y_scale
	ldy     enemy_seg,x
	lda     tube_x,y
	sta     x_in
	lda     tube_y,y
	sta     y_in
	lda     L02cc,x
	bpl     ?df_f1
	tya
	clc
	adc     #$01
	and     #$0f
	tay
	lda     tube_x,y
	sec
	sbc     x_in
	jsr     ?df_f2
	clc
	adc     x_in
	sta     x_in
	lda     tube_y,y
	sec
	sbc     y_in
	jsr     ?df_f2
	clc
	adc     y_in
	sta     y_in
?df_f1
	jsr     coord_xform		; does a divide
	ldx     #x_out_l
	jsr     vapp_scl_cen_drw_to_X
	lda     #$00
	sta     vidptr_offset
	jsr     Lbd3e		; does a division and appends the result as a vsale to the display list
	sty     vidptr_offset
	lda     timectr
	and     #$03
	asl     a
	clc
	adc     #$4e

	; Append the graphic_table entry at offset Y to the display list
	tay
	ldx     graphic_table+1,y
	lda     graphic_table,y
	ldy     vidptr_offset		; at offset vidptr_offset
	jmp     vapp_A_X_at_y
?df_f2
	sta     L29
	lda     L02cc,x
	and     #$07
	sta     L2c
	stx     L2b
	ldx     #$02
	lda     #$00
?df_b3
	lsr     L2c
	bcc     ?df_f4
	clc
	adc     L29
?df_f4
	asl     a
	php
	ror     a
	plp
	ror     a
	dex
	bpl     ?df_b3
	ldx     L2b
	rts



; Code to draw a pulsar.
?draw_pulsar
draw_pulsar=?draw_pulsar
	lda     #$04
;Lb71d
	ldy     pulsing
	bmi     ?dp_f1
	lda     #_colidx_white
?dp_f1
	sta     curcolor
;Lb726
	lda     pulsing
	clc
	adc     #$40
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	cmp     #$05
	bcc     ?dp_f2
	lda     #$00
?dp_f2
	tay
	lda     ?dp_t1,y
	sta     L29
	lda     enemy_movement_style,x
	bmi     ?dp_f3
	ldy     enemy_seg,x
	lda     L29
	jsr     draw_linegfx
	clv
	bvc     ?dp_f4
?dp_f3
	jsr     ?Lb634
	ldy     L29
	jsr     Lbdcb
?dp_f4
	rts
?dp_t1
	.byte   $0d
	.byte   $0c
	.byte   $0b
	.byte   $0a
	.byte   $09
	.byte   $09





	.local
draw_shots
	ldx     #$0b
	stx     loopidx
?loop
	ldx     loopidx
	lda     ply_shotpos,x
	beq     ?f4
	sta     y_scale
	sta     L2f
	cpx     #$08 ; player or enemy shot?
	ldy     ply_shotseg,x
	bcs     ?f2
	lda     #$08
	clv
	bvc     ?f3
?f2
	lda     timectr
	asl     a
	and     #$06
	clc
	adc     #$20
?f3
	jsr     graphic_at_mid
?f4
	dec     loopidx
	bpl     ?loop

	; Set shot color

	ldy     #_rgb_yel
	lda     ply_shotcnt
	cmp     #6
	bcc     ?f5
	ldy     #_rgb_blu
	cmp     #8
	bcc     ?f5
	ldy     #_rgb_red
?f5
	sty     col_ram_plyr_shot_clr
	rts






	.local
draw_explosions
	ldy     #_colidx_white
	sty     curcolor
	ldx     #$07
	stx     loopidx
?loop
	ldx     loopidx
	lda     L030a,x
	beq     ?f4
	sta     y_scale
	lda     L02fa,x
	sta     L29
	ldy     L0302,x
	cpy     #$01
	bne     ?f2
	jsr     vapp_mid_graphic
	clv
	bvc     ?f4
?f2
	lda     L0312,x
	lsr     a
	and     #$fe
	cpy     #$02
	bcc     ?f3
	lda     #$00
?f3
	clc
	adc     ?t1,y
	ldy     L29
	jsr     graphic_at_mid
?f4
	dec     loopidx
	bpl     ?loop
	lda     L0720
	beq     ?f5
	lda     curlevel
	cmp     #$0d
	bcc     ?f5
	sta     L01ff
?f5
	rts
?t1
	.byte   $00
	.byte   $00
	.byte   $5a
	.byte   $58
	.byte	$56
	.byte	$1c










	.local
vapp_mid_graphic
	ldy     L29
	lda     mid_x,y
	sta     x_in
	lda     mid_y,y
	sta     y_in
	jsr     coord_xform		; does a divide
	ldx     #x_out_l
	jsr     vapp_scl_cen_drw_to_X
	ldx     L013b
	dec     L013c
	bne     ?f1
	inx
	stx     L013b
	lda     ?t1,x
	sta     L013c
?f1
	ldy     ?t2,x
	bmi     ?f2
	jsr     ?f3
?f2
	lda     L013b
	asl     a
	clc
	adc     #graphic_table_hit_by_shot_1_offset ; hit-by-shot explosion
	tay
	ldx     graphic_table+1,y
	lda     graphic_table,y
	jmp     vapp_A_X
?t1
	.byte   $02
	.byte   $02
	.byte   $02
	.byte   $02
	.byte   $02
	.byte   $04
	.byte   $03
	.byte   $02
	.byte   $01
	.byte   $20
	.byte   $03
	.byte   $03
	.byte   $03
	.byte   $03
	.byte   $03
	.byte   $03
	.byte   $03
	.byte   $3b
	.byte   $b8


; Offsets into table ?t3
?t2
	.byte   0	; init_explosion_colors
	.byte   2	; rotate_explosion_colors
	.byte   2
	.byte   2
	.byte   2
	.byte   2
	.byte   2
	.byte   2
	.byte   4	; init_explosion_scale
	.byte   6	; rescale_explosion
	.byte   $ff
	.byte   $ff
	.byte   $ff
	.byte   $ff
	.byte   $ff
	.byte   $ff
	.byte   $ff



?f3
	lda     ?t3+1,y
	pha
	lda     ?t3,y
	pha
	rts
?t3
	.jump   init_explosion_colors
	.jump   rotate_explosion_colors
	.jump   init_explosion_scale
	.jump   rescale_explosion









	.local
init_explosion_colors

	lda     #_rgb_red
	sta     col_ram+11
	sta     col_ram_shadow+11

	lda     #_rgb_yel
	sta     col_ram+10
	sta     col_ram_shadow+10

	lda     #_rgb_whi
	sta     col_ram_shadow+9
	sta     col_ram+9

	rts



	.local
; Rotate colors 9, 10, 11
rotate_explosion_colors
	ldy     col_ram_shadow+9
	ldx     #$02
?loop
	lda     col_ram_shadow+9,x
	pha
	sty     col_ram_shadow+9,x
	tya
	sta     col_ram+9,x
	pla
	tay
	dex
	bpl     ?loop
	rts




	.local
init_explosion_scale

	jsr     setcolours

	; Initialize vecram_2ffc_scale
	lda     #$7f
	sta     vecram_2ffc_lin_scale
	lda     #$04
	sta     vecram_2ffc_bin_scale
	rts




	.local
; vg_sub_image_spiked_player: Draw spiked-apart or pulsared-apart player.
; vecram_2ffc is called before the motions between pieces; it contains a vscale
; which is adjusted with time to cause the pieces to move.
rescale_explosion
	lda     vecram_2ffc_lin_scale
	sta     vecram_2ffc

	lda     vecram_2ffc_bin_scale
	ora     #_vg_opc_vscale
	sta     vecram_2ffc+1

	lda     #_vg_opc_vrts
	sta     vecram_2ffc+3

	; Subtract 32 from the linear scale; if underflow, mask back to
	; positive values and decrement the bin scale
	lda     vecram_2ffc_lin_scale
	sec
	sbc     #32
	bpl     ?f1
	and     #$7f
	dec     vecram_2ffc_bin_scale
?f1
	sta     vecram_2ffc_lin_scale
	rts





	.local
; L3ff2 = code to move to extreme corners of the screen, not drawing.
game_mode_04
	; Append a vjsr L3ff2 to the display list
	ldax_im	L3ff2
	jsr     vapp_vjsr_AX

	lda     #0
	sta     L6a
	sta     L6b
	sta     L6c
	sta     L6d
	sta     player_along
	sta     y_out_offset_l
	sta     y_out_offset_h


	lda     #$e0
	sta     y_scale_2_l


	lda     #$ff
	sta     y_scale_2_h
	jsr     Lb967
	sta     L77
	stx     L76
	ldx     #$0f
	stx     loopidx
?loop
	ldx     loopidx
	lda     enemy_movement_style,x
	beq     ?f3
	sta     y_scale
	lda     pending_vid+32,x
	sta     x_in
	lda     enemy_along_lsb+4,x
	sta     y_in
	jsr     coord_xform		; does a divide

	; Set color and intensity to 0
	lda     #0
	sta     draw_z

	jsr     ?f4
	jsr     Lc3ba
	lda     #$a0
	jsr     Lb56a
	jsr     ?f4
	ldx     #x_out_l
	jsr     vapp_centre_draw_to_X
	jsr     ?f5
	jsr     vapp_scale_lb	; A: b scale, Y: l scale
	lda     loopidx
	and     #$07
	cmp     #$07
	bne     ?f2
	lda     #_colidx_white
?f2
	tay
	sty     curcolor	; z and color
	lda     #$08	; sparkle
	; Append a vstat to the display list
	jsr     vapp_vstat_A_Y
	lda     #0	; no sparkle 
	; Append a vstat to the display list, z and color in z_draw
	jsr     vapp_vstat_A
	; Get the current double buffer address
	jsr     Lb967
	; Append a vjsr double_buffer to the display list
	jsr     vapp_vjsr_AX
?f3
	dec     loopidx
	bpl     ?loop
	jsr     ?f4
	lda     #1	; b scale
	jsr     vapp_scale_b

	; Append a vrts to the display list
	jsr     vapp_vrts
?f4
	ldx     vidptr_l
	ldy     vidptr_h
	lda     L76
	sta     vidptr_l
	stx     L76
	lda     L77
	sta     vidptr_h
	sty     L77
	rts
?f5
	lda     y_scale
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	ldy     #$00
?b6
	iny
	lsr     a
	bne     ?b6
	clc
	adc     #$02
	ldy     #$00
	rts









	.local
Lb967
	lda     dblbuf_flg
	beq     ?f1
	ldax_me	dblbuf_addr_A2
	clv
	bvc     ?f2
?f1
	ldax_me	dblbuf_addr_B2
?f2
	rts





; Two-dimensional arrays are indexed by level number first: x[L][P], etc.
; x,y: coordinates of points
; angle: angles of sectors (0-15 represents 0-360 degrees)
; remap: order levels are encountered in
; scale: (reciprocal of) scale of level
; y3d: 3-D Y offset - "camera height"
; y2d_l,y2d_h: 2-D Y offset - signed; y2d_h is high byte, y2d_l low
; open: $00 if level is closed, $ff if open
; fscale,fscale2: (reciprocal of) flipper scale - fscale2<<7 | fscale

lev_x	; x[16][16]

	.byte	$f0, $e7, $cf, $aa, $80, $56, $31, $19, $10, $19, $31, $56, $80, $aa, $cf, $e7
	.byte	$f0, $f0, $f0, $b8, $80, $48, $10, $10, $10, $10, $10, $48, $80, $b8, $f0, $f0
	.byte	$f0, $f0, $b8, $b8, $80, $48, $48, $10, $10, $10, $48, $48, $80, $b8, $b8, $f0
	.byte	$ec, $d5, $b1, $90, $70, $4f, $2b, $14, $14, $2b, $4f, $70, $90, $b1, $d5, $ec
	.byte	$f0, $c0, $a0, $94, $6c, $60, $40, $10, $10, $40, $60, $6c, $94, $a0, $c0, $f0
	.byte	$d9, $c2, $ac, $97, $80, $69, $52, $3c, $27, $10, $35, $5a, $80, $a6, $ca, $f0
	.byte	$ea, $e0, $9c, $80, $64, $20, $16, $50, $16, $20, $64, $80, $9c, $e0, $ea, $b0
	.byte	$10, $1e, $2c, $3a, $48, $56, $64, $70, $90, $9e, $ac, $ba, $c8, $d6, $e4, $f0
	.byte	$10, $1e, $2d, $3c, $4b, $5a, $69, $78, $87, $96, $a5, $b4, $c3, $d2, $e1, $f0
	.byte	$10, $10, $10, $10, $16, $29, $46, $69, $97, $ba, $d7, $ea, $f0, $f0, $f0, $f0
	.byte	$10, $24, $30, $36, $3e, $49, $5a, $75, $94, $a4, $ac, $ba, $da, $e2, $ea, $f0
	.byte	$80, $70, $48, $20, $10, $20, $48, $70, $80, $90, $b8, $e0, $f0, $e0, $b8, $90
	.byte	$da, $a4, $87, $80, $79, $5c, $26, $10, $10, $20, $48, $80, $b8, $e0, $f0, $f0
	.byte	$10, $10, $30, $30, $50, $50, $70, $70, $90, $90, $b0, $b0, $d0, $d0, $f0, $f0
	.byte	$b0, $80, $50, $47, $18, $30, $18, $47, $50, $80, $b0, $b9, $e8, $d4, $e8, $b9
	.byte	$10, $1e, $21, $28, $3c, $55, $66, $73, $8d, $9a, $ab, $c4, $d8, $df, $e2, $f0


lev_y	; y[16][16]
	.byte	$80, $aa, $cf, $e7, $f0, $e7, $cf, $aa, $80, $56, $31, $19, $10, $19, $31, $56
	.byte	$80, $b8, $f0, $f0, $f0, $f0, $f0, $b8, $80, $48, $10, $10, $10, $10, $10, $48
	.byte	$80, $b8, $b8, $f0, $f0, $f0, $b8, $b8, $80, $48, $48, $10, $10, $10, $48, $48
	.byte	$94, $b0, $b8, $a7, $a7, $b8, $b0, $94, $6c, $50, $48, $59, $59, $48, $50, $6c
	.byte	$96, $a3, $c5, $f0, $f0, $c5, $a3, $96, $6a, $5d, $3b, $10, $10, $3b, $5d, $6a
	.byte	$3d, $6a, $97, $c4, $f0, $c4, $97, $6a, $3d, $10, $10, $10, $10, $10, $10, $10
	.byte	$a0, $e0, $ea, $b0, $ea, $e0, $a0, $80, $60, $20, $16, $50, $16, $20, $60, $80
	.byte	$f0, $d0, $b0, $90, $70, $50, $30, $10, $10, $30, $50, $70, $90, $b0, $d0, $f0
	.byte	$40, $40, $40, $40, $40, $40, $40, $40, $40, $40, $40, $40, $40, $40, $40, $40
	.byte	$f0, $cb, $a6, $80, $5c, $39, $20, $12, $12, $20, $39, $5c, $80, $a6, $cb, $f0
	.byte	$c0, $a6, $8a, $6a, $4a, $2f, $14, $24, $20, $39, $59, $75, $72, $90, $b0, $d0
	.byte	$80, $57, $48, $57, $80, $a9, $ba, $a9, $80, $57, $48, $57, $80, $a9, $ba, $a9
	.byte	$e4, $e8, $b7, $80, $b7, $e8, $e4, $b2, $7a, $47, $20, $10, $20, $47, $7a, $b2
	.byte	$90, $70, $70, $50, $50, $30, $30, $10, $10, $30, $30, $50, $50, $70, $70, $90
	.byte	$e6, $d0, $e6, $b9, $ae, $80, $52, $47, $14, $30, $14, $47, $52, $80, $ae, $b9
	.byte	$7e, $6a, $51, $3a, $2c, $2c, $38, $4e, $4e, $38, $2c, $2c, $3a, $51, $6a, $7e

lev_angle	; angle[16][16]

	.byte	$05, $06, $07, $08, $09, $0a, $0b, $0c, $0d, $0e, $0f, $00, $01, $02, $03, $04
	.byte	$04, $04, $08, $08, $08, $08, $0c, $0c, $0c, $0c, $00, $00, $00, $00, $04, $04
	.byte	$04, $08, $04, $08, $08, $0c, $08, $0c, $0c, $00, $0c, $00, $00, $04, $00, $04
	.byte	$06, $07, $09, $08, $07, $09, $0a, $0c, $0e, $0f, $01, $00, $0f, $01, $02, $04
	.byte	$07, $06, $05, $08, $0b, $0a, $09, $0c, $0f, $0e, $0d, $00, $03, $02, $01, $04
	.byte	$05, $05, $05, $05, $0b, $0b, $0b, $0b, $0b, $00, $00, $00, $00, $00, $00, $05
	.byte	$04, $08, $0b, $05, $08, $0c, $0e, $09, $0c, $00, $03, $0d, $00, $04, $07, $02
	.byte	$0d, $0d, $0d, $0d, $0d, $0d, $0d, $00, $03, $03, $03, $03, $03, $03, $03, $00
	.byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.byte	$0c, $0c, $0c, $0d, $0e, $0f, $0f, $00, $01, $01, $02, $03, $04, $04, $04, $00
	.byte	$0e, $0d, $0c, $0d, $0d, $0d, $01, $0f, $02, $03, $03, $00, $03, $03, $03, $00
	.byte	$0b, $09, $07, $05, $03, $01, $0f, $0d, $0d, $0f, $01, $03, $05, $07, $09, $0b
	.byte	$08, $0b, $0c, $04, $05, $08, $0b, $0c, $0d, $0e, $0f, $01, $02, $03, $04, $05
	.byte	$0c, $00, $0c, $00, $0c, $00, $0c, $00, $04, $00, $04, $00, $04, $00, $04, $00
	.byte	$0a, $06, $0c, $08, $0e, $0a, $00, $0c, $02, $0e, $04, $00, $06, $02, $08, $04
	.byte	$0e, $0c, $0d, $0e, $00, $02, $02, $00, $0e, $0e, $00, $02, $03, $04, $02, $00


lev_remap	; remap[16]

	.byte	$00, $01, $02, $03, $04, $05, $06, $07, $0d, $09, $08, $0c, $0e, $0f, $0a, $0b

lev_scale	; scale[16]

	.byte	$18, $1c, $18, $0f, $18, $18, $18, $18, $0a, $18, $10, $0f, $18, $0c, $14, $0a

lev_y3d	; y3d[16]

	.byte	$50, $50, $50, $68, $50, $50, $68, $b0, $a0, $50, $90, $80, $20, $b0, $60, $a0

lev_y2d	; y2d_l[16]

	.byte	$40, $20, $40, $80, $40, $40, $70, $60, $00, $20, $40, $00, $a0, $40, $40, $00

lev_y2db	; y2d_h[16]

	.byte	$ff, $ff, $ff, $ff, $ff, $ff, $ff, $00, $01, $ff, $00, $00, $fe, $01, $ff, $01

lev_open	; open[16]

	.byte	$00, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $ff, $00, $ff

lev_fscale	; fscale[16]
	.byte	$00, $00, $60, $40, $00, $00, $48, $40, $50, $28, $50, $00, $00, $50, $00, $40

lev_fscale2	; fscale2[16]

	.byte	$04, $04, $03, $04, $04, $04, $03, $04, $05, $04, $04, $04, $04, $04, $04, $05






	.byte   $3e	; bcfc






	.local
graphic_at_mid
	sta     L55
	lda     mid_x,y
	sta     x_in
	lda     mid_y,y
	sta     y_in
Lbd09
	jsr     coord_xform
	ldx     #x_out_l
	jsr     vapp_scl_cen_drw_to_X
	lda     #$00
	sta     vidptr_offset
	jsr     Lbd3e		; does a division and appends the result as a vsale to the display list
	lda     L78
	eor     #$07
	asl     a
	cmp     #$0a
	bcs     ?f1
	lda     #$0a
?f1
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (vidptr),y
	iny
	lda     #$60
	sta     (vidptr),y
	iny
	sty     vidptr_offset

	; Append the graphic_table entry at offset L55 to the display list
	ldy     L55

	ldx     graphic_table+1,y
	lda     graphic_table,y
	ldy     vidptr_offset		; offset into the display list
	jmp     vapp_A_X_at_y




	.local

; Does a division and appends the result as a vscale to the display list
Lbd3e
	lda     y_scale
	cmp     #$10
	bcc     ?f4
	sec
	sbc     y_scale_2_l
	sta     mb_set_divisor_l	; divisor low
	lda     #$00
	sbc     y_scale_2_h
	sta     mb_set_divisor_h	; divisor high
	lda     #24		; 24 bit divide
	sta     mb_set_divide_width	; set set divide width
	lda     La0
	sta     mb_set_dividend_m	; dividend mid
; R11L:R10H:R10L / R7H:R7L  R6L #of bits
	sta     mb_cmd_divide
?b1
	bit     mb_status_rd
	bmi     ?b1
	lda     mb_rd_l
	sta     L79
	lda     mb_rd_h
	sta     L7a
	ldx     #15
	stx     mb_set_divide_width
	sec
	sbc     #$01
	bne     ?f2
	lda     #$01
?f2
	ldx     #$00
?b3
	inx
	asl     L79
	rol     a
	bcc     ?b3
	lsr     a
	eor     #$7f
	clc
	adc     #$01
	tay
	txa
	clv
	bvc     ?f5
?f4
	lda     #$01
	ldy     #$00
?f5
	sta     L78
	pha
	tya
	ldy     vidptr_offset
	sta     (vidptr),y
	iny
	pla
	ora     #$70		; _vg_opc_vscale?
	sta     (vidptr),y
	iny
	rts









	.local
; Draw a rotatable/scalable graphic.
; Y = segment number
; A = graphic to draw
; y_scale = position along tube
draw_linegfx
	sta     L36
	lda     tube_x,y
	sta     x_in
	lda     tube_y,y
	sta     y_in
	lda     y_scale
	sta     L2f
	tya
	clc
	adc     #$01
	and     #$0f
	tax
	lda     tube_x,x
	sta     L2e
	lda     tube_y,x
	sta     L30
	lda     #$00
	sta     fscale
	lda     #$04
	sta     fscale+1
	ldy     L36
Lbdcb
	lda     y_scale_2_h
	bmi     ?f1
	lda     y_scale
	cmp     y_scale_2_l
	bcs     ?f1
	rts
?f1
	lda     ?t1,y
	sta     rgr_pt_inx
	lda     ?t2,y
	sta     L38
	ldy     curcolor	; z and color
	lda     #$08		; sparkle
	; Append a vstat to the display list
	jsr     vapp_vstat_A_Y
	jsr     coord_xform
	ldx     #x_out_l
	jsr     vapp_scl_cen_drw_to_X
	lda     L2e
	sta     x_in
	lda     L2f
	sta     y_scale
	lda     L30
	sta     y_in
	jsr     coord_xform
	ldy     fscale		; l scale
	lda     fscale+1	; b scale
	jsr     vapp_scale_lb
	lda     x_out_l
	sec
	sbc     L6a
	sta     L79
	lda     L62
	sbc     L6b
	sta     L9b
	bmi     ?f3
	beq     ?f2
	lda     #$ff
	sta     L79
?f2
	clv
	bvc     ?f6
?f3
	cmp     #$ff
	beq     ?f4
	lda     #$ff
	clv
	bvc     ?f5
?f4
	lda     L79
	eor     #$ff
	clc
	adc     #$01
	bcc     ?f5
	lda     #$ff
?f5
	sta     L79
?f6
	lda     y_out_l
	sec
	sbc     L6c
	sta     L89
	lda     y_out_h
	sbc     L6d
	sta     L9d
	bmi     ?f8
	beq     ?f7
	lda     #$ff
	sta     L89
?f7
	clv
	bvc     ?f11
?f8
	cmp     #$ff
	beq     ?f9
	lda     #$ff
	clv
	bvc     ?f10
?f9
	lda     L89
	eor     #$ff
	clc
	adc     #$01
?f10
	sta     L89
?f11
	lda     #0
	sta     L82
	sta     L92
	lda     L79
	asl     a
	rol     L82
	sta     L7a
	asl     a
	sta     L7c
	lda     L82
	rol     a
	sta     L84
	lda     L7c
	adc     L79
	sta     L7d	; not used?
	lda     L84
	adc     #0
	sta     L85
	lda     L7a
	adc     L79
	sta     L7b
	lda     L82
	adc     #0
	sta     L83
	sta     L86
	lda     L7b
	asl     a
	sta     L7e
	rol     L86
	adc     L79
	sta     L7f
	lda     L86
	adc     #0
	sta     L87
	lda     L89
	asl     a
	rol     L92
	sta     L8a
	asl     a
	sta     L8c
	lda     L92
	rol     a
	sta     L94
	lda     L8c
	adc     L89
	sta     L8d
	lda     L94
	adc     #$00
	sta     L95
	lda     L8a
	adc     L89
	sta     L8b
	lda     L92
	adc     #$00
	sta     L93
	sta     L96
	lda     L8b
	asl     a
	sta     L8e
	rol     L96
	adc     L89
	sta     L8f
	lda     L96
	adc     #0
	sta     L97
	ldy     #0
	sty     vidptr_offset
; Top of loop for points in claw
?b12
	ldy     L38

	; get the move/draw flag
	lda     ?t3+1,y

	; if the move/draw flag is 0, use the 0 as the color and intensity
	cmp     #$01
	bne     ?f13

	; the move/draw flag is set, so set the color and intensity
	lda     #$c0	; Color 0, intensity 12
?f13

	; Save the color and intensity
	sta     draw_z


	lda     ?t3,y
	sta     L2d
	iny
	iny
	sty     L38
	tax
	and     #$07
	tay
	txa
	asl     a
	sta     L2b
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	and     #$07
	tax
	lda     L2b
	eor     L9b
	bmi     ?f14
	lda     L78,y
	sta     x_out_l
	lda     L80,y
	clv
	bvc     ?f15
?f14
	lda     L78,y
	eor     #$ff
	clc
	adc     #$01
	sta     x_out_l
	lda     L80,y
	eor     #$ff
	adc     #$00
?f15
	sta     L62
	lda     L2d
	eor     L9d
	bpl     ?f16
	lda     L88,x
	clc
	adc     x_out_l
	sta     x_out_l
	lda     L90,x
	adc     L62
	clv
	bvc     ?f17
?f16
	lda     x_out_l
	sec
	sbc     L88,x
	sta     x_out_l
	lda     L62
	sbc     L90,x
?f17
	sta     L62
	lda     L2b
	eor     L9d
	bmi     ?f18
	lda     L88,y
	sta     y_out_l
	lda     L90,y
	clv
	bvc     ?f19
?f18
	lda     L88,y
	eor     #$ff
	clc
	adc     #$01
	sta     y_out_l
	lda     L90,y
	eor     #$ff
	adc     #$00
?f19
	sta     y_out_h
	lda     L2d
	eor     L9b
	bpl     ?f20
	lda     y_out_l
	sec
	sbc     L78,x
	sta     y_out_l
	lda     y_out_h
	sbc     L80,x
	clv
	bvc     ?f21
?f20
	lda     y_out_l
	clc
	adc     L78,x
	sta     y_out_l
	lda     y_out_h
	adc     L80,x
?f21
	sta     y_out_h
	ldy     vidptr_offset
	lda     y_out_l
	sta     (vidptr),y
	iny
	lda     y_out_h
	and     #$1f
	sta     (vidptr),y
	iny
	lda     x_out_l
	sta     (vidptr),y
	iny
	lda     L62
	and     #$1f	; XXX fours bits of color, and the lsb of intensity?
	; Or the color in A with the intensity in drawz
	ora     draw_z
	sta     (vidptr),y
	iny
	sty     vidptr_offset
	dec     rgr_pt_inx
	beq     ?f22
	jmp     ?b12
?f22
	ldy     vidptr_offset
	dey
	jmp     inc_vidptr

; Rotatable graphics values.
; These are indexed by graphic number:
; 0 = flipper
; 1-8 = claw positions within segment
; 9-d = pulsars of varying jaggedness
; I don't know what this byte is.
	.byte	$08	; bfb5
; Number of points.  Indexed by graphic number.
?t1
	.byte   _pv_len_0
	.byte   _pv_len_1
	.byte   _pv_len_2
	.byte   _pv_len_3
	.byte   _pv_len_4
	.byte   _pv_len_5
	.byte   _pv_len_6
	.byte   _pv_len_7
	.byte   _pv_len_8
	.byte   _pv_len_9
	.byte   _pv_len_10
	.byte   _pv_len_11
	.byte   _pv_len_12
	.byte   _pv_len_13

; Starting offsets into points vector.  Indexed by graphic number.
?t2
	.byte   _pv_offset_0
	.byte   _pv_offset_1
	.byte   _pv_offset_2
	.byte   _pv_offset_3
	.byte   _pv_offset_4
	.byte   _pv_offset_5
	.byte   _pv_offset_6
	.byte   _pv_offset_7
	.byte   _pv_offset_8
	.byte   _pv_offset_9
	.byte   _pv_offset_10
	.byte   _pv_offset_11
	.byte   _pv_offset_12
	.byte   _pv_offset_13


; Points vector.
; Each point occupies two bytes.  The second is just a draw/nodraw flag,
; always 0 (nodraw) or 1 (draw).  The first holds the coordinates.  They
; are encoded thus:
; xx xxx xxx
; || ||| +++---> X coordinate
; || +++-------> Y coordinate
; |+-----------> 1 if X coord should be negated, 0 if not
; +------------> 1 if Y coord should be negated, 0 if not
; For example, the two bytes at Lbfd6 are $4a $01.  The $01 indicates that
; a line should be drawn; the $4a is 01 001 010, so we have X=-2 Y=1.

	.macro	pv_coords ; x, y, m/d
	.if	%1<0
	x .= -%1
	xf .= $40
	.else
	x .= %1
	xf .= $00
	.endif
	.if	%2<0
	y .= -%2
	yf .= $80
	.else
	y .= %2
	yf .= $00
	.endif
	.word	%3|yf|xf|(y*8)|x
	.endm

	.macro	pv_move	; x, y
	pv_coords	%1, %2, 0
	.endm

	.macro	pv_draw	; x, y
	pv_coords	%1, %2, $100
	.endm

; flipper
; Why flippers use eight lines rather than six I don't know.  Maybe someone
; felt the crossing point in the middle should (FSVO "should") be on a
; point with integral coordinates.  Maybe it's a historical artifact from
; some previous flipper design (the format here means you can't have a
; delta of 8 or higher for a line, so if the upper points were pulled out
; to the ends, you couldn't do a six-line flipper).
?t3
_pv_offset_0 = *-?t3
	pv_draw	4, 1
	pv_draw	4, -1
;Lbfd6
	pv_draw	-2, 1
	pv_draw	1, 1
	pv_draw	-3, -1
	pv_draw	-3, 1
	pv_draw	1, -1
	pv_draw	-2, -1
_pv_len_0 = (*-?t3-_pv_offset_0)/2

; claw position 1
_pv_offset_1 = *-?t3
	pv_draw	0, -2
	pv_draw	2, -1
	pv_draw	3, 4
	pv_draw	-3, -3
	pv_draw	-1, 0
	pv_draw	0, 2
	pv_draw	2, 1
	pv_draw	-3, -1
_pv_len_1 = (*-?t3-_pv_offset_1)/2

; claw position 2
_pv_offset_2 = *-?t3
	pv_draw	1, -2
	pv_draw	7, 2
	pv_draw	-3, 1
	pv_draw	2, -1
	pv_draw	-6, -1
	pv_draw	0, 1
	pv_draw	2, 1
	pv_draw	-3, -1
_pv_len_2 = (*-?t3-_pv_offset_2)/2

; claw position 3
_pv_offset_3 = *-?t3
	pv_draw	2, -2
	pv_draw	6, 2
	pv_draw	-3, 1
	pv_draw	2, -1
	pv_draw	-5, -1
	pv_draw	-1, 1
	pv_draw	2, 1
	pv_draw	-3, -1
_pv_len_3 = (*-?t3-_pv_offset_3)/2

; claw position 4
_pv_offset_4 = *-?t3
	pv_draw	3, -2
	pv_draw	5, 2
	pv_draw	-3, 1
	pv_draw	2, -1
	pv_draw	-4, -1
	pv_draw	-2, 1
	pv_draw	2, 1
	pv_draw	-3, -1
_pv_len_4 = (*-?t3-_pv_offset_4)/2

; claw position 5
_pv_offset_5 = *-?t3
	pv_draw	5, -2
	pv_draw	3, 2
	pv_draw	-3, 1
	pv_draw	2, -1
	pv_draw	-2, -1
	pv_draw	-4, 1
	pv_draw	2, 1
	pv_draw	-3, -1
_pv_len_5 = (*-?t3-_pv_offset_5)/2

; claw position 6
_pv_offset_6 = *-?t3
	pv_draw	6, -2
	pv_draw	2, 2
	pv_draw	-3, 1
	pv_draw	2, -1
	pv_draw	-1, -1
	pv_draw	-5, 1
	pv_draw	2, 1
	pv_draw	-3, -1
_pv_len_6 = (*-?t3-_pv_offset_6)/2

; claw position 7
_pv_offset_7 = *-?t3
	pv_draw	7, -2
	pv_draw	1, 2
	pv_draw	-3, 1
	pv_draw	2, -1
	pv_draw	0, -1
	pv_draw	-6, 1
	pv_draw	2, 1
	pv_draw	-3, -1
_pv_len_7 = (*-?t3-_pv_offset_7)/2

; claw position 8
_pv_offset_8 = *-?t3
	pv_move	3, 1
	pv_draw	3, -4
	pv_draw	2, 1
	pv_draw	0, 2
	pv_draw	-3, 1
	pv_draw	2, -1
	pv_draw	0, -2
	pv_draw	-1, 0
	pv_draw	-3, 3
_pv_len_8 = (*-?t3-_pv_offset_8)/2

; pulsar variant 1
_pv_offset_9 = *-?t3
	pv_draw	2, -3
	pv_draw	1, 6
	pv_draw	1, -6
	pv_draw	1, 6
	pv_draw	1, -6
	pv_draw	2, 3
_pv_len_9 = (*-?t3-_pv_offset_9)/2

; pulsar variant 2
_pv_offset_10 = *-?t3
	pv_move	1, 0
	pv_draw	1, -2
	pv_draw	1, 4
	pv_draw	1, -4
	pv_draw	1, 4
	pv_draw	1, -4
	pv_draw	1, 2
_pv_len_10 = (*-?t3-_pv_offset_10)/2

; pulsar variant 3
_pv_offset_11 = *-?t3
	pv_move	1, 0
	pv_draw	1, -1
	pv_draw	1, 2
	pv_draw	1, -2
	pv_draw	1, 2
	pv_draw	1, -2
	pv_draw	1, 1
_pv_len_11 = (*-?t3-_pv_offset_11)/2

; pulsar variant 4
_pv_offset_12 = *-?t3
	pv_move	1, 0
	pv_draw	2, -1
	pv_draw	2, 2
	pv_draw	2, -1
_pv_len_12 = (*-?t3-_pv_offset_12)/2

; pulsar variant 5
_pv_offset_13 = *-?t3
	pv_move	1, 0
	pv_draw	6, 0
_pv_len_13 = (*-?t3-_pv_offset_13)/2














	.local


; coord_xform
;
; In
;     x_in tube_x
;     y_scale  y_in_l (lev_y)
;     y_in tube_y
;     x_in_offset constant $80
;     y_scale_2_l lev_scale
;     y_scale_2_h 9th bit of lev_scale
;     x_out_offset_l
;     x_out_offset_h
;     y_out_offset_l y2d_l
;     y_out_offset_h y2d_h
;     y3d   camera height
;
; Scratch
;     abs_delta_x abs (tube_x - $80)
;     y_neg y_in<y3d
;     x_neg tube_x<$80
;
; Return 
;     x_out_l = x coord result low 
;     x_out_h = x coord result high
;     y_out_l = y coord result low 
;     y_out_h = y coord result high

coord_xform

	; divisor low <= yscale - y_scale_2_l ; lev_y - lev_scale
	lda	y_scale
	sec
	sbc     y_scale_2_l
	sta     mb_set_divisor_l	; divisor low


	; divisor high <- 0 - y_scale_2_h

	lda     #0
	sbc     y_scale_2_h
	sta     mb_set_divisor_h	; divisor high


	; ?If y_scale_2_h positive, set the divisor to 1
	bpl     ?f1
	lda     #0
	sta     mb_set_divisor_h	; divisor high
	lda     #1
	sta     mb_set_divisor_l	; divisor low
?f1


	lda     y_in
	cmp     y3d		; camera "height"
	bcc     ?f2

	; y_in >= y3d
	; A <- y_in - y3d
	; X <- 0
	sbc     y3d
	ldx     #0
	clv
	bvc     ?f3


?f2
	; y_in < y3d
	; A <- y3d - y_in
	; X <= -1
	lda     y3d
	sec
	sbc     y_in
	ldx     #$ff


?f3
	; A <- abs (y_in - y3d)
	sta     mb_set_dividend_m	; dividend mid


	sta     mb_cmd_divide	; divide

	; save y_in<y3d
	stx     y_neg


	lda     x_in	; tube_x
	cmp     x_in_offset		; constant $80
	bcc     ?f4

	; tube_x >= $80
	; A <- tube_x - $80
	; X <- 0

	sbc     x_in_offset
	ldx     #$00
	clv
	bvc     ?f5


?f4
	; tube_x < $80
	; A <- $80 - tube_x
	; X <- -1

	lda     x_in_offset
	sec
	sbc     x_in
	ldx     #$ff


?f5
	; abs_delta_x <- abs (tube_x - $80)
	; x_neg <- tube_x < $80

	sta     abs_delta_x
	stx     x_neg


?wait_for_mb
	bit     mb_status_rd
	bmi     ?wait_for_mb


	; y_out_l = y coord result low 
	; y_out_h = y coord result high
	lda     mb_rd_l
	sta     y_out_l
	lda     mb_rd_h
	sta     y_out_h

	; A <- abs (tube_x - $80)
	lda     abs_delta_x
	sta     mb_set_dividend_m	; dividend mid

	; Divide
	sta     mb_cmd_divide	; divide

	
	; A <- y_in<y3d
	lda     y_neg
	bmi     ?f8

	;
	; y_in >= y3d
	;

	; ycoord_l <- ycoord_l + y2d_l
	
	lda     y_out_l
	clc
	adc     y_out_offset_l	; y2d_l
	sta     y_out_l

	; ycoord_h <- ycoord_h + y2d_h

	lda     y_out_h
	adc     y_out_offset_h
	bvc     ?f7

	; Clip to $7fff

	lda     #$ff
	sta     y_out_l
	lda     #$7f
?f7
	sta     y_out_h
	clv
	bvc     ?wait_mb_2


?f8
	;
	; y_in > y3d
	;

	; ycoord_l <- y2d_l - ycoord_l
	
	lda     y_out_offset_l
	sec
	sbc     y_out_l
	sta     y_out_l

	; ycoord_h <- y2d_h - ycoord_h
	
	lda     y_out_offset_h
	sbc     y_out_h
	bvc     ?f9

	; Clip to $8000

	lda     #$00
	sta     y_out_l
	lda     #$80
?f9
	sta     y_out_h


?wait_mb_2
	bit     mb_status_rd
	bmi     ?wait_mb_2


	; x_out_l = x coord result low 
	; x_out_h = x coord result high

	lda     mb_rd_l
	sta     x_out_l
	lda     mb_rd_h
	sta     x_out_h


	; X <- tube_x < $80

	ldx     x_neg
	bmi     ?f13

	;
	; tube_x >= $80
	;

	; xcoord_l <- xcoord_l + x_out_offset_l

	lda     x_out_l
	clc
	adc     x_out_offset_l
	sta     x_out_l


	; xcoord_h <- xcoord_h + x_out_offset_h


	lda     x_out_h
	adc     x_out_offset_h
	bvc     ?f12

	; Clip to $7fff

	lda     #$ff
	sta     x_out_l
	lda     #$7f
?f12
	sta     x_out_h
	rts



?f13
	;
	; tube_x < $80
	;

	; xcoord_l <- x_out_offset_l - xcoord_l

	lda     x_out_offset_l
	sec
	sbc     x_out_l
	sta     x_out_l


	; xcoord_h <- x_out_offset_h - xcoord_h

	lda     x_out_offset_h
	sbc     x_out_h
	bvc     ?f14

	; Clip to $8000
	lda     #$00
	sta     x_out_l
	lda     #$80
?f14
	sta     x_out_h

	rts








	.local
; Initialization code of some kind
Lc16e
	jsr     draw_header
	lda     #$80
	sta     x_in_offset
	lda     #$ff
	sta     L0114
	jsr     Lc235
	lda     L0133
	bne     ?f1
	; Reset vector machine
	sta     vg_reset
?f1
	; Clear information counter for frame update rate (Usually done when
	; a new screen is presented
	lda     #$00
	sta     L0133
	lda     Lcec6
	sta     vecram
	lda     Lcec6+1
	sta     vecram+1
; Install the correct colours for curlevel.
setcolours
	lda     curlevel
;Lc198
	and     #$70
	cmp     #$5f
	bcc     ?f2
	lda     #$5f
?f2
	lsr     a
	ora     #$07
	tax
	ldy     #$07
;Lc1a6
?loop
	; Load color_ram depending on the level

	lda     Lc1fd,x
	and     #$0f
	sta     col_ram_shadow,y
	sta     col_ram,y
;Lc1b1
	lda     Lc1fd,x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     col_ram_shadow_plyr_shot_clr,y
	sta     col_ram_plyr_shot_clr,y
	dex
	dey
	bpl     ?loop
	rts





	.local
Lc1c3
	lda     #$00
	sta     L81
	sta     L91
	sta     L80
	sta     L78
	sta     L90
	sta     L88

	; Clear the mathbox
	lda     #$00
	sta     mb_set_00_l
	sta     mb_set_00_h
	sta     mb_set_02_l
	sta     mb_set_02_h
	sta     mb_set_03_l
	sta     mb_set_03_h
	sta     mb_set_04_h
	sta     mb_set_01_h
	sta     mb_set_10_l
	sta     mb_set_10_h
	sta     mb_set_11_l
	sta     mb_set_11_h
	lda     #15
	sta     mb_set_divide_width
	rts




	.local
; Used at Lc1a6 and Lc1b1.
; Appear to be blocks of 8 bytes giving colours for the various
; blocks of 16 levels.
Lc1fd
?red_cya = (_rgb_red*16)|_rgb_cya
?red_mag = (_rgb_red*16)|_rgb_mag
?red_yel = (_rgb_red*16)|_rgb_yel
?yel_yel = (_rgb_yel*16)|_rgb_yel

; color index:         0         1         2         3      4/12         5         6         7
	.byte	_rgb_whi, _rgb_yel, _rgb_mag, _rgb_red, ?red_cya, _rgb_gre, _rgb_blu, _rgb_blu	; levels 1-16
	.byte	_rgb_whi, _rgb_gre, _rgb_blu, _rgb_mag, ?yel_yel, _rgb_cya, _rgb_red, _rgb_red	; levels 17-32
	.byte	_rgb_whi, _rgb_blu, _rgb_cya, _rgb_gre, ?red_mag, _rgb_red, _rgb_yel, _rgb_yel	; levels 33-48
	.byte	_rgb_whi, _rgb_blu, _rgb_mag, _rgb_gre, ?red_yel, _rgb_red, _rgb_cya, _rgb_cya	; levels 49-64
	.byte	_rgb_whi, _rgb_yel, _rgb_mag, _rgb_red, ?red_cya, _rgb_gre, _rgb_bla, _rgb_blu	; levels 65-80
	.byte	_rgb_whi, _rgb_red, _rgb_mag, _rgb_yel, ?red_cya, _rgb_blu, _rgb_gre, _rgb_gre	; levels 81-99 (see Lc198)



; Color indices
Lc22d
	.byte	_colidx_tubes, _colidx_red, _colidx_player, _colidx_cyan, _colidx_white, _colidx_score, _colidx_score, _colidx_score








	.local
Lc235
	ldx     curplayer
	lda     players_level,x
	jsr     get_tube_no
	; A is tube_number * 16 + 15
	pha


	ldy     curtube
	lda     lev_scale,y
	eor     #$ff
	clc
	adc     #$01
	sta     y_scale_2_l	; - lev_scale
	sta     L5d


	lda     #$10
	sec
	sbc     y_scale_2_l
	sta     La0
	lda     #$ff
	sta     y_scale_2_h
	lda     lev_y3d,y
	sta     y3d
	lda     lev_open,y
	sta     open_level
	lda     next_game_state
	cmp     #_game_state_30
	bne     ?f1
	lda     lev_y2d,y
	sta     y_out_offset_l
	lda     lev_y2db,y
	sta     y_out_offset_h
	clv
	bvc     ?f3
?f1
	lda     lev_y2d,y
	sec
	sbc     y_out_offset_l
	sta     L0121
	lda     lev_y2db,y
	.byte	$ed, $69, $00	; sbc     y_out_offset_h ; XXX assembler is generating a page zero reference
	ldx     #$03
?b2
	lsr     a
	ror     L0121
	dex
	bpl     ?b2
?f3
	lda     #$00
	sta     x_out_offset_l
	sta     x_out_offset_h
	lda     #$00
	sta     L010f
	sta     L0110
	lda     #$2c
	sta     L0113
	pla
	tay


	; Loop over 16 points

	ldx     #$0f
?loop
	lda     lev_x,y
	sta     tube_x,x
	lda     lev_y,y
	sta     tube_y,x
	lda     #0
	sta     xout_h_array,x
	sta     yout_h_array,x
	sta     L039a,x
	lda     lev_angle,y
	sta     segment_angle,x
	dey
	dex
	bpl     ?loop



	ldy     #$00
	ldx     #$0f
?b5
	lda     tube_x,y
	sec
	adc     tube_x,x
	ror     a
	sta     mid_x,x
	lda     tube_y,y
	sec
	adc     tube_y,x
	ror     a
	sta     mid_y,x
	dey
	bpl     ?f6
	ldy     #$0f
?f6
	dex
	bpl     ?b5
	rts






	.local

; get_tube_no
;
; Take the level number in A, do the random thing for level 99, and fetch
; the tube number for the level.  Also return a value with the tube number
; in the high four bits and $f in the low four bits; this is used as an
; index into the [][] tables.
;
; In:
;  A - level number (base 0)
;
; Out:
;  curtube  tube number (0 - 15)
;  Y        level number mod 16
;  A        tube_number * 16 + 15 (offset of last entry in a [16][16] table
;  X        level number / 16

get_tube_no

	; Init X <- 0

	ldx     #0

	; [ a - 98 ]

	cmp     #n_levels-1
	bcc     ?f1

	; A == 99

	; Get an unusual random number
	;  0-31, 64-95

	lda     pokey1_rand
	and     #$5f		; 0101 1111

?f1


; This appears to be "high nibble into X, keep low nibble in A".  I can't
; see why not compute that directly with shifts and masks instead of a
; subtract loop.  Maybe the $10 here was an assembly-time constant rather
; than being a deeply-wired-in value?  That's not very plausible, though,
; as level numbers are shifted by four bits elsewhere.


	; A has a level number

	; Branch if level number < 16
	cmp     #16

	; A is >= 16; subtract 16 and increment X; repeat test
?b2
	bcc     ?f3
	inx
	sec
	sbc     #16
?f3

	cmp     #16
	bcs     ?b2

	; A = level number mod 16
	; X = level number / 16


	; Y <= level number mod 16

	tay

	; lev_remap: [0, 1, 2, 3, 4, 5, 6, 7, 13, 9, 8, 12, 15, 16, 10, 11]

	lda     lev_remap,y
	sta     curtube


	; A <- tube_number * 16 + 15
	asl     a
	asl     a
	asl     a
	asl     a
	ora     #$0f

	rts





; Draw tubes?

	.local
Lc30d
	lda     L0110
	bne     ?f2
	lda     #$f0
	sta     y_scale
	ldx     #$4f
	jsr     Lc473	; returns fscale?
	sta     L0110
	beq     ?f1
	sta     L010f
?f1
	lda     L010f
	bne     ?f2
	lda     #$10
	sta     y_scale
	jsr     Lc453
	lda     y_scale
	ldx     #$0f
	jsr     Lc473	; returns fscale?
	sta     L010f
?f2
	lda     #1	; b scale
	jsr     vapp_scale_b
	ldy     #_colidx_tubes
	sty     curcolor
	ldx     L0110
	beq     ?f3
	rts
?f3				; code doesn't get here
	ldx     L0113
	bne     ?f4
	rts
?f4
	ldx     #$0f
?b5
	lda     #$c0
	jsr     Lc3ee
	dex
	bpl     ?b5
	ldy     #_colidx_tubes
	sty     curcolor	; z and color
	lda     #$08		; sparkle
	; Append a vstat to the display list
	jsr     vapp_vstat_A_Y
	ldy     #$4f
	lda     L0110
	jsr     ?f6
	ldy     #$0f
	lda     L010f
?f6
	bne     ?f10
	sty     loopidx
	lda     xout_l_array,y
	sta     x_out_l
	lda     xout_h_array,y
	sta     x_out_h
	lda     yout_l_array,y
	sta     y_out_l
	lda     yout_h_array,y
	sta     y_out_h
	ldx     #x_out_l
	jsr     vapp_centre_draw_to_X
; Bug 1 XXX vidptr_bookmark is apparently a bookmap of vidptr; bug 1 occurs when
; it is used to update a displya list, but this code that sets never 
; gets called, so the pointer is zero, and corruption occurs.
	lda     vidptr_l		;bug 1 XXX this code is never executed
	sta     vidptr_bookmark_l
	lda     vidptr_h
	sta     vidptr_bookmark_h
	ldx     #$0f
	lda     open_level
	beq     ?f7
	dex
?f7
	; Set color to 0 and intensity to 14
	lda     #$c0
	sta     draw_z

	stx     L38
?b8
	dec     loopidx
	lda     loopidx
	and     #$0f
	cmp     #$0f
	bne     ?f9
	lda     loopidx
	clc
	adc     #$10
	sta     loopidx
?f9
	jsr     get_coords_from_table
	dec     L38
	bpl     ?b8
?f10
	rts






	.local
Lc3ba
	lda     x_out_l
	sec
	sbc     L6a
	sta     L6e
	lda     x_out_h
	sbc     L6b
	sta     L6f
	lda     y_out_l
	sec
	sbc     L6c
	sta     L70
	lda     y_out_h
	sbc     L6d
	sta     L71
	ldx     #$6e
	jsr     Ldf92
	lda     x_out_l
	sta     L6a
	lda     x_out_h
	sta     L6b
	lda     y_out_l
	sta     L6c
	lda     y_out_h
	sta     L6d

	; Set color to 0 and intensity to 14
	lda     #$c0
	sta     draw_z

	rts









	.local
Lc3ee
; A: color and intensity in vstat format
	stx     loopidx
	pha
	ldy     curcolor
	lda     #$08
	; Append a vstat to the display list
	jsr     vapp_vstat_A_Y
	jsr     Lc43c
	ldx     #x_out_l
	jsr     vapp_centre_draw_to_X
	pla
	; Set color and intensity
	sta     draw_z
	pha
	jsr     get_coords_from_table
	dec     loopidx
	ldy     curcolor ; z and color for vstat
	; Set color and intensity to 0
	lda     #0
	sta     draw_z
	lda     #$08	; sparkle
	; Append a vstat to the display list
	jsr     vapp_vstat_A_Y
	jsr     get_coords_from_table
	; Set color and intensity
	pla
	sta     draw_z
	jsr     Lc43c
	jsr     Lc3ba
	ldx     loopidx
	rts














	.local

get_coords_from_table

; Set x_out_l <= xout_l_array [loopidx]
;     x_out_h <= xout_h_array [loopidx]
;     y_out_l <= yout_l_array [loopidx]
;     y_out_h <= yout_h_array [loopidx]

	ldx     loopidx
	lda     xout_l_array,x
	sta     x_out_l
	lda     xout_h_array,x
	sta     x_out_h
	lda     yout_l_array,x
	sta     y_out_l
	lda     yout_h_array,x
	sta     y_out_h
	jmp     Lc3ba











	.local
Lc43c
	ldx     loopidx
	lda     L036a,x
	sta     x_out_l
	lda     L035a,x
	sta     x_out_h
	lda     L038a,x
	sta     y_out_l
	lda     L037a,x
	sta     y_out_h
	rts














	.local
Lc453
	lda     y_scale_2_h
	bne     ?f4
	lda     y_scale
	sec
	sbc     y_scale_2_l
	bcc     ?f1
	cmp     #$0c
?f1
	bcs     ?f4
	lda     y_scale_2_l
	clc
	adc     #$0f
	bcs     ?f2
	cmp     #$f0
?f2
	bcc     ?f3
	lda     #$f0
?f3
	sta     y_scale
?f4
	rts
	.byte	$db






	.local


; Bug 1 -- I beleive that this code is returning an incorrect value, which is stored in L0110
; Piracy protection or mathbox bug?

; Returns an updated fscale in A

Lc473
	; A contains $FO or the contents of y_scale; a y-coord from lev_y

	sta     y_scale

	; X contains $4F or $0F

	stx     L38

	lda     #0
	sta     fscale

	ldx     #15
	stx     loopidx

?loop
	ldx     loopidx
	lda     tube_x,x
	sta     x_in

	lda     tube_y,x
	sta     y_in

	jsr     coord_xform

	ldx     L38
	ldy     x_out_l
	lda     x_out_h
	bmi     ?f3
	cmp     #$04
	bcc     ?f2
	ldy     #$ff
	lda     #$03
	inc     fscale
?f2
	clv
	bvc     ?f4
?f3
	cmp     #$fc
	bcs     ?f4
	ldy     #$01
	lda     #$fc
	inc     fscale
?f4
	sta     xout_h_array,x
	tya
	sta     xout_l_array,x
	ldy     y_out_l
	lda     y_out_h
	bmi     ?f6
	cmp     #$04
	bcc     ?f5
	ldy     #$ff
	lda     #$03
	inc     fscale
?f5
	clv
	bvc     ?f7
?f6
	cmp     #$fc
	bcs     ?f7
	lda     #$fc
	ldy     #$01
	inc     fscale
?f7
	sta     yout_h_array,x
	tya
	sta     yout_l_array,x
	dec     L38
	dec     loopidx
	bpl     ?loop
	lda     fscale
	rts







	.local
; Draw tube? No....
;
; In:
;  A level number (base 0)
Lc4e1

	jsr     get_tube_no
	; A is tube number * 16 + 15
	sta     L36
	; X is level number / 16
	stx     L35

	; Set color and intensity to 0
	lda     #0
	sta     draw_z

	lda     #5	; b scale
	jsr     vapp_scale_b
	lda     L35
	and     #$07
	tax
	ldy     Lc22d,x
	sty     curcolor	; z and color
	lda     #$08		; sparkle
	; Append a vstat to the display list
	jsr     vapp_vstat_A_Y
	ldx     curtube
	lda     L36
	ldy     lev_open,x
	bne     ?f1
	sec
	sbc     #$0f
?f1
	tay
	lda     lev_y,y
	sta     y_scale
	eor     #$80
	tax		; Y coord
	lda     lev_x,y
	sta     x_in
	eor     #$80	; X coord
	jsr     vapp_ldraw_XY

	; Set color to 0 and intensity to 14
	lda     #$c0
	sta     draw_z

	ldx     #$0f
	stx     L38
?b2
	ldy     L36
	lda     lev_x,y
	tax
	sec
	sbc     x_in
	pha
	stx     x_in
	lda     lev_y,y
	tay
	sec
	sbc     y_scale
	tax		; Y coord
	sty     y_scale
	pla		; X coord
	jsr     vapp_ldraw_XY
	dec     L36
	dec     L38
	bpl     ?b2
	lda     #1	; b scale
	jmp     vapp_scale_b









	.local
Lc54d
	lda     L0115
	beq     ?f5
	lda     y_scale_2_l
	pha
	lda     y_scale_2_h
	pha
	lda     La0
	pha
	lda     #$e8
	sta     y_scale_2_l
	lda     #$ff
	sta     y_scale_2_h
	lda     #$28
	sta     La0
	ldx     #$07
	stx     loopidx
?loop
	ldx     loopidx
	lda     L03fe,x
	beq     ?f4
	sta     y_scale
	lda     #$80
	sta     x_in
	lda     #$80
	sta     y_in
	lda     curlevel
	cmp     #$05
	bcs     ?f2
	lda     #$06
	clv
	bvc     ?f3
?f2
	txa
	and     #$07
	cmp     #$07
	bne     ?f3
	lda     #$04
?f3
	sta     curcolor
	tay		; z and color
	lda     #$08	; sparkle
	; Append a vstat to the display list
	jsr     vapp_vstat_A_Y
	lda     loopidx
	and     #$03
	asl     a
	adc     #$0a
	sta     L55
	jsr     Lbd09
?f4
	dec     loopidx
	bpl     ?loop
	pla
	sta     La0
	pla
	sta     y_scale_2_h
	pla
	sta     y_scale_2_l
?f5
; Copy protection code for pokey

	lda     pokey_piracy_detected
	beq     ?f6

; Check pokey protection result.
; If zero (good), then return.
; Compare player one's score
; to see if it is >= 16,000.
; If not, then return.
; Load in the lower two digits
; current player's score.
; Add that score to $200, and
; increment the value at that
; address in memory.

; If P1 score is in the 150K-160K range, increment one byte of RAM in the
; $0200-$0299 range, depending on the low two digits of the score.  This is
; probably responsible for a few of the game crashes I've seen; there are
; some bytes that if struck by this _will_ cause trouble.
	ldx     p1_score_h
	cpx     #$15
	bcc     ?f6
	ldx     p1_score_l
.if PIRATE
	nop
	nop
	nop
.else
	inc     player_seg,x
.endif
?f6
	rts









	.local
Lc5c2
	lda     L0110
	beq     ?f1
	rts
?f1
	lda     y_scale_2_h
	bne     ?f2
	lda     y_scale_2_l
	cmp     #$f0
	bcc     ?f2
	rts
?f2
	lda     #1	; b scale
	jsr     vapp_scale_b
	lda     vidptr_l
	pha
	lda     vidptr_h
	pha
	lda     #$00
	sta     L38
	sta     vidptr_offset
	ldx     #$0f
	lda     open_level
	beq     ?f3
	dex
?f3
	stx     loopidx
?loop
	ldx     #$03
	ldy     vidptr_offset
;Lc5f2
?b5
	lda     ?t1,x
	sta     (vidptr),y
	iny
	dex
	bpl     ?b5
	sty     vidptr_offset
	lda     L0114
	bne     ?f11
	ldx     L38
	lda     L039a,x
	bmi     ?f7
	ldx     #$0b
	ldy     vidptr_offset
?b6
	lda     (Laa),y
	sta     (vidptr),y
	iny
	dex
	bpl     ?b6
	sty     vidptr_offset
	clv
	bvc     ?f10
?f7
	ldy     vidptr_offset
	lda     (Laa),y
	sta     (vidptr),y
	sta     L6c
	iny
	lda     (Laa),y
	sta     (vidptr),y
	cmp     #$10
	bcc     ?f8
	ora     #$e0
?f8
	sta     L6d
	iny
	lda     (Laa),y
	sta     (vidptr),y
	sta     L6a
	iny
	lda     (Laa),y
	sta     (vidptr),y
	cmp     #$10
	bcc     ?f9
	ora     #$e0
?f9
	sta     L6b
	iny
	sty     vidptr_offset
	jsr     Lc6c7
?f10
	clv
	bvc     ?f12
?f11
	jsr     Lc66d
	jsr     Lc6c7
?f12
	ldx     L38
	asl     L039a,x
	inc     L38
	dec     loopidx
	bpl     ?loop
	pla
	sta     Lab
	pla
	sta     Laa
	ldy     vidptr_offset
	dey
	jmp     inc_vidptr
; These four bytes are byte-reversed video code.  The code is
; 6805  vstat z=0 c=5 sparkle=1
; 8040  vcentre
; This is used by the loop at Lc5f2.
?t1
	;vcentre
	;vstat	0, 5, 1
	.byte	$80
	.byte	$40
	.byte	$68
	.byte	$05





	.local
Lc66d
	lda     L38
	tax
	clc
	adc     #$01
	and     #$0f
	tay
	lda     L036a,x
	sec
	adc     L036a,y
	sta     x_out_l
	lda     L035a,x
	adc     L035a,y
	sta     x_out_h
	asl     a
	ror     x_out_h
	ror     x_out_l
	lda     L038a,x
	sec
	adc     L038a,y
	sta     y_out_l
	lda     L037a,x
	adc     L037a,y
	sta     y_out_h
	asl     a
	ror     y_out_h
	ror     y_out_l
	ldy     vidptr_offset
	lda     y_out_l
	sta     (vidptr),y
	iny
	sta     L6c
	lda     y_out_h
	sta     L6d
	and     #$1f
	sta     (vidptr),y
	iny
	lda     x_out_l
	sta     (vidptr),y
	iny
	sta     L6a
	lda     x_out_h
	sta     L6b
	and     #$1f
	sta     (vidptr),y
	iny
	sty     vidptr_offset
	rts









	.local
Lc6c7
	ldx     L38
	lda     spike_ht,x
	bne     ?f2
	ldy     vidptr_offset
	ldx     #$03
?b1
	lda     #$00
	sta     (vidptr),y
	iny
	lda     #$71
	sta     (vidptr),y
	iny
	dex
	bpl     ?b1
	sty     vidptr_offset
	clv
	bvc     ?f4
?f2
	sta     y_scale
	jsr     Lc453
	lda     mid_x,x
	sta     x_in
	lda     mid_y,x
	sta     y_in
	jsr     coord_xform
	jsr     Lc73c
	ldx     L38
	lda     L039a,x
	and     #$40
	beq     ?f3
	jsr     Lbd3e		; does a division and appends the result as a vsale to the display list
	lda     pokey1_rand
	and     #$02
	clc
	adc     #$1c
	tax
	lda     graphic_table+1,x
	iny
	sta     (vidptr),y
	dey
	lda     graphic_table,x
	sta     (vidptr),y
	iny
	iny
	sty     vidptr_offset
	clv
	bvc     ?f4
?f3
	ldy     vidptr_offset
	lda     #$00
	sta     (vidptr),y
	iny
	lda     #$68
	sta     (vidptr),y
	iny
	lda     L3db2
	sta     (vidptr),y
	iny
	lda     L3db2+1
	sta     (vidptr),y
	iny
	sty     vidptr_offset
?f4
	rts








	.local
Lc73c
	ldy     vidptr_offset
	lda     y_out_l
	sec
	sbc     L6c
	sta     (vidptr),y
	iny
	lda     y_out_h
	sbc     L6d
	and     #$1f
	sta     (vidptr),y
	iny
	lda     x_out_l
	sec
	sbc     L6a
	sta     (vidptr),y
	iny
	lda     x_out_h
	sbc     L6b
	and     #$1f
	ora     #$a0
	sta     (vidptr),y
	iny
	sty     vidptr_offset
	rts





	.local
; On entry, X contains zero-page address of a four-byte block, holding
; AA BB CC DD.  Then, the following are appended to the video list:
;       vscale  b=1 l=0
;       vcentre
;       vldraw  x=X y=Y z=off
; where X=DDCC and Y=BBAA, in each case taken as 13-bit signed numbers
; (ie, the high three bits are dropped).
vapp_scl_cen_drw_to_X

	; Append vscale b=1 l=0
	ldy     #0		; l=0
	tya
	sta     (vidptr),y	; set l=0
	lda     #_vg_opc_vscale+1	; vscale with b=1
	iny
	sta     (vidptr),y
	iny
	bne     ?f1	; always branch


vapp_centre_draw_to_X

	; Append vcentre
	ldy     #0
?f1
	lda     #_vg_prm_vcentre
	sta     (vidptr),y
	lda     #_vg_opc_vcentre
	iny
	sta     (vidptr),y
	iny


	; Get X low
	lda     page0+2,x
	sta     L6c
	sta     (vidptr),y
	iny

	; Get X high
	lda     page0+3,x
	sta     L6d
	and     #$1f
	sta     (vidptr),y

	; Get Y low
	lda     page0,x
	sta     L6a
	iny
	sta     (vidptr),y

	; Get Y high
	lda     page0+1,x
	sta     L6b
	and     #$1f
	iny
	sta     (vidptr),y

	jmp     inc_vidptr







	.local
main_loop
	jsr     init_pokey
	lda     #_game_state_0
	sta     game_state
; This appears to be the game's main loop
; (This does not apply to reset-in-service-mode selftest, which has its
; own, different, main loop.)
?wait
	; main_loop_timer is incremented by the NMI timer; if something is
	; horribly broken, we will hang here. Otherwise, we will stall
	; for about    (IRQ at 246Hz, divide by 10, about 1/25th of a second?
	; Is the 0-9 timer at 9 or greater
	lda     main_loop_timer
	cmp     #9
	; If not, loop
	bcc     ?wait

	; Zero timer
	lda     #0
	sta     main_loop_timer

	jsr     ?f2
	jsr     Lc891
	jsr     Lb1b6
	clc
	bcc     ?wait	; always branch


?f2
	lda     optsw1
; This and and cmp tests one of the bonus-coins bits and the coinage bits;
; the compare will show equal if "bonus coins" is set to one of
; "1 each 5", "1 each 3", or demo mode (frozen or not) and coinage is
; set to free play.  Why this is a useful thing to test I have no idea;
; perhaps it's documented as a magic combination?
; Another disassembly comments this as checking for demonstration
; freeze mode, which is inconsistent with the layout of the bits in
; optsw1 - for it to be that, it'd have to be and #$e0, cmp #$e0.
; Setting the switches this way produces very odd behavior....
	and     #_optsw1_special_mask|_optsw1_coinage_mask
	cmp     #_optsw1_bonus_coins_val_1each5|_optsw1_coinage_val_freeplay
	beq     ?f3
	jsr     La7d2

; Jump to the appropriate game_state

	ldx     game_state

	; Set the sign bit in zap_fire_new; I believe that is to mark
	; that the zap_fire_new should be zeroed at a later time. I am
	; unsure under what circumstances we pass through here
	lda     zap_fire_new
	ora     #$80
	sta     zap_fire_new

	; Jump away...

	lda     ?game_state_jump_table+1,x
	pha
	lda     ?game_state_jump_table,x
	pha
?f3
	rts

?game_state_jump_table
	.jump   game_state_0
	.jump   game_state_attract
	.jump   game_state_4
	.jump   game_state_6
	.jump   game_state_test_screen
	.jump   game_state_countdown
	.word   0
	.jump   game_state_get_level
	.jump   game_state_16
	.jump   game_state_got_high_score
	.jump   game_state_enter_initials
	.jump   game_state_pregame
	.jump   game_state_zoom_to_next_level
	.jump   game_state_26
	.jump   game_state_28 ; I don't see this code offset used
	.jump   game_state_30
	.jump   game_state_zoom
	.jump   game_state_test_menu
	.jump   game_state_victory














	.local

;This is the state for countdown and switch to the state in next_game_state on timeout
game_state_countdown
	lda     timectr
	and     enable_countdown
	bne     ?f2
	lda     countdown_timer
	beq     ?f1
	; Decrement in binary
	dec     countdown_timer
?f1
	bne     ?f2
	lda     next_game_state
	sta     game_state
	lda     #$00
	sta     enable_countdown
?f2
	jmp     move_player





	.local
; Check to see if either START button is pressed, to start a new game.
; Called only when credits > 0.
check_start
	lda     credits
	ldy     #$00
	cmp     #$02
	lda     zap_fire_new
	and     #$60 ; start1 & start2
	sty     zap_fire_new
	beq     ?f8 ; branch if neither pressed
	bcs     ?f1
	and     #$20 ; start1
	clv
	bvc     ?f2
?f1
	iny
	dec     credits
	and     #$40 ; start2
?f2
	beq     ?f3
	dec     credits
	iny
; Y now holds 1 if 1p game, 2 if 2p
?f3
	tya
	sta     twoplayer
	beq     ?f7 ; can this ever branch?
	; Set player controlling, player alive?
	lda     play_state
	ora     #$c0
	sta     play_state
	lda     #$00
	sta     coin_string
	sta     L18
	lda     #_game_state_0
	sta     game_state
	dec     twoplayer
	ldx     twoplayer
	beq     ?f4
	ldx     #$03 ; 3 = games_2p_l - games_1p_l
?f4
	inc     games_1p_l,x
	bne     ?f5
	inc     games_1p_m,x
?f5
	lda     L0100
	sec
	adc     twoplayer
	cmp     #$63 ; 99 decimal
	bcc     ?f6
	lda     #$63 ; 99 again
?f6
	sta     L0100
?f7
	clv
	bvc     ?f9
; Branch here if neither start button pressed
?f8
	; Check for spinner motion
	lda     spinner_delta
	beq     ?f9
	; Branch in play mode
	bit     play_state
	bmi     ?f9
	lda     #_game_mode_msg_press_start
	sta     game_mode

	; Going into _game_state_countdown; timer is in binary
	lda     #32
	sta     countdown_timer

	lda     #_game_state_countdown
	sta     game_state
	lda     #_game_state_enter_initials
	sta     next_game_state
	lda     #$00
	sta     spinner_delta
	sta     L0123
?f9
	rts












	.local
; Called from main_loop  ?25 times a second
Lc891
	lda     cabsw
	and     #cabsw_service_sw_mask ; service mode
	bne     ?f1
	lda     #_game_state_test_menu	; Set game_state to "test menu"
	sta     game_state
	clv
	bvc     ?f7
?f1
	; Test player alive
	; Branch player alive
	bit     play_state
	bvs     ?f7
	; player dead :(
	lda     optsw2_shadow
	and     #$01 ; 2-credit-minimum bit
	beq     ?f5
	ldy     credits
	bne     ?f2
	lda     #$80
	sta     La2
?f2
	bit     La2
	bpl     ?f5
	cpy     #$02
	bcs     ?f4
	tya
	beq     ?f3
	lda     #_game_mode_msg_2_credit_minimum
	sta     game_mode
	lda     #_game_state_countdown
	sta     game_state
?f3
	jmp     ?f6
; XXX not reached
	clv
	bvc     ?f5
?f4
	lda     #_game_state_enter_initials
	sta     game_state
	lda     #$00
	sta     La2
?f5
	lda     credits
	beq     ?f6
	jsr     check_start
?f6
	lda     coinage_shadow
	and     #$03
	bne     ?f7
	lda     #$02
	sta     credits
?f7
	inc     timectr		; 25Hz?
	lda     timectr
	and     #$01
	beq     ?f8
	jsr     Lde1b
?f8

	; Has the slam switch been set recently?
	lda     slam_timer

	; Yes
	beq     ?f9
	jsr     sound_slam
; Apparent anti-piracy test; if the copyright-displaying code has been
; twiddled, then gratuitously drop into decimal mode over level 19, thereby
; doing "interesting" things to arithmetic until we next have occasion to
; use decimal mode "legitimately".
; See also La91c.
;Lc8f5
?f9
	lda     copyr_disp_cksum1
	beq     ?f10
	lda     #$13
	cmp     curlevel
	bcs     ?f10
.if PIRATE
	nop
.else
	sed
.endif
; End apparent anti-piracy test
?f10

	; If the sign bit is set in zap fire new, set ot to 0
	lda     zap_fire_new
	and     #$80
	beq     ?f11
	lda     #$00
	sta     zap_fire_new
?f11
	rts










	.local
game_state_0
	jsr     maybe_init_hs
	jsr     Lc16e
	; Branch in attract mode
	lda     play_state
	bpl     ?f1
	jsr     clear_players_scores
?f1
	lda     #$00
	sta     players_lives+1		; player 2 lives
	ldx     twoplayer
	stx     curplayer
?b2
	ldx     curplayer
	lda     init_lives
	.byte $9d, $48, $00 ;sta     players_lives,x ; XXX
	lda     #$ff
	.byte $9d, $46, $00; sta     players_level,x ; XXX
	dec     curplayer
	bpl     ?b2
	lda     #0
	sta     L3f
	sta     L0115
	lda     twoplayer
	sta     curplayer
	; Goto level selection menu
	jmp     L90c4









	.local
game_state_attract

	; game_mode <- _game_mode_0
	lda     #_game_mode_00
	sta     game_mode

	; game_state <- _game_state_30
	; next_game_state <- _game_state_30
	lda     #_game_state_30
	sta     game_state
	sta     next_game_state

	; ???
	lda     L3f
	cmp     curplayer
	beq     ?f2


	sta     curplayer

	; Branch in attract mode
	lda     play_state
	bpl     ?f2

	; game_mode <- _game_mode_msg_play
	lda     #_game_mode_msg_play
	sta     game_mode

	; game_state <- _game_state_countdown
	lda     #_game_state_countdown
	sta     game_state


	; Going into _game_state_countdown; timer is in binary
	; countdown_timer <- cocktail ? 40 : 80
	lda     #80
	ldy     flagbits
	beq     ?f1
	lda     #40
?f1	sta     countdown_timer

	jsr     swap_players

?f2
	jsr     setup_inverted
	ldx     curplayer
	lda     players_level,x
	sta     curlevel
	jsr     L9025
	jmp     init_pokey
	.tail




	.local
game_state_30
	lda     #_game_state_4
	sta     next_game_state
	lda     #_game_mode_00
	sta     game_mode
	lda     #_game_state_countdown
	sta     game_state

	; Going into _game_state_countdown; timer is in binary
	lda     #20
	sta     countdown_timer
	rts






	.local
game_state_get_level
	; Get level for current player.
	; If we are below level 98,
	; then increase the level.
	; Otherwise, do nothing
	; with it.

	ldx     curplayer
	lda     players_level,x
	cmp     #n_levels-1 ; 98 (level 99) is the max
	bcs     ?f1
	inc     players_level,x
	inc     curlevel
?f1
	; Game status = zooming in the next level to be played.

	lda     #_game_state_zoom_to_next_level
	sta     game_state

	; Which choice was selected by the player on the level
	; selection screen? (This is the choice #, not level #.)

	lda     p1_startchoice,x

	; Skip some stuff if the chose the first level
	beq     ?f2
	jsr     ld_startbonus
	; Add the contents of L29 to the score and L2b to the
	; bonus lives
	ldx     #$ff
	jsr     inc_score
	jsr     sound_lives_added
?f2
	jmp     start_level












	.local
game_state_6
	lda     #0
	sta     countdown_timer
	ldx     curplayer
	dec     players_lives,x
	lda     players_lives
	ora     players_lives+1
	bne     ?f1
	jsr     game_state_test_screen
	clv
	bvc     ?f5
?f1
	ldx     curplayer
	lda     players_lives,x
	bne     ?l2
	lda     #_game_mode_msg_game_over
	sta     game_mode
	lda     #40
	sta     countdown_timer
?l2
	lda     twoplayer
	beq     ?f3
	lda     L3f
	eor     #$01
	sta     L3f
?f3
	ldx     L3f
	lda     players_lives,x
	beq     ?l2
	lda     #_game_state_attract_mode
	ldy     players_level,x
	iny
	bne     ?f4
	lda     #_game_state_28
?f4
	sta     next_game_state
	lda     #_game_state_countdown
	sta     game_state
?f5
	rts







	.local
game_state_test_screen
	lda     #$00
	sta     L0126
	ldx     twoplayer
?b1
	lda     players_level,x
	cmp     L0126
	bcc     ?f2
	sta     L0126
?f2
	dex
	bpl     ?b1
	ldy     L0126
	beq     ?f3
	dec     L0126
?f3
	lda     #_game_state_enter_initials
	; Branch in attract mode
	bit     play_state
	bpl     ?f4
	lda     #_game_state_16
?f4
	sta     game_state
	rts





	.local
game_state_enter_initials
	; Clear player controlling and player alive bits
	lda     play_state
	and     #$3f
	sta     play_state
	lda     #$00
	sta     twoplayer
	lda     #_game_state_26 ; new game_state
	sta     next_game_state
	lda     #_game_state_countdown
	sta     game_state

	; Going into _game_state_countdown; timer is in binary
	lda     #160 ; time delay
	sta     countdown_timer

	lda     #1
	sta     enable_countdown
	lda     #_game_mode_high_scores
	sta     game_mode
	rts






; Used at L98e6, L9910
Lca38
	.byte	$80
	.byte	$40
	.byte	$20
	.byte	$10
	.byte	$08
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$40
	.byte	$80







	.local

;
; setup_inverted
;
;    If the game is a cocktail machine and the 2nd player is playing,
;    flip the screen and enable the alternate controls
;

setup_inverted

	; Normal operation is inverted Y and noninverted X

	; Invert Y axis
	ldy     #vid_coins_invert_y_mask
	; Is this game a cocktail?
	lda     flagbits
	; No, branch
	beq     ?f1
	; Is the player 1?
	lda     curplayer
	; Yes, branch
	beq     ?f1

	; This is a cocktail unit, and the second player is playing;
	; invert the X axis and not the Y.

	; Invert the X axis
	lda     #leds_flip_alt_cntrls
	ldy     #vid_coins_invert_x_mask


?f1
	; If normal operation:
	;   Y contains the invert Y axis bit for vid_coins
	;   A contains 0 (use normal controls for leds_flip)
	; If inverted operation:
	;   Y contains the invert X axis bit for vid_coins
	;   A contains the use alternate controls for leds_flip

	; Set or reset the alternate controls bit in leds_flip shadow
	eor     leds_flip_shadow
	and     #leds_flip_alt_mask
	eor     leds_flip_shadow
	sta     leds_flip_shadow

	; Save the invert axis bits
	sty     vid_coins_shadow
	rts




	.local

clear_players_scores

	lda     #0
	ldx     #pl_scores_len-1
?b1
	sta     pl_scores,x
	dex
	bpl     ?b1
	rts





	.local

inc_score

; If X < 8, add enemy_score[x] to the current player score
; If X >= 8, add L29(l,m) to the current player score

	sed
	; Branch in attract mode
	bit     play_state
	bpl     ?return

	; Set Y to the offset of the 1st or 2nd player score in pl_scores
	ldy     curplayer
	beq     ?f1
	ldy     #pl_scores_len/2
?f1


	cpx     #$08
	bcc     ?f2

	; X >= 8
	; Add L29(l,m,h) to the current player score

	lda     L29_l
	clc
	adc     p1_score_l,y	; p1_score_l or p2_score_l, depending on Y
	sta     p1_score_l,y
	lda     L29_m
	adc     p1_score_m,y	; p1_score_m or p2_score_m, depending on Y
	sta     p1_score_m,y
	lda     L2b
	clv
	bvc     ?f3	; Always branch


	; X < 8
;Lca91
?f2
	lda     ?enemy_score_l,x
	clc
	adc     p1_score_l,y	; p1_score_l or p2_score_l, depending on Y
	sta     p1_score_l,y
	lda     ?enemy_score_h,x
	adc     p1_score_m,y	; p1_score_m or p2_score_m, depending on Y
	sta     p1_score_m,y
	lda     #0



?f3
	; Save the Z flag; set if (X<8) branch, otherwise depends on L2b
	php

	; Finish up the 3rd byte
	adc     p1_score_h,y	; p1_score_h or p2_score_h, depending on Y
	sta     p1_score_h,y

	; Restore the Z flag
	plp
	beq     ?f4

	; L2b was non-zero
	ldx     bonus_life_each
	beq     ?f4

	; bonus_life_each != 0
	cpx     L2b
	beq     ?f7
	bcc     ?f7
?f4
	; bonus_life_each was 0, or was > L2b
	; Confused about this one
	bcc     ?return
	ldx     bonus_life_each
	beq     ?f8
	cpx     #$03
	bcc     ?b6
?b5
	sec
	sbc     bonus_life_each
	beq     ?f7
	bcs     ?b5
	clv
	bvc     ?f8
?b6
	cpx     #$02
	bne     ?f7
	and     #$01
	beq     ?f7
	clv
	bvc     ?f8
?f7
	; Increase number of player lives, but not beyond 6
	ldx     curplayer
	lda     players_lives,x
	cmp     #$06
	bcs     ?f8
	inc     players_lives,x
	jsr     sound_lives_added
	lda     #$20
	sta     L0124
?f8
	sec
?return
	cld
	rts

; Enemy scores    0 150 200 100 50 250 500 750

; Low BCD nibbles of score values of enemies?.
?enemy_score_l
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$50
	.byte	$00
	.byte	$50

; Low BCD nibbles of score values of enemies?.
?enemy_score_h
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$07


	.local
;;;
;;;  Sound
;;;

	;  X    port
	;  0    pokey1_audf1
	;  1    pokey1_audc1
	;  ...
	;  7	pokey1_audc4
	;  8	pokey2_audf1
	;  ...
	; 15 	pokey2_audc4

Lcb01

	.macro	.sample	; channel, sample, sample
	r .= 0
	.rept	8
	.if	%1=r
	.byte	%2, %3
	.else
	.byte	0, 0
	.endif
	r .= r+1
	.endr
	.endm

; This is the sound made when a player moves from one segment to another
_sound_segment_change = *-Lcb01+15
	.sample 4, sample_35, sample_38

Lcb01_01_offset = *-Lcb01+15
	.sample	1, sample_47, sample_4a

Lcb01_02_offset = *-Lcb01+15
	.sample	2, sample_0d, sample_10

Lcb01_03_offset = *-Lcb01+15
	.sample	5, sample_65, sample_68

_sound_lives_added = *-Lcb01+15
	.sample	3, sample_21, sample_32

Lcb01_05_offset = *-Lcb01+15
	.sample	0, sample_13, sample_1a

Lcb01_06_offset = *-Lcb01+15
	.sample	5, sample_53, sample_56

Lcb01_07_offset = *-Lcb01+15
	.sample	5, sample_59, sample_5c

_sound_enemy_fire = *-Lcb01+15
	.sample	7, sample_3b, sample_3e

_sound_spike_shot = *-Lcb01+15
	.sample	6, sample_41, sample_44

_sound_slam = *-Lcb01+15
	.sample	0, sample_4d, sample_50

_sound_Lccfe = *-Lcb01+15
	.sample	0, sample_5f, sample_62

Lcb01_0c_offset = *-Lcb01+15
	.sample	5, sample_6d, sample_6d


Lcbd1
	.byte	$c0
	.byte	$08
	.byte	$04
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$a6
sample_0d = *-Lcbd1+6
	.byte	$20
	.byte	$f8
	.byte	$04
sample_10 = *-Lcbd1+6
	.byte	$00
	.byte	$00
	.byte	$40
sample_13 = *-Lcbd1+6
	.byte	$08
	.byte	$04
	.byte	$10
	.byte	$00 ; $10
	.byte	$00
	.byte	$a6
	.byte	$20
sample_1a = *-Lcbd1+6
	.byte	$fe
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$07
sample_21 = *-Lcbd1+6
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$a2
	.byte	$01
	.byte	$f8 ; $20
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$20
	.byte	$0a
	.byte	$08
	.byte	$04
	.byte	$01
	.byte	$09 
sample_32 = *-Lcbd1+6
	.byte	$10
	.byte	$0d
	.byte	$04


; This is the sound made when a player moves from one segment to another
sample_35 = *-Lcbd1+6
	.byte	$0c
	.byte	$00 ; $30
	.byte	$00
sample_38 = *-Lcbd1+6
	.byte	$08
	.byte	$04
	.byte	$00



sample_3b = *-Lcbd1+6
	.byte	$0a
	.byte	$68
	.byte	$04
sample_3e = *-Lcbd1+6
	.byte	$00
	.byte	$09
	.byte	$68
sample_41 = *-Lcbd1+6
	.byte	$12
	.byte	$ff
	.byte	$09
sample_44 = *-Lcbd1+6
	.byte	$00
	.byte	$00
	.byte	$40 ; $40
sample_47 = *-Lcbd1+6
	.byte	$01
	.byte	$00
	.byte	$01
sample_4a = *-Lcbd1+6
	.byte	$40
	.byte	$01
	.byte	$ff
sample_4d = *-Lcbd1+6
	.byte	$40
	.byte	$30
	.byte	$01
sample_50 = *-Lcbd1+6
	.byte	$ff
	.byte	$30
	.byte	$20
sample_53 = *-Lcbd1+6
	.byte	$01
	.byte	$ff
	.byte	$20
sample_56 = *-Lcbd1+6
	.byte	$18 ; $50
	.byte	$01
	.byte	$ff
sample_59 = *-Lcbd1+6
	.byte	$18
	.byte	$14
	.byte	$01
sample_5c = *-Lcbd1+6
	.byte	$ff
	.byte	$14
	.byte	$12
sample_5f = *-Lcbd1+6
	.byte	$01
	.byte	$ff
	.byte	$12
sample_62 = *-Lcbd1+6
	.byte	$10
	.byte	$01
	.byte	$ff
sample_65 = *-Lcbd1+6
	.byte	$10
	.byte	$00 ; $60
	.byte	$00
sample_68 = *-Lcbd1+6
	.byte	$a8
	.byte	$93
	.byte	$00
	.byte	$02
	.byte	$00
sample_6d = *-Lcbd1+6
	.byte	$00
	.byte	$0f
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$a2
	.byte	$04
	.byte	$40 ; $70
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$ff
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$80 ; $80
	.byte	$01
	.byte	$e8
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$a1
	.byte	$01
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$02
	.byte	$10
	.byte	$00 ; $90
	.byte	$00
	.byte	$86
	.byte	$20
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$04
	.byte	$00
	.byte	$ff
	.byte	$00
	.byte	$00
	.byte	$af
	.byte	$04
	.byte	$00 ; $a0
	.byte	$ff
	.byte	$00
	.byte	$00
	.byte	$c0
	.byte	$02
	.byte	$ff
	.byte	$ff
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$02
	.byte	$00
	.byte	$f0
	.byte	$00
	.byte	$00
	.byte	$10 ; $b0
	.byte	$0b
	.byte	$01
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$86
	.byte	$40
	.byte	$00
	.byte	$0b
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$00 ; $c0
	.byte	$00
	.byte	$a8
	.byte	$40
	.byte	$f8
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$b0
	.byte	$02
	.byte	$00
	.byte	$ff
	.byte	$00
	.byte	$00
	.byte	$c8
	.byte	$01
	.byte	$02 ; $d0
	.byte	$ff
	.byte	$c8
	.byte	$01
	.byte	$02
	.byte	$ff
	.byte	$00
	.byte	$00
sample_6d
	.byte	$c0 ; $de  y - 6   Ld0 [x]
	.byte	$01 ;      y - 5   Le0 [x]
	.byte	$00
	.byte	$01 ;      y - 3   Lf0 [x]
sample_6f
	.byte	$00 ; $e2
	.byte	$00
	.byte	$00 ; $de

sound_Lccb0
	lda     #Lcb01_05_offset
	jmp     ?play_sound_if_player

; This is the sound made when a player moves from one segment to another
sound_segment_change
	lda     #_sound_segment_change
	bne     ?play_sound_if_player

sound_lives_added
	lda     #_sound_lives_added
	bne     ?play_sound_if_player

sound_enemy_fire
	lda     #_sound_enemy_fire
	bne     ?play_sound_if_player

sound_Lccc1
	lda     #Lcb01_01_offset
	;.fall	?play_sound_if_player


;
; Walkthrough of call to sound_pulsar, with player in control
;
;  Y <- #Lcb01_0c_offset
;  X <- #15
; loop
;   A <- Lcb01[y]
;   if (A)
;     Lc0 [x] = Lcb01 [y]
;     Le0 [x] = 1
;     Lf0 [x] = 1
;   endif
;   x --
;   y --
; while (x >= 0)
;
;    Lcp01 [Lcb01_0c_offset]:
;
;      0 0 0 0 0 0 0 0 0 0 $6d $6d 0 0 0 0
;
; Results
;
;    Lc0:
;      X X X X X X X X X X $6d $6d X X X X
;    Le0:
;      X X X X X X X X X X   1   1 X X X X
;    Lf0:
;      X X X X X X X X X X   1   1 X X X X
;   
;
; In the interrupt handler
;
;  for (X = 15; X >= 0; X --)
;    {
;      if (Lc0 [x])
;        {
;          if (-- Le0 [x] == 0)
;            {
;              if (-- Lf0 [x] == 0)
;                {
;                  Lc0 [x] += 2;
;                  Y = Lc0 [x] * 2
;                  Ld0 [x] = Lcbd1 [y - 6]
;                  Lf0 [x] = Lcbd1 [y - 3]
;                  Le0 [x] = Lcbd1 [y - 5]
;                  if (Le0 [x] == 0)
;                    {
;                      Lc0 [x] = 0
;                      if (Ld0 [x] != 0)
;                        {
;                          Lc0 [x] = Ld0 [x]
;                        }
;                    }
;                }
;              else // Lf0 != 0
;                {
;                  Y = Lc0 [x] * 2
;                  Le0 [x] = Lcbd1 [y - 5]
;                  A = Lcbd1 [y - 4]
;                  Y = Ld0 [x]
;                  Ld0 [x] += A
;                  A = X
;                  if (A is odd)  // ctl vs. freq  register?
;                    {
;                      A ^= Ld0 [x]
;                      A &= $f0
;                      A ^= Ld0 [x]
;                      Ld0 [x] = A
;                    }
;                }
;              if (X >= 8)
;                pokey2 [x - 8] = Ld0 [x]
;              else
;                pokey1 [x] = Ld0 [x]
;            }
;        }
;    }
;
;  First time through the handler
;
;    In:
;    X
;      0 1 2 3 4 5 6 7 8 9   a   b c d e f 
;    Lc0:
;      X X X X X X X X X X $6d $6d X X X X
;    Le0:
;      X X X X X X X X X X   1   1 X X X X
;    Lf0:
;      X X X X X X X X X X   1   1 X X X X
;
;   Lc0 [x] is != 0
;   Le0 [x] --
;   Lf0 [x] --
;   Lc0 [x] += 2  // $6f
;   Y = Lc0 [x] * 2 // $6f * 2 // $de
;   Ld0 [x] = Lcbd1 [y - 6]  // $c0 , Lcbd1 [$de - 6]
;   Lf0 [x] = Lcbd1 [y - 3]  // $01
;   Le0 [x] = Lcbd1 [y - 5]  // $01
;   Le0 [x] != 0
;   pokey2 [x - 8] = Ld0 [x]
;   
;
; Out
;    X
;      0 1 2 3 4 5 6 7 8 9   a   b c d e f 
;    Lc0:
;      X X X X X X X X X X $6f $6f X X X X
;    Le0:
;      X X X X X X X X X X   1   1 X X X X
;    Lf0:
;      X X X X X X X X X X   1   1 X X X X
;
;    Ld0
;                          $c0 $c0
; pokey2 [2] = $c0 ; audf2
; pokey2 [3] = $c0 ; audc2 ; 4 bit poly - N
;
; 2nd time through the iterrupt handler
;
;   Lc0 [x] is != 0
;   Le0 [x] --
;   Lf0 [x] --
;   Lc0 [x] += 2  // $71
;   Y = Lc0 [x] * 2 // $71 * 2 // $e2
;   Ld0 [x] = Lcbd1 [y - 6]  // $00 , Lcbd1 [$e2 - 6]
;   Lf0 [x] = Lcbd1 [y - 3]  // $a9 ; this must be ignored, it's past the end of the table
;   Le0 [x] = Lcbd1 [y - 5]  // $00
;   Le0 [x] == 0
;   Lc0 [x] = 0
;   Ld0 [x] == 0
;   pokey2 [x - 8] = Ld0 [x] // 0



;   pokey2 [x - 8] = Ld0 [x]
;   
; Out
;    X
;      0 1 2 3 4 5 6 7 8 9   a   b c d e f 
;    Lc0:
;      X X X X X X X X X X $71 $71 X X X X
;    Le0:
;      X X X X X X X X X X   0   0 X X X X
;    Lf0:
;      X X X X X X X X X X   0   0 X X X X
;
;    Ld0
;                          $c0 $c0
; pokey2 [2] = $c0 ; audf2
;  
; Common code for above and below routines
; 
; A has an offset into Lcb01
;
; Copy 16 bytes from Lcb01 + offset + 15 backwards to Lcb01 + offset
; if the byte is non-zero. If so, also store a 1 into the corresponding
; offsets in Le0 and Lf0.
;
; While copying, set sound_table_lock to the row being updated; this prevents
; the interrupt service routine from accessing that row of the table.
;
; ?play_sound_if_player: Only do the copy in play mode
; ?play_sound: Do the copy regardless of play mode
;

?play_sound_if_player

	; Branch in attract mode
	bit     play_state
	bpl     ?f3
	; Player is in control

?play_sound

	; Save X, Y
	stx     L31
	sty     L32

	; Move the offset to Y
	tay

	; Set the loop counter
	ldx     #$0f
?loop
	lda     Lcb01,y
	beq     ?next

	; Lock the row of the table
	stx     sound_table_lock	; Why?

	; If the byte from the table is non-zero, store it in the table at Lc0
	sta     Lc0,x

	; Store a 1 in the tables at Le0 and Lf0
	lda     #$01
	sta     Le0,x
	sta     Lf0,x

	; Clear the lock
	lda     #$ff
	sta     sound_table_lock


?next
	; Decrement offset and counter
	dey
	dex
	bpl     ?loop

	; Restore X, Y
	ldx     L31
	ldy     L32
?f3
	rts



sound_Lccea
	lda     #Lcb01_02_offset
	bne     ?play_sound_if_player

sound_Lccee
	lda     #Lcb01_06_offset
	bne     ?play_sound_if_player

sound_Lccf2
	lda     #Lcb01_07_offset
	bne     ?play_sound_if_player

sound_spike_shot
	lda     #_sound_spike_shot
	bne     ?play_sound_if_player

sound_slam
	lda     #_sound_slam
	bne     ?play_sound

sound_Lccfe
	lda     #_sound_Lccfe
	bne     ?play_sound_if_player

sound_Lcd02
	lda     #Lcb01_03_offset
	bne     ?play_sound_if_player

sound_pulsar
	lda     #Lcb01_0c_offset
	bne     ?play_sound_if_player





	.local


;
; update_sounds
;
;   NMI handler to play sounds
;

update_sounds

	; Loop over the 8 pokey audc and audf ports
	;  X    port
	;  0    pokey1_audf1
	;  1    pokey1_audc1
	;  ...
	;  7	pokey1_audc4
	;  8	pokey2_audf1
	;  ...
	; 15 	pokey2_audc4

	; Initialize loop ctr
	ldx     #$0f
?loop
	; get a byte from the Lc0 table
	lda     Lc0,x
	beq     ?next

	; Non, zero

	; is this row locked?
	cpx     sound_table_lock
	beq     ?next

	; No

	; Decrement a counter for this row
	dec     Le0,x
	bne     ?next

	; Counter zero

	; Decrement a counter for this row
	dec     Lf0,x
	bne     ?f9

	; both counters zero
?b5

	; Add 2 to the Lc0 table row
	inc     Lc0,x
	inc     Lc0,x

	; get the byte and multiply by 2, copy it to Y
	lda     Lc0,x
	asl     a
	tay

	; Did the byte become > 0xf7 after incrementing?
	bcs     ?f6

	; No
	; Copy out of Lcbd1 word array into Ld0 and Lf0
	lda     Lcbd1-6,y
	sta     Ld0,x
	lda     Lcbd1-3,y
	sta     Lf0,x
	; Get a new value for Le0 array
	lda     Lcbd1-5,y
	clv
	bvc     ?f7	; Always branch


?f6
; the byte fetched form Lc0[X] overflowed, pretend that Y is wider
; by adding $100 to the array base address
	; Copy out of Lcbd1 word array into Ld0 and Lf0`
	lda     Lcbd1-6+$100,y
	sta     Ld0,x
	lda     Lcbd1-3+$100,y
	sta     Lf0,x
	; Get a new value for Le0 array
	lda     Lcbd1-5+$100,y

?f7
	; Save the new value for Le0 from Lcbd1-5[y] 
	sta     Le0,x
	bne     ?f8

	; If the new value is 0
	;  zero out Lc0[x]
	sta     Lc0,x

	; Get Ld0 [x]
	lda     Ld0,x
	beq     ?f8

	; If it is non-zero, store it in Lc0[x]
	sta     Lc0,x
	bne     ?b5	; Always branch

?f8
	; Ld0[x] was zero
	clv
	bvc     ?f12	; Always branch


; The Lf0 counter is non-zero
?f9

	; Multiply the byte from the Lc0 table by 2
	asl     a

	; Copy it to Y
	tay

	; Was the byte > $7f
	bcs     ?f10

	; No 
	; Copy out of Lcbd1 word array into Le0
	lda     Lcbd1-5,y
	sta     Le0,x
	lda     Lcbd1-4,y
	clv
	bvc     ?f11	; Always branch

?f10
; the byte fetched form Lc0[X] overflowed, pretend that Y is wider
; by adding $100 to the array base address
	; Copy out of Lcbd1 word array into Le0
	lda     Lcbd1-5+$100,y
	sta     Le0,x
	lda     Lcbd1-4+$100,y

?f11
	ldy     Ld0,x
	clc
	adc     Ld0,x
	sta     Ld0,x
	txa
	lsr     a
	bcc     ?f12
	tya
	eor     Ld0,x
	and     #$f0
	eor     Ld0,x
	sta     Ld0,x
?f12
	lda     Ld0,x
	cpx     #$08
	bcc     ?f13
	; X >= 8
	sta     pokey2-8,x	; place in pokey 2
	clv
	bvc     ?next		; Always branch

?f13
	; X < 8
	sta     pokey1,x	; stuffing in pokey 1

?next
	; Decrement the loop counter, branch forward if done
	dex
	bmi     ?f15
	jmp     ?loop
?f15
	rts















	.local
; Commented in another disassembly as pokey initialization
init_pokey
	lda     #$00
	sta     pokey1_skctls
	sta     pokey2_skctls
	sta     L0720
	ldx     #$04
	lda     pokey1_rand	; Randomize A
	ldy     pokey2_rand	; Randomize Y
?b1
	cmp     pokey1_rand	; cmp A with rand number
	bne     ?f2		; 255/256 chance of branching
	cpy     pokey2_rand	; cmp Y with rand number
?f2
	beq     ?f3		; 1/255 chance of branching
	sta     L0720
	ldx     #$00
?f3
	dex
	bpl     ?b1
	; Enable sound and fast potentiometer scanning on pokey
	lda     #$07
	sta     pokey1_skctls
	sta     pokey2_skctls

	; Zero out volume/distortion and pitch for all cchannels on both pokeys
	ldx     #$07
	lda     #$00
?b4
	sta     pokey1,x
	sta     pokey2,x
	sta     Lc0,x
	sta     Ld0,x
	dex
	bpl     ?b4

	; Clear the master control register (AUDCTL) on both pokeys
	lda     #$00
	sta     pokey1_audctl
	lda     #$00
	sta     pokey2_audctl

	rts

; Indexed by player number; see La991
Lcdde
	.byte	$0b
	.byte	$5d
; Indexed by player number; see La997
Lcde0
	.byte	$22
	.byte	$74
; Indexed by player number; see La9cb
Lcde2
	.byte	$0c
	.byte	$5e
Lcde4
	.byte	$34
; XX Why not immediate?
; Constant used at La929
; Offset of high-score initials code from vecram_2f60
Lcde5
	.byte	$50






hdr_template

	vscale	1, 0	; b=1 l=0
	vstat   12, 5, 1	;z=12 c=5 sparkle=1
	vcentre
	vldraw  -448, 364, 0	; x=-448 y=+364 z=off
	vscale	1, 0	;  b=1 l=0
	vjsr	vg_sub_char_space ; P1 score digits
	vjsr	vg_sub_char_space
	vjsr	vg_sub_char_space
	vjsr	vg_sub_char_space
	vjsr	vg_sub_char_space
	vjsr	vg_sub_char_O ; uses "oh" not zero
	vldraw  -144, 0, 0	; x=-144 y=+0 z=off
	vscale	1, 0	;  b=1 l=0
	vsdraw  0, -16, 0	; x=+0 y=-16 z=off
	vstat   12, 1, 1	; z=12 c=1 sparkle=1
	vjsr	vg_sub_move_60_right ; P1 spare lives
	vjsr	vg_sub_move_60_right
	vjsr	vg_sub_move_60_right
	vjsr	vg_sub_move_60_right
	vjsr	vg_sub_move_60_right
	vjsr	vg_sub_move_60_right
	vldraw  -48, 48, 0	; x=-48 y=+48 z=off
	vstat   12, 5, 1	; z=12 c=5 sparkle=1
	vjsr	vg_sub_char_space ; Highest score
	vjsr	vg_sub_char_space
	vjsr	vg_sub_char_space
	vjsr	vg_sub_char_space
	vjsr	vg_sub_char_space
	vjsr	vg_sub_char_space
	vldraw	0, -36, 0	; x=+0 y=-36 z=off
	vstat   12, 7, 1	; z=12 c=7 sparkle=1
	vjsr	vg_sub_char_space ; Current level number
	vjsr	vg_sub_char_space
	vstat   12, 5, 1	; z=12 c=5 sparkle=1
	vldraw  -24, 36, 0	; x=-24 y=+36 z=off
	vjsr	vg_sub_char_space ; Highest score's initials
	vjsr	vg_sub_char_space
	vjsr	vg_sub_char_space

hdr_template_player_1_end = *

; Two-player-only stuff from here on
	vscale	1, 0	;  b=1 l=0
	vldraw  40, -32, 0	; x=+40 y=-32 z=off
	vscale	1, 0	;  b=1 l=0
	vjsr	vg_sub_char_space ; P2 score
	vjsr	vg_sub_char_space
	vjsr	vg_sub_char_space
	vjsr	vg_sub_char_space
	vjsr	vg_sub_char_space
	vjsr	vg_sub_char_O ; uses "oh" not zero
	vldraw  -144, 0, 0	; x=-144 y=+0 z=off
	vscale	1, 0	;  b=1 l=0
	vsdraw  0, -16, 0	; x=+0 y=-16 z=off
	vstat   12, 1, 1	; z=12 c=1 sparkle=1
	vjsr	vg_sub_move_60_right ; P2 spare lives
	vjsr	vg_sub_move_60_right
	vjsr	vg_sub_move_60_right
	vjsr	vg_sub_move_60_right
	vjsr	vg_sub_move_60_right
	vjsr	vg_sub_move_60_right

hdr_template_player_2_end = *
cac1 = hdr_template_player_1_end - hdr_template
cac2 = hdr_template_player_2_end - hdr_template

; See Laa2b.  These are the amount of the canned video sequence to copy.
hdr_template_len_table
	.byte	hdr_template_player_1_end-hdr_template-1	; 1 player
	.byte	hdr_template_player_2_end-hdr_template-1	; 2 player




; Tables of addresses of areas to assemble various video sequences into.
; 
; These are the 6502-seen addresses; see the vjmp tables below, which hold
; the corresponding vector-generator addresses in the form of a vjmp.
; These tables are used at b2c1 and b2e1; which one is used is based on
; the values in the dblbuf_flg vector.
; Table A
dblbuf_addr_A
	.word	vecram_2006
        .word   vecram_2202
        .word   vecram_240c
dblbuf_addr_A2
        .word   vecram_2692
        .word   vecram_2900
        .word   vecram_2a56
        .word   vecram_2cd8
        .word   vecram_2dbe
        .word   vecram_2e24
; Table B
dblbuf_addr_B
	.word	vecram_2104
        .word   vecram_2306
        .word   vecram_254e
        .word   vecram_27c8
        .word   vecram_29aa
        .word   vecram_2b96
dblbuf_addr_B2
        .word   vecram_2d4a
        .word   vecram_2df0
        .word   vecram_2ea6

; This table gives the location to stuff the vjmp from the tables below
; depending on which way the double-buffering flag is set.
dblbuf_vjsr_loc
	.word	vecram_2004
        .word   vecram_2200
        .word   vecram_240a
        .word   vecram_2690
        .word   vecram_28fe
        .word   vecram_2a54
        .word   vecram_2cd6
        .word   vecram_2dbc
        .word   vecram_2e22

; These tables contain vjmp instructions corresponding to Tables A and B
; above.  The addresses here are the vector-generator-visible addresses
; that refer to the same video RAM as the 6502-visible addresses above.
; Table C
dblbuf_vjmp_A
	vjmp	vecram_2006
	vjmp	vecram_2202
	vjmp	vecram_240c
	vjmp	vecram_2692
	vjmp	vecram_2900
	vjmp	vecram_2a56
	vjmp	vecram_2cd8
	vjmp	vecram_2dbe
	vjmp	vecram_2e24
; Table D
dblbuf_vjmp_B
	vjmp	vecram_2104
	vjmp	vecram_2306
	vjmp	vecram_254e
	vjmp	vecram_27c8
	vjmp	vecram_29aa
	vjmp	vecram_2b96
	vjmp	vecram_2d4a
	vjmp	vecram_2df0
	vjmp	vecram_2ea6

; I don't know what these three are used for.  The first jumps to a
; routine that calls the double-buffered stuff (in an order different
; from that of the above tables); the second calls just one of them,
; and the third does nothing.  All three halt after doing their things.
; But see Lb1bc.
Lcec2
	vjmp	L3db4
Lcec4
	vjmp	L3dc8
Lcec6
	vjmp	L3dcc




graphic_table
	vjsr	vg_sub_image_explosion_size_1 ; explosion, size 1
	vjsr	vg_sub_image_explosion_size_2 ; explosion, size 2
	vjsr	vg_sub_image_explosion_size_3 ; explosion, size 3
	vjsr	vg_sub_image_explosion_size_4 ; explosion, size 4
	vjsr	vg_sub_image_player_shot ; player shot
	vjsr	vg_sub_image_cloud_of_dots_1 ; cloud of dots 1
	vjsr	vg_sub_image_cloud_of_dots_2 ; cloud of dots 2
	vjsr	vg_sub_image_cloud_of_dots_3 ; cloud of dots 3
	vjsr	vg_sub_image_cloud_of_dots_4 ; cloud of dots 4
	vjsr	vg_sub_image_spiker_1 ; spiker 1
	vjsr	vg_sub_image_spiker_2 ; spiker 2
	vjsr	vg_sub_image_spiker_3 ; spiker 3
	vjsr	vg_sub_image_spiker_4 ; spiker 4
	vjsr	vg_sub_image_tanker_flipper ; regular (flipper) tanker
	vjsr	vg_sub_image_4_dots_orthogonal ; four dots, orthogonal
	vjsr	vg_sub_image_4_dots_diagonal ; four dots, diagonal
	vjsr	vg_sub_image_enemy_shot_1 ; enemy shot 1
	vjsr	vg_sub_image_enemy_shot_2 ; enemy shot 2
	vjsr	vg_sub_image_enemy_shot_3 ; enemy shot 3
	vjsr	vg_sub_image_enemy_shot_4 ; enemy shot 4
graphic_table_hit_by_shot_1_offset = *-graphic_table
	vjsr	vg_sub_image_hit_1 ; hit-by-shot explosion 1
	vjsr	vg_sub_image_hit_2 ; hit-by-shot explosion 2
	vjsr	vg_sub_image_hit_3 ; hit-by-shot explosion 3
	vjsr	vg_sub_image_hit_4 ; hit-by-shot explosion 4
	vjsr	vg_sub_image_hit_5 ; hit-by-shot explosion 5
	vjsr	vg_sub_image_hit_6 ; hit-by-shot explosion 6
	vjsr	vg_sub_image_hit_4 ; hit-by-shot explosion 4
	vjsr	vg_sub_image_hit_2 ; hit-by-shot explosion 2
	vjsr	vg_sub_image_hit_1 ; hit-by-shot explosion 1
	vjsr	vg_sub_image_spiked_player ; spiked player
	vjsr	vg_sub_image_fuzzballed_player_1 ; fuzzballed player 1
	vjsr	vg_sub_image_fuzzballed_player_2 ; fuzzballed player 2
	vjsr	vg_sub_image_fuzzballed_player_3 ; fuzzballed player 3
	vjsr	vg_sub_image_fuzzballed_player_4 ; fuzzballed player 4
	vjsr	vg_sub_image_fuzzballed_player_5 ; fuzzballed player 5
	vjsr	vg_sub_image_fuzzballed_player_6 ; fuzzballed player 6
	vjsr	vg_sub_image_fuzzballed_player_7 ; fuzzballed player 7
	vjsr	vg_sub_image_tanker_pulsar ; pulsar-holding tanker
	vjsr	vg_sub_image_tanker_fuzzball ; fuzzball?-holding tanker
	vjsr	vg_sub_image_fuzzball_1 ; fuzzball 1
	vjsr	vg_sub_image_fuzzball_2 ; fuzzball 2
	vjsr	vg_sub_image_fuzzball_3 ; fuzzball 3
	vjsr	vg_sub_image_fuzzball_4 ; fuzzball 4
	vjsr	vg_sub_image_score_750 ; 750
	vjsr	vg_sub_image_score_500 ; 500
	vjsr	vg_sub_image_score_250 ; 250











	.local


;
; I believe that this is debouncing the coin switches, with a long debounce
;

check_coin_sw
	; X goes 2, 1, 0 as we look at bits in cabsw_shadow
	ldx     #$02
?b0
	.byte $ad, $08, $00	; XXX lda     cabsw_shadow
	cpx     #$01
	beq     ?f1
	bcs     ?f2
        ; X is 0
	lsr     a
?f1
	; X is 1
	lsr     a
?f2
	; X is 2
	lsr     a

	; cabsw_shadow has been shifted right 1, 2 or 3 times
        ; One of the coin switch bits is now in the carry

	lda     L0d,x
	and     #$1f

	; Branch if the coin switch is set
	bcs     ?coin_set

	; Branch if the L0d table entry is zero
	beq     ?l4


	cmp     #$1b
	; Branch if table entry >= $1b
	bcs     ?f3

	; Save the table entry
	tay


	lda     timer_seconds
	and     #7
	cmp     #7

	; Recover the table entry
	tya

	; branch if timer % 8 < 7
	bcc     ?l4
?f3
	; Decrement the table entry
	sbc     #$01

	; Save the new table entry value
?l4
	sta     L0d,x

	; Check the slam switch
	.byte $ad, $08, $00	; XXX lda     cabsw_shadow
	and     #cabsw_slam_sw_mask
	bne     ?l5

	; Slam switch on
	; Set slam timer
	lda     #240
	sta     slam_timer
?l5
	lda     slam_timer
	beq     ?l6
	dec     slam_timer
	lda     #$00
	sta     L0d,x
	sta     L10,x
?l6
	clc
	lda     L10,x
	beq     ?f10
	dec     L10,x
	bne     ?f10
	sec
	bcs     ?f10 ; always branch


?coin_set
	; A contains the L0d table entry, anded with $1f

	cmp     #$1b
	bcs     ?f8
	lda     L0d,x
	adc     #$20
	bcc     ?l4
	beq     ?f8
	clc
?f8
	lda     #$1f
	bcs     ?l4
	sta     L0d,x
	lda     L10,x
	beq     ?f9
	sec
?f9
	lda     #$78
	sta     L10,x
?f10
	bcc     ?f13
	lda     #$00
	cpx     #$01
	bcc     ?f12
	beq     ?f11
; coin in right slot
	lda     coinage_shadow
	and     #$0c ; right slot multiplier
	lsr     a
	lsr     a
	beq     ?f12 ; branch if x1
	adc     #$02
	bne     ?f12
; coin in left slot
?f11
	lda     coinage_shadow
	and     #$10 ; left slot multiplier
	beq     ?f12
	lda     #$01
; At this point, A holds the post-multiplier coin count, minus 1.
?f12
	sec
	pha
	adc     coin_string
	sta     coin_string
	pla
	sec
	adc     uncredited
	sta     uncredited
	inc     L13,x
?f13
	dex
	bmi     ?f14
	jmp     ?b0
?f14
	lda     coinage_shadow
	lsr     a ; extract bonus coins bits
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	tay
	lda     coin_string
	sec
	sbc     ?t1,y
	bmi     ?f15
	sta     coin_string
	inc     L18
	cpy     #$03 ; setting for 2 bonus
	bne     ?f15
	inc     L18
	bne     ?f15
; Bonus coins table (see code just above)
?t1
	.byte	$7f ; no bonus coins
	.byte	$02 ; 1 bonus for each 2
	.byte	$04 ; 1 bonus for each 4
	.byte	$04 ; 2 bonus for each 4
	.byte	$05 ; 1 bonus for each 5
	.byte	$03 ; 1 bonus for each 3
	.byte	$7f ; no bonus coins
	.byte	$7f ; no bonus coins
?f15
	lda     coinage_shadow
	and     #$03 ; coins-to-credits bits (XOR $02)
	tay
	beq     ?f18 ; branch if free play
; A now 1 for 1c/2c, 2 for 1c/1c, 3 for 2c/1c
	lsr     a
	adc     #$00
	eor     #$ff
; A now fe for 1c/*, fd for 2c/1c
	sec
	adc     uncredited
	bcs     ?f16
	adc     L18
	bmi     ?f19
	sta     L18
	lda     #$00
?f16
	cpy     #$02
	bcs     ?f17
	inc     credits
?f17
	inc     credits
?f18
	sta     uncredited
?f19
	lda     timer_seconds
	lsr     a
	bcs     ?f24
	ldy     #$00
	ldx     #$02
?f20
	lda     L13,x
	beq     ?f21
	cmp     #$10
	bcc     ?f21
	adc     #$ef
	iny
	sta     L13,x
?f21
	dex
	bpl     ?f20
	tya
	bne     ?f24
	ldx     #$02
?f22
	lda     L13,x
	beq     ?f23
	clc
	adc     #$ef
	sta     L13,x
	bmi     ?f24
?f23
	dex
	bpl     ?f22
?f24
	rts











msgs_en
_msg_game_over = *-msgs_en
	.word   msg_en_game_over ; "GAME OVER"
_msg_player = *-msgs_en
        .word   msg_en_player ; "PLAYER "
_msg_player2 = *-msgs_en
        .word   msg_en_player ; "PLAYER "
_msg_press_start = *-msgs_en
        .word   msg_en_press_start ; "PRESS START"
_msg_play = *-msgs_en
        .word   msg_en_play ; "PLAY"
_msg_enter_your_initials = *-msgs_en
        .word   msg_en_enter_your_initials ; "ENTER YOUR INITIALS"
_msg_spin_knob_to_change = *-msgs_en
        .word   msg_en_spin_knob_to_change ; "SPIN KNOB TO CHANGE"
_msg_press_fire_to_select = *-msgs_en
        .word   msg_en_press_fire_to_select ; "PRESS FIRE TO SELECT"
_msg_high_scores = *-msgs_en
        .word   msg_en_high_scores ; "HIGH SCORES"
_msg_ranking_from_1_to_ = *-msgs_en
        .word   msg_en_ranking_from_1_to_ ; "RANKING FROM 1 TO "
_msg_rate_yourself = *-msgs_en
        .word   msg_en_rate_youself ; "RATE YOURSELF"
_msg_novice = *-msgs_en
        .word   msg_en_novice ; "NOVICE"
_msg_expert = *-msgs_en
        .word   msg_en_expert ; "EXPERT"
_msg_bonus = *-msgs_en
        .word   msg_en_bonus ; "BONUS"
_msg_time = *-msgs_en
        .word   msg_en_time ; "TIME"
_msg_level = *-msgs_en
        .word   msg_en_level ; "LEVEL"
_msg_hole = *-msgs_en
        .word   msg_en_hole ; "HOLE"
_msg_insert_coins = *-msgs_en
        .word   msg_en_insert_coins ; "INSERT COINS"
_msg_free_play = *-msgs_en
        .word   msg_en_free_play ; "FREE PLAY"
_msg_1_coin_2_plays = *-msgs_en
        .word   msg_en_1_coin_2_plays ; "1 COIN 2 PLAYS"
_msg_1_coin_1_play = *-msgs_en
        .word   msg_en_1_coin_1_play ; "1 COIN 1 PLAY"
_msg_2_coins_1_play = *-msgs_en
        .word   msg_en_2_coins_1_play ; "2 COINS 1 PLAY"
_msg_copyright = *-msgs_en
        .word   msg_en_copyright ; "(c) MCMLXXX ATARI"
_msg_credits = *-msgs_en
        .word   msg_en_credits ; "CREDITS "
_msg_bonus2 = *-msgs_en
        .word   msg_en_bonus2 ; "BONUS "
_msg_2_credit_minimum = *-msgs_en
        .word   msg_en_2_credit_minimum ; "2 CREDIT MINIMUM"
_msg_bonus_every = *-msgs_en
        .word   msg_en_bonus_every ; "BONUS EVERY "
_msg_avoid_spikes = *-msgs_en
        .word   msg_en_avoid_spikes ; "AVOID SPIKES"
_msg_level2 = *-msgs_en
        .word   msg_en_level2 ; "LEVEL"
_msg_superzapper_recharge = *-msgs_en
        .word   msg_en_superzapper_recharge ; "SUPERZAPPER RECHARGE"

msgs_fr
	.word   msg_fr_game_over ; "FIN DE PARTIE"
        .word   msg_fr_player ; "JOUEUR "
        .word   msg_fr_player ; "JOUEUR "
        .word   msg_fr_press_start ; "APPUYEZ SUR START"
        .word   msg_fr_play ; "JOUEZ"
        .word   msg_fr_enter_your_initials ; "SVP ENTREZ VOS INITIALES"
        .word   msg_fr_spin_knob_to_change ; "TOURNEZ LE BOUTON POUR CHANGER"
        .word   msg_fr_press_fire_to_select ; "POUSSEZ FEU QUAND CORRECTE"
        .word   msg_fr_high_scores ; "MEILLEURS SCORES"
        .word   msg_fr_ranking_from_1_to_ ; "PLACEMENT DE 1 A "
        .word   msg_fr_rate_youself ; "EVALUEZ-VOUS"
        .word   msg_fr_novice ; "NOVICE"
        .word   msg_fr_expert ; "EXPERT"
        .word   msg_fr_bonus ; "BONUS"
        .word   msg_fr_time ; "DUREE"
        .word   msg_fr_level ; "NIVEAU"
        .word   msg_fr_hole ; "TROU"
        .word   msg_fr_insert_coins ; "INTRODUIRE LES PIECES"
        .word   msg_fr_free_play ; "FREE PLAY"
        .word   msg_fr_1_coin_2_plays ; "1 PIECE 2 JOUEURS"
        .word   msg_fr_1_coin_1_play ; "1 PIECE 1 JOUEUR"
        .word   msg_fr_2_coins_1_play ; "2 PIECES 1 JOUEUR"
        .word   msg_fr_copyright ; "(c) MCMLXXX ATARI"
        .word   msg_fr_credits ; "CREDITS "
        .word   msg_fr_bonus2 ; "BONUS "
        .word   msg_fr_2_credit_minimum ; "2 JEUX MINIMUM"
        .word   msg_fr_bonus_every ; "BONUS CHAQUE "
        .word   msg_fr_avoid_spikes ; "ATTENTION AUX LANCES"
        .word   msg_fr_level2 ; "NIVEAU"
        .word   msg_fr_superzapper_recharge ; "SUPERZAPPER RECHARGE"

msgs_de
	.word   msg_de_game_over ; "SPIELENDE"
        .word   msg_de_player ; "SPIELER "
        .word   msg_de_player ; "SPIELER "
        .word   msg_de_press_start ; "START DRUECKEN"
        .word   msg_de_play ; "SPIEL"
        .word   msg_de_enter_your_initials ; "GEBEN SIE IHRE INITIALEN EIN"
        .word   msg_de_spin_knob_to_change ; "KNOPF DREHEN ZUM WECHSELN"
        .word   msg_de_press_fire_to_select ; "FIRE DRUECKEN WENN RICHTIG"
        .word   msg_de_high_scores ; "HOECHSTZAHLEN"
        .word   msg_de_ranking_from_1_to_ ; "RANGLISTE VON 1 ZUM "
        .word   msg_de_rate_youself ; "SELBST RECHNEN"
        .word   msg_de_novice ; "ANFAENGER"
        .word   msg_de_expert ; "ERFAHREN"
        .word   msg_de_bonus ; "BONUS"
        .word   msg_de_time ; "ZEIT"
        .word   msg_de_level ; "GRAD"
        .word   msg_de_hole ; "LOCH"
        .word   msg_de_insert_coins ; "GELD EINWERFEN"
        .word   msg_de_free_play ; "FREE PLAY"
        .word   msg_de_1_coin_2_plays ; "1 MUENZ 2 SPIELE"
        .word   msg_de_1_coin_1_play ; "1 MUENZE 1 SPIEL"
        .word   msg_de_2_coins_1_play ; "2 MUENZEN 1 SPIEL"
        .word   msg_de_copyright ; "(c) MCMLXXX ATARI"
        .word   msg_de_credits ; "KREDITE "
        .word   msg_de_bonus2 ; "BONUS "
        .word   msg_de_2_credit_minimum ; "2 SPIELE MINIMUM"
        .word   msg_de_bonus_every ; "BONUS JEDE "
        .word   msg_de_avoid_spikes ; "SPITZEN AUSWEICHEN"
        .word   msg_de_level2 ; "GRAD"
        .word   msg_de_superzapper_recharge ; "NEUER SUPERZAPPER"

msgs_es
	.word   msg_es_game_over ; "JUEGO TERMINADO"
        .word   msg_es_player ; "JUGADOR "
        .word   msg_es_player ; "JUGADOR "
        .word   msg_es_press_start ; "PULSAR START"
        .word   msg_es_play ; "JUEGUE"
        .word   msg_es_enter_your_initials ; "ENTRE SUS INICIALES"
        .word   msg_es_spin_knob_to_change ; "GIRE LA PERILLA PARA CAMBIAR"
        .word   msg_es_press_fire_to_select ; "OPRIMA FIRE PARA SELECCIONAR"
        .word   msg_es_high_scores ; "RECORDS"
        .word   msg_es_ranking_from_1_to_ ; "RANKING DE 1 A "
        .word   msg_es_rate_youself ; "CALIFIQUESE"
        .word   msg_es_novice ; "NOVICIO"
        .word   msg_es_expert ; "EXPERTO"
        .word   msg_es_bonus ; "BONUS"
        .word   msg_es_time ; "TIEMPO"
        .word   msg_es_level ; "NIVEL"
        .word   msg_es_hole ; "HOYO"
        .word   msg_es_insert_coins ; "INSERTE FICHAS"
        .word   msg_es_free_play ; "FREE PLAY"
        .word   msg_es_1_coin_2_plays ; "1 MONEDA 2 JUEGOS"
        .word   msg_es_1_coin_1_play ; "1 MONEDA 1 JUEGO"
        .word   msg_es_2_coins_1_play ; "2 MONEDAS 1 JUEGO"
        .word   msg_es_copyright ; "(c) MCMLXXX ATARI"
        .word   msg_es_credits ; "CREDITOS "
        .word   msg_es_bonus2 ; "BONUS "
        .word   msg_es_2_credit_minimum ; "2 JUEGOS MINIMO"
        .word   msg_es_bonus_every ; "BONUS CADA "
        .word   msg_es_avoid_spikes ; "EVITE LAS PUNTAS"
        .word   msg_es_level2 ; "NIVEL"
        .word   msg_es_superzapper_recharge ; "NUEVO SUPERZAPPER"

; Y-coordinates, colours, and sizes of messages.  X-coordinates vary with
; string length and thus with language; they are therefore stored with the
; (language-specific) string contents.
; Each message has two bytes here.  The first contains the message's
; colour in its high nibble, with its size (b value) in its low nibble.
; The second byte is the Y coordinate (signed).
; See the code at ab14 for more.
Ld121
	.byte	$51
	.byte	$56 ; 86 (GAME OVER)
	.byte	$00
	.byte	$1a ; 26 (PLAYER )
	.byte	$01
	.byte	$20 ; 32 (PLAYER )
	.byte	$31
	.byte	$56 ; 86 (PRESS START)
	.byte	$01
	.byte	$38 ; 56 (PLAY)
	.byte	$31
	.byte	$b0 ; -80 (ENTER YOUR INITIALS)
	.byte	$41
	.byte	$00 ; 0 (SPIN KNOB TO CHANGE)
	.byte	$11
	.byte	$f6 ; -10 (PRESS FIRE TO SELECT)
	.byte	$30
	.byte	$38 ; 56 (HIGH SCORES)
	.byte	$31
	.byte	$ce ; -50 (RANKING FROM 1 TO )
	.byte	$51
	.byte	$0a ; 10 (RATE YOURSELF)
	.byte	$31
	.byte	$e2 ; -30 (NOVICE)
	.byte	$31
	.byte	$e2 ; -30 (EXPERT)
	.byte	$51
	.byte	$ba ; -70 (BONUS)
	.byte	$51
	.byte	$98 ; -104 (TIME)
	.byte	$51
	.byte	$d8 ; -40 (LEVEL)
	.byte	$51
	.byte	$c9 ; -55 (HOLE)
	.byte	$31
	.byte	$56 ; 86 (INSERT COINS)
	.byte	$51
	.byte	$80 ; -128 (FREE PLAY)
	.byte	$51
	.byte	$80 ; -128 (1 COIN 2 PLAYS)
	.byte	$51
	.byte	$80 ; -128 (1 COIN 1 PLAY)
	.byte	$51
	.byte	$80 ; -128 (2 COINS 1 PLAY)
	.byte	$71
	.byte	$92 ; -110 ((c) MCMLXXX ATARI)
	.byte	$51
	.byte	$80 ; -128 (CREDITS)
	.byte	$31
	.byte	$b0 ; -80 (BONUS )
	.byte	$51
	.byte	$89 ; -119 (2 CREDIT MINIMUM)
	.byte	$41
	.byte	$89 ; -119 (BONUS EVERY )
	.byte	$00
	.byte	$00 ; 0 (AVOID SPIKES)
	.byte	$71
	.byte	$5a ; 90 (LEVEL)
	.byte	$71
	.byte	$a0 ; -96 (SUPERZAPPER RECHARGE)



; Each string is preceded by the X-coordinate at which it should be drawn.
; Y-coordinates come from a table at Ld121 (they don't vary with string
; length and hence don't have to be language-specific; X coordinates do,
; so they are attached to the language-specific strings).
; See the code at vapp_msg for more.
; The byte valus are offsets into char_jsrtbl

msg_en_game_over
	; -27 "GAME OVER"
	.byte	<-27,_G,_A,_M,_E,__,_O,_V,_E,_R|_eos

msg_fr_game_over
	; -39 "FIN DE PARTIE"
	.byte	<-39,_F,_I,_N,__,_D,_E,__,_P,_A,_R,_T,_I,_E|_eos

msg_de_game_over
	; -27 "SPIELENDE"
	.byte	<-27,_S,_P,_I,_E,_L,_E,_N,_D,_E|_eos

msg_es_game_over
	; -45 "JUEGO TERMINADO"
	.byte	<-45,_J,_U,_E,_G,_O,__,_T,_E,_R,_M,_I,_N,_A,_D,_O|_eos

msg_en_player
	; -51 "PLAYER "
	.byte	<-51,_P,_L,_A,_Y,_E,_R,__|_eos

msg_fr_player
	; -58 -- should this be -51 maybe? ; "JOUEUR "
	.byte	<-58,_J,_O,_U,_E,_U,_R,__|_eos

msg_de_player
	; -58 "SPIELER "
	.byte	<-58,_S,_P,_I,_E,_L,_E,_R,__|_eos

msg_es_player
	; -58 "JUGADOR "
	.byte	<-58,_J,_U,_G,_A,_D,_O,_R,__|_eos

msg_en_press_start
	; -33 "PRESS START"
	.byte	<-33,_P,_R,_E,_S,_S,__,_S,_T,_A,_R,_T|_eos

msg_fr_press_start
	; -51 "APPUYEZ SUR START"
	.byte	<-51,_A,_P,_P,_U,_Y,_E,_Z,__,_S,_U,_R,__,_S,_T,_A,_R,_T|_eos

msg_de_press_start
	; -42 "START DRUECKEN"
	.byte	<-42,_S,_T,_A,_R,_T,__,_D,_R,_U,_E,_C,_K,_E,_N|_eos

msg_es_press_start
	; -36 "PULSAR START"
	.byte	<-36,_P,_U,_L,_S,_A,_R,__,_S,_T,_A,_R,_T|_eos

msg_en_play
	; -12 "PLAY"
	.byte	<-12,_P,_L,_A,_Y|_eos

msg_fr_play
	; -15 "JOUEZ"
	.byte	<-15,_J,_O,_U,_E,_Z|_eos

msg_de_play
	; -15 "SPIEL"
	.byte	<-15,_S,_P,_I,_E,_L|_eos

msg_es_play
	; -18 "JUEGUE"
	.byte	<-18,_J,_U,_E,_G,_U,_E|_eos

msg_en_enter_your_initials
	; -57 "ENTER YOUR INITIALS"
	.byte	<-57,_E,_N,_T,_E,_R,__,_Y,_O,_U,_R,__,_I,_N,_I,_T,_I,_A,_L,_S|_eos

msg_fr_enter_your_initials
	; -72 "SVP ENTREZ VOS INITIALES"
	.byte	<-72,_S,_V,_P,__,_E,_N,_T,_R,_E,_Z,__,_V,_O,_S,__,_I,_N,_I,_T,_I,_A,_L,_E,_S|_eos

msg_de_enter_your_initials
	; -84 "GEBEN SIE IHRE INITIALEN EIN"
	.byte	<-84,_G,_E,_B,_E,_N,__,_S,_I,_E,__,_I,_H,_R,_E,__,_I,_N,_I,_T,_I,_A,_L,_E,_N,__,_E,_I,_N|_eos

msg_es_enter_your_initials
	; -57 "ENTRE SUS INICIALES"
	.byte	<-57,_E,_N,_T,_R,_E,__,_S,_U,_S,__,_I,_N,_I,_C,_I,_A,_L,_E,_S|_eos

msg_en_spin_knob_to_change
	; -57 "SPIN KNOB TO CHANGE"
	.byte	<-57,_S,_P,_I,_N,__,_K,_N,_O,_B,__,_T,_O,__,_C,_H,_A,_N,_G,_E|_eos

msg_fr_spin_knob_to_change
	; -90 "TOURNEZ LE BOUTON POUR CHANGER"
	.byte	<-90,_T,_O,_U,_R,_N,_E,_Z,__,_L,_E,__,_B,_O,_U,_T,_O,_N,__,_P,_O,_U,_R,__,_C,_H,_A,_N,_G,_E,_R|_eos

msg_de_spin_knob_to_change
	; -75 "KNOPF DREHEN ZUM WECHSELN"
	.byte	<-75,_K,_N,_O,_P,_F,__,_D,_R,_E,_H,_E,_N,__,_Z,_U,_M,__,_W,_E,_C,_H,_S,_E,_L,_N|_eos

msg_es_spin_knob_to_change
	; -84 "GIRE LA PERILLA PARA CAMBIAR"
	.byte	<-84,_G,_I,_R,_E,__,_L,_A,__,_P,_E,_R,_I,_L,_L,_A,__,_P,_A,_R,_A,__,_C,_A,_M,_B,_I,_A,_R|_eos

msg_en_press_fire_to_select
	; -60 "PRESS FIRE TO SELECT"
	.byte	<-60,_P,_R,_E,_S,_S,__,_F,_I,_R,_E,__,_T,_O,__,_S,_E,_L,_E,_C,_T|_eos

msg_fr_press_fire_to_select
	; -78 "POUSSEZ FEU QUAND CORRECTE"
	.byte	<-78,_P,_O,_U,_S,_S,_E,_Z,__,_F,_E,_U,__,_Q,_U,_A,_N,_D,__,_C,_O,_R,_R,_E,_C,_T,_E|_eos

msg_de_press_fire_to_select
	; -78 "FIRE DRUECKEN WENN RICHTIG"
	.byte	<-78,_F,_I,_R,_E,__,_D,_R,_U,_E,_C,_K,_E,_N,__,_W,_E,_N,_N,__,_R,_I,_C,_H,_T,_I,_G|_eos

msg_es_press_fire_to_select
	; -84 "OPRIMA FIRE PARA SELECCIONAR"
	.byte	<-84,_O,_P,_R,_I,_M,_A,__,_F,_I,_R,_E,__,_P,_A,_R,_A,__,_S,_E,_L,_E,_C,_C,_I,_O,_N,_A,_R|_eos

msg_en_high_scores
	; -68 "HIGH SCORES"
	.byte	<-68,_H,_I,_G,_H,__,_S,_C,_O,_R,_E,_S|_eos

msg_fr_high_scores
	; -98 "MEILLEURS SCORES"
	.byte	<-98,_M,_E,_I,_L,_L,_E,_U,_R,_S,__,_S,_C,_O,_R,_E,_S|_eos

msg_de_high_scores
	; -80 "HOECHSTZAHLEN"
	.byte	<-80,_H,_O,_E,_C,_H,_S,_T,_Z,_A,_H,_L,_E,_N|_eos

msg_es_high_scores
	; -44 "RECORDS"
	.byte	<-44,_R,_E,_C,_O,_R,_D,_S|_eos

msg_en_ranking_from_1_to_
	; -62 "RANKING FROM 1 TO "
	.byte	<-62,_R,_A,_N,_K,_I,_N,_G,__,_F,_R,_O,_M,__,_1,__,_T,_O,__|_eos

msg_fr_ranking_from_1_to_
	; -62 "PLACEMENT DE 1 A "
	.byte	<-62,_P,_L,_A,_C,_E,_M,_E,_N,_T,__,_D,_E,__,_1,__,_A,__|_eos

msg_de_ranking_from_1_to_
	; -68 "RANGLISTE VON 1 ZUM "
	.byte	<-68,_R,_A,_N,_G,_L,_I,_S,_T,_E,__,_V,_O,_N,__,_1,__,_Z,_U,_M,__|_eos

msg_es_ranking_from_1_to_
	; -56 "RANKING DE 1 A "
	.byte	<-56,_R,_A,_N,_K,_I,_N,_G,__,_D,_E,__,_1,__,_A,__|_eos

msg_en_rate_youself
	; -39 "RATE YOURSELF"
	.byte	<-39,_R,_A,_T,_E,__,_Y,_O,_U,_R,_S,_E,_L,_F|_eos

msg_fr_rate_youself
	; -36 "EVALUEZ-VOUS"
	.byte	<-36,_E,_V,_A,_L,_U,_E,_Z,_mi,_V,_O,_U,_S|_eos

msg_de_rate_youself
	; -42 "SELBST RECHNEN"
	.byte	<-42,_S,_E,_L,_B,_S,_T,__,_R,_E,_C,_H,_N,_E,_N|_eos

msg_es_rate_youself
	; -33 "CALIFIQUESE"
	.byte	<-33,_C,_A,_L,_I,_F,_I,_Q,_U,_E,_S,_E|_eos

msg_en_novice
msg_fr_novice
	; -86 "NOVICE"
	.byte	<-86,_N,_O,_V,_I,_C,_E|_eos

msg_es_novice
	; -86 "NOVICIO"
	.byte	<-86,_N,_O,_V,_I,_C,_I,_O|_eos

msg_de_novice
	; -86 "ANFAENGER"
	.byte	<-86,_A,_N,_F,_A,_E,_N,_G,_E,_R|_eos

msg_en_expert
msg_fr_expert
	; 74 "EXPERT"
	.byte	<74,_E,_X,_P,_E,_R,_T|_eos

msg_es_expert
	; 69 "EXPERTO"
	.byte	<69,_E,_X,_P,_E,_R,_T,_O|_eos

msg_de_expert
	; 64 "ERFAHREN"
	.byte	<64,_E,_R,_F,_A,_H,_R,_E,_N|_eos

msg_en_bonus
msg_fr_bonus
msg_de_bonus
msg_es_bonus
	; -117 "BONUS"
	.byte	<-117,_B,_O,_N,_U,_S|_eos

msg_en_time
	; -24 "TIME"
	.byte	<-24,_T,_I,_M,_E|_eos

msg_fr_time
	; -32 "DUREE"
	.byte	<-32,_D,_U,_R,_E,_E|_eos

msg_de_time
	; -24 "ZEIT"
	.byte	<-24,_Z,_E,_I,_T|_eos

msg_es_time
	; -28 "TIEMPO"
	.byte	<-28,_T,_I,_E,_M,_P,_O|_eos

msg_en_level
	; -117 "LEVEL"
	.byte	<-117,_L,_E,_V,_E,_L|_eos

msg_fr_level
	; -117 "NIVEAU"
	.byte	<-117,_N,_I,_V,_E,_A,_U|_eos

msg_de_level
	; -117 "GRAD"
	.byte	<-117,_G,_R,_A,_D|_eos

msg_es_level
	; -117 "NIVEL"
	.byte	<-117,_N,_I,_V,_E,_L|_eos

msg_en_hole
	; -117 "HOLE"
	.byte	<-117,_H,_O,_L,_E|_eos

msg_fr_hole
	; -117 "TROU"
	.byte	<-117,_T,_R,_O,_U|_eos

msg_es_hole
	; -117 "HOYO"
	.byte	<-117,_H,_O,_Y,_O|_eos

msg_de_hole
	; -117 "LOCH"
	.byte	<-117,_L,_O,_C,_H|_eos

msg_en_insert_coins
	; -36 "INSERT COINS"
	.byte	<-36,_I,_N,_S,_E,_R,_T,__,_C,_O,_I,_N,_S|_eos

msg_fr_insert_coins
	; -63 "INTRODUIRE LES PIECES"
	.byte	<-63,_I,_N,_T,_R,_O,_D,_U,_I,_R,_E,__,_L,_E,_S,__,_P,_I,_E,_C,_E,_S|_eos

msg_de_insert_coins
	; -42 "GELD EINWERFEN"
	.byte	<-42,_G,_E,_L,_D,__,_E,_I,_N,_W,_E,_R,_F,_E,_N|_eos

msg_es_insert_coins
	; -42 "INSERTE FICHAS"
	.byte	<-42,_I,_N,_S,_E,_R,_T,_E,__,_F,_I,_C,_H,_A,_S|_eos

msg_en_free_play
msg_fr_free_play
msg_de_free_play
msg_es_free_play
	; 0 "FREE PLAY"
	.byte	<0,_F,_R,_E,_E,__,_P,_L,_A,_Y|_eos

msg_en_1_coin_2_plays
	; 14 "1 COIN 2 PLAYS"
	.byte	<14,_1,__,_C,_O,_I,_N,__,_2,__,_P,_L,_A,_Y,_S|_eos

msg_fr_1_coin_2_plays
	; -6 "1 PIECE 2 JOUEURS"
	.byte	<-6,_1,__,_P,_I,_E,_C,_E,__,_2,__,_J,_O,_U,_E,_U,_R,_S|_eos

msg_de_1_coin_2_plays
	; 0 "1 MUENZ 2 SPIELE"
	.byte	<0,_1,__,_M,_U,_E,_N,_Z,__,_2,__,_S,_P,_I,_E,_L,_E|_eos

msg_es_1_coin_2_plays
	; -6 "1 MONEDA 2 JUEGOS"
	.byte	<-6,_1,__,_M,_O,_N,_E,_D,_A,__,_2,__,_J,_U,_E,_G,_O,_S|_eos

msg_en_1_coin_1_play
	; 20 "1 COIN 1 PLAY"
	.byte	<20,_1,__,_C,_O,_I,_N,__,_1,__,_P,_L,_A,_Y|_eos

msg_fr_1_coin_1_play
	; 0 "1 PIECE 1 JOUEUR"
	.byte	<0,_1,__,_P,_I,_E,_C,_E,__,_1,__,_J,_O,_U,_E,_U,_R|_eos

msg_de_1_coin_1_play
	; 0 "1 MUENZE 1 SPIEL"
	.byte	<0,_1,__,_M,_U,_E,_N,_Z,_E,__,_1,__,_S,_P,_I,_E,_L|_eos

msg_es_1_coin_1_play
	; 0 "1 MONEDA 1 JUEGO"
	.byte	<0,_1,__,_M,_O,_N,_E,_D,_A,__,_1,__,_J,_U,_E,_G,_O|_eos

msg_en_2_coins_1_play
	; 14 "2 COINS 1 PLAY"
	.byte	<14,_2,__,_C,_O,_I,_N,_S,__,_1,__,_P,_L,_A,_Y|_eos

msg_fr_2_coins_1_play
	; -6 "2 PIECES 1 JOUEUR"
	.byte	<-6,_2,__,_P,_I,_E,_C,_E,_S,__,_1,__,_J,_O,_U,_E,_U,_R|_eos

msg_de_2_coins_1_play
	; -6 "2 MUENZEN 1 SPIEL"
	.byte	<-6,_2,__,_M,_U,_E,_N,_Z,_E,_N,__,_1,__,_S,_P,_I,_E,_L|_eos

msg_es_2_coins_1_play
	; -6 "2 MONEDAS 1 JUEGO"
	.byte	<-6,_2,__,_M,_O,_N,_E,_D,_A,_S,__,_1,__,_J,_U,_E,_G,_O|_eos

msg_en_copyright
msg_fr_copyright
msg_de_copyright
msg_es_copyright
	; -45 "(c) MCMLXXX ATARI"
	.byte	<-45,_cr,__,_M,_C,_M,_L,_X,_X,_X,__,_A,_T,_A,_R,_I|_eos

msg_en_credits
msg_fr_credits
	; -96 "CREDITS "
	.byte	<-96,_C,_R,_E,_D,_I,_T,_S,__|_eos

msg_de_credits
	; -96 "KREDITE "
	.byte	<-96,_K,_R,_E,_D,_I,_T,_E,__|_eos

msg_es_credits
	; -96 "CREDITOS "
	.byte	<-96,_C,_R,_E,_D,_I,_T,_O,_S,__|_eos

msg_en_bonus2
msg_fr_bonus2
msg_de_bonus2
msg_es_bonus2
	; -38 "BONUS "
	.byte	<-38,_B,_O,_N,_U,_S,__|_eos

msg_en_2_credit_minimum
	; -48 "2 CREDIT MINIMUM"
	.byte	<-48,_2,__,_C,_R,_E,_D,_I,_T,__,_M,_I,_N,_I,_M,_U,_M|_eos

msg_fr_2_credit_minimum
	; -42 "2 JEUX MINIMUM"
	.byte	<-42,_2,__,_J,_E,_U,_X,__,_M,_I,_N,_I,_M,_U,_M|_eos

msg_de_2_credit_minimum
	; -48 "2 SPIELE MINIMUM"
	.byte	<-48,_2,__,_S,_P,_I,_E,_L,_E,__,_M,_I,_N,_I,_M,_U,_M|_eos

msg_es_2_credit_minimum
	; -45 "2 JUEGOS MINIMO"
	.byte	<-45,_2,__,_J,_U,_E,_G,_O,_S,__,_M,_I,_N,_I,_M,_O|_eos

msg_en_bonus_every
	; -56 "BONUS EVERY "
	.byte	<-56,_B,_O,_N,_U,_S,__,_E,_V,_E,_R,_Y,__|_eos

msg_fr_bonus_every
	; -61 "BONUS CHAQUE "
	.byte	<-50,_B,_O,_N,_U,_S,__,_C,_H,_A,_Q,_U,_E,__|_eos

msg_de_bonus_every
	; -61 "BONUS JEDE "
	.byte	<-50,_B,_O,_N,_U,_S,__,_J,_E,_D,_E,__|_eos

msg_es_bonus_every
	; -56 "BONUS CADA "
	.byte	<-56,_B,_O,_N,_U,_S,__,_C,_A,_D,_A,__|_eos

msg_en_avoid_spikes
	; -72 "AVOID SPIKES"
	.byte	<-72,_A,_V,_O,_I,_D,__,_S,_P,_I,_K,_E,_S|_eos

msg_fr_avoid_spikes
	; -120 "ATTENTION AUX LANCES"
	.byte	<-120,_A,_T,_T,_E,_N,_T,_I,_O,_N,__,_A,_U,_X,__,_L,_A,_N,_C,_E,_S|_eos

msg_de_avoid_spikes
	; -106 "SPITZEN AUSWEICHEN"
	.byte	<-106,_S,_P,_I,_T,_Z,_E,_N,__,_A,_U,_S,_W,_E,_I,_C,_H,_E,_N|_eos

msg_es_avoid_spikes
	; -96 "EVITE LAS PUNTAS"
	.byte	<-96,_E,_V,_I,_T,_E,__,_L,_A,_S,__,_P,_U,_N,_T,_A,_S|_eos

msg_en_level2
	; -32 "LEVEL"
	.byte	<-32,_L,_E,_V,_E,_L|_eos

msg_fr_level2
	; -38 "NIVEAU"
	.byte	<-38,_N,_I,_V,_E,_A,_U|_eos

msg_de_level2
	; -30 "GRAD"
	.byte	<-30,_G,_R,_A,_D|_eos

msg_es_level2
	; -32 "NIVEL"
	.byte	<-32,_N,_I,_V,_E,_L|_eos

msg_en_superzapper_recharge
msg_fr_superzapper_recharge
	; -60 "SUPERZAPPER RECHARGE"
	.byte	<-60,_S,_U,_P,_E,_R,_Z,_A,_P,_P,_E,_R,__,_R,_E,_C,_H,_A,_R,_G,_E|_eos

msg_de_superzapper_recharge
	; -51 "NEUER SUPERZAPPER"
	.byte	<-51,_N,_E,_U,_E,_R,__,_S,_U,_P,_E,_R,_Z,_A,_P,_P,_E,_R|_eos

msg_es_superzapper_recharge
	; -51 "NUEVO SUPERZAPPER"
	.byte	<-51,_N,_U,_E,_V,_O,__,_S,_U,_P,_E,_R,_Z,_A,_P,_P,_E,_R|_eos


language_base_tbl
	.word   msgs_en
        .word   msgs_fr
        .word   msgs_de
        .word   msgs_es




	.local
; Updates optsw2_shadow, coinage_shadow, bonus_life_each, init_lives, and
; diff_bits, from the hardware.
read_optsws
	lda     optsw2
	sta     optsw2_shadow
	and     #$38 ; bonus life setting
	lsr     a
	lsr     a
	lsr     a
	tax
	lda     ?bonus_pts_tbl,x
	sta     bonus_life_each
	; Get the contents of DIP N13, EOR with 02 (reason unknown) and
	; store into 0009.

	lda     optsw1
	eor     #$02 ; one of the coinage bits
	sta     coinage_shadow
	lda     optsw2_shadow
	rol     a
	rol     a
	rol     a
	and     #$03 ; lives
	tax
	lda     ?init_lives_tbl,x
	sta     init_lives
	lda     optsw2_shadow
	and     #$06 ; language
	tay
	lda     language_base_tbl,y
	sta     strtbl
	lda     language_base_tbl+1,y
	sta     strtbl+1
.if VER=1
	jsr     get_diff_bits_v1
.endif
.if (VER=2)|(VER=3)
	jsr     get_diff_bits_v2
.endif
	sta     diff_bits
	rts
; Table mapping bonus life setting values to tens of thousands of points
?bonus_pts_tbl
	.byte	2, 1, 3, 4, 5, 6, 7, 0
; Table mapping initial lives setting values to initial lives
?init_lives_tbl
	.byte	3, 4, 5, 2
	.byte	$7c

; maskable and NMI interrupt handler
; The tempest H/W generates a IRQ at 246 Hz, every 4 ms
	.local

nmi_irq_brk
	pha	; Save A
	txa
	pha	; Save X
	tya
	pha	; Save Y
	cld	; Clear decimal mode
	tsx	; SP to X
	cpx     #$d0
	bcc     ?f1	; stack overflow
; If the 0-9 timer is > #7f then break
	lda     main_loop_timer
	bpl     ?f2
?f1
	brk
	jmp     reset

?f2
	; Reset the watchdog timer
	sta     watchdog

	;
	; Process spinner
	;

	; Read inputs for Pokey #1
	sta     pokey1_rescan 
	lda     pokey1_spinner_cabtyp
	eor     #$0f		; invert the spinner wheel bits
	tay
	and     #$10		; upright/cocktail bit
	; Set flagbits to $10 if cocktail, 0 if upright
	sta     flagbits	; Save 
	tya
	sec
	sbc     spinner_abs
	and     #$0f
	cmp     #$08
	bcc     ?f3
	ora     #$f0
?f3
	clc
	adc     spinner_delta
	; Store the relative spinner position (00-ff) in spinner_delta
	sta     spinner_delta
	sty     spinner_abs

	;
	; Process pokey2
	;
 
	; Debounce buttons

; Rescan the inputs on Pokey #2.
; Grab the inputs of Pokey #2.
; Load the 0C00 register.
; Store in shadow location $0008.
; BIT 0: Right Coin
; BIT 1: Center Coin
; BIT 2: Left Coin
; BIT 3: Slam Swith
; BIT 4: Test Switch
; BIT 5: Diagnoistic Step Pad
; BIT 6: HALT (from vector machine)
; BIT 7: 3kHz square wave
;




	sta     pokey2_rescan ; Pokey2 rescan
	ldy     pokey2_zap_fire_starts		; zap fire start1p start2p  buttons
	lda     cabsw
	sta     cabsw_shadow

; Make a copy of zap_fire_starts_shadow.
; Store Pokey #2 inputs in zap_fire_starts_shadow.
; BIT 0: D/E2 switch #2
; BIT 1: D/E2 switch #3
; BIT 2: D/E2 switch #4
; BIT 3: Fire Button
; BIT 4: Zapper Button
; BIT 5: Start Player 1 Button
; BIT 6: Start Player 2 Button
; BIT 7: Unused.


	; Y = button scan

	; Get prev. button scan
	lda     zap_fire_starts_shadow

	; Save new button scan
	sty     zap_fire_starts_shadow

	; Y = prev. button scan
	tay

	; A = prev. button scan & new button scan
	and     zap_fire_starts_shadow

	; A = (new & prev) | known pressed
	ora     zap_fire_debounce

	; zap_fire_debounce is accumulated buttons that have been pressed for
	; 2 or more irq cycles
	sta     zap_fire_debounce

	; A = prev. btn scan
	tya

	; A = (prev. btn scan) | (new btn scan)
	ora     zap_fire_starts_shadow

	; If a btn was not pressed in either this or the previous scan
	; set it to 0 in zap_fire_debounce

	; A = ((prev. btn scan) | (new btn scan)) & (accumulated presses)
	and     zap_fire_debounce
	sta     zap_fire_debounce

	; save A
	tay


	eor     zap_fire_tmp2
	and     zap_fire_debounce
	ora     zap_fire_new
	sta     zap_fire_new

	; Restore A
	; zap_fire_tmp2  = ((prev. btn scan) | (new btn scan) & (accumulated presses)
	sty     zap_fire_tmp2

; Interrupt level handling of LEDS, coin counters, and XY inversion register.

	lda     vid_coins_shadow		; Load the X.Y axis flip state
	ldy     L13		; Increment coin counter A?
	bpl     ?f4
	ora     #$04		; Yes
?f4
	ldy     L13+1		; Increment coin counter B?
	bpl     ?f5
	ora     #$02		; Yes
?f5
	ldy     L13+2		; Increment coin counter C?
	bpl     ?f6
	ora     #$01		; Yes
?f6
	sta     vid_coins

; Haven't gone through this
; extensively, but it appears to
; be a handler for the LEDs.

	ldx     twoplayer
	inx
	ldy     play_state
	bne     ?f7
	ldx     #$00
	ldy     timer_seconds
	cpy     #$40
	bcc     ?f7
	ldx     credits
	cpx     #$02
	bcc     ?f7
	ldx     #$03
?f7
	lda     ?credits_vector,x
	eor     leds_flip_shadow
	and     #$03
	eor     leds_flip_shadow
	sta     leds_flip_shadow
	sta     leds_flip
	jsr     check_coin_sw
	jsr     update_sounds
	inc     main_loop_timer
	inc     timer_seconds
	bne     ?f9

	; Increment on_time

	inc     on_time_l
	bne     ?f8
	inc     on_time_m
	bne     ?f8
	inc     on_time_h
?f8


	; Is the current player alive?

	bit     play_state
	bvc     ?f9

	; Yes, increment play_time

	inc     play_time_l
	bne     ?f9
	inc     play_time_m
	bne     ?f9
	inc     play_time_h
?f9


; after a BIT instruction, V will contain bit 6 of the byte at the memory location
	; Test the vector processor halt bit
	; Low is busy, high is halted
	bit     cabsw
	bvc     ?vg_is_running

	; vector processor is halted .... start it.
	inc     L0133
	sta     vg_reset
	sta     vg_go
?vg_is_running


; restore registers and return from interrut

	pla
	tay
	pla
	tax
	pla
	rti

?credits_vector
	.byte	$ff
	.byte	$fd
	.byte	$fe
	.byte	$fc









	.local

; Non-selftest service mode
game_state_test_menu
	lda     #$00
	sta     play_state
	lda     #_game_mode_service
	sta     game_mode
	lda     earom_op
	bne     ?f1
	lda     cabsw
	and     #cabsw_service_sw_mask ; service switch
	beq     ?f1
	lda     #_game_state_0
	sta     game_state
	lda     hs_initflag
	and     #$03
	beq     ?f1
	jsr     init_hs
?f1
	rts






	.local
game_mode_service
	jsr     read_optsws
	jsr     show_coin_stuff
.if VER=1
	jsr     vapp_test_i3_v1
.endif
.if (VER=2)|(VER=3)
	jsr     vapp_test_i3_v2
.endif
	jsr     vapp_stats
	lda     init_lives
	sta     loopidx
	; Append a vcentre to the display list
	jsr     vapp_vcentre_40
	lda     #$e8 ; -24	; X coord
	ldx     #$c0 ; -64	; Y coord
	jsr     vapp_ldraw_XY
?loop
	; Append a vjsr vg_sub_image_player_nominal2 to the display list
	ldax_im	vg_sub_image_player_nominal2
	jsr     vapp_vjsr_AX

	dec     loopidx
	bne     ?loop
	lda     diff_bits
	and     #$03 ; difficulty
	asl     a
	tay

	; Append a vjsr diff_str_tbl[y] to the display list
	ldax_my	diff_str_tbl
	jsr     vapp_vjsr_AX
	lda     player_seg
	jsr     track_spinner
	sta     player_seg
	and     #$06
	pha
	tay
	; Append a vjsr diff_str_tbl[y] to the display list
	ldax_my	test_magic_tbl
	jsr     vapp_vjsr_AX
	pla
	lsr     a
	tax
	lda     zap_fire_debounce
	and     ?test_magic_bits,x
	cmp     ?test_magic_bits,x
	bne     ?f4
	dex
	dex
	bpl     ?f2
; 0, 1: fire&zap -> reset (enter selftest, since test switch is on)
	jmp     reset
?f2
	bne     ?f3
; 2: fire&start1 -> zero times
	jsr     zero_times
	clv
	bvc     ?f4
; 3: fire&start2 -> zero scores
?f3
	jsr     zero_scores
	lda     hs_initflag
	ora     #$03
	sta     hs_initflag
; Common code, after magic button sequence handling done
?f4
	lda     earom_op
	and     earom_clr
	beq     ?f5

	; Append a vjsr vg_sub_string_erasing to the display list
	ldax_im	vg_sub_string_erasing
	jsr     vapp_vjsr_AX

?f5
	; Append a vcentre to the display list
	jsr     vapp_vcentre_40
	lda     coinage_shadow
	and     #$1c ; coin-slot multiplier bits
	lsr     a
	lsr     a
	tax
	lda     ?t1,x
	ldy     #$ee ; -18
	ldx     #$1b ; 27
	jsr     vapp_ldraw_YxX_2dig_A
	lda     coinage_shadow
	lsr     a ; extract bonus-coins bits
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	tax
	lda     ?t2,x
	ldy     #$32 ; x offset 50
	ldx     #$f8 ; y offset -8
; Append an ldraw per Y,X, then append A as a two-digit hex number.
vapp_ldraw_YxX_2dig_A
	sta     L29
	tya		; X coord in A, Y coord in X
	jsr     vapp_ldraw_XY
	lda     #L29	; Append value at L29
	ldy     #1	; 1 pair of digits
	jmp     vapp_digits
; Magic button combinations for when test-mode switch is turned on live.
; 08 = zap, 10 = fire, 20 = start 1, 40 = start 2
?test_magic_bits
	.byte   pokey2_btn_fire_mask|pokey2_btn_zap_mask
	.byte	pokey2_btn_fire_mask|pokey2_btn_zap_mask ; selftest
	.byte	pokey2_btn_fire_mask|pokey2_btn_start1p_mask ; zero times
	.byte	pokey2_btn_fire_mask|pokey2_btn_start2p_mask ; zero scores

; Coin-slot multiplier display values, two-digit BCD.  Indexed by the
; coin-slot multiplier bits in coinage_shadow.  These do not actually
; affect the multipliers used; they are used only for test mode display.
?t1
	.byte	$11
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$21
	.byte	$24
	.byte	$25
	.byte	$26
; "BONUS ADDER" values - extra credits for multiple coins.  Indexed by
; the bonus-coin bits in coinage_shadow.  These do not actually affect
; bonus coins awarded; they are used only for test mode display.
?t2
	.byte	$00
	.byte	$12
	.byte	$14
	.byte	$24
	.byte	$15
	.byte	$13
	.byte	$00
	.byte	$00




	.local

ram_test_fail

; Selftest of low RAM failed.
; A is non-zero; either the contents of a memory
; location that should have been 0, or the difference
; between the test pattern and the contents of memory
; that the pattern was written to
 
	tay
	lda     #$00
ram_test_fail_2
	; Mark the test as failed
	sty     L79
	lsr     a
	lsr     a
	asl     a
	tax
	tya
	and     #$0f
	bne     ?f2
	inx
?f2
	txs
?b3
	lda     #$a2
	sta     pokey1_audc1
	tsx
	bne     ?f4
	lda     #$60
	ldy     #$09
	clv
	bvc     ?f5
?f4
	lda     #$c0
	ldy     #$01
?f5
	sta     pokey1_audf1	; pokey1
	; Turn on player 1 and player 2 leds
	lda     #$03
	sta     leds_flip

; Test for the 3khz signal

	ldx     #0
?b6
	; Loop until the signal from the 3 Khz square wave is positive
	bit     cabsw
	bmi     ?b6
?b7
	; Loop until the signal from the 3 Khz square wave is negative
	bit     cabsw
	bpl     ?b7
	sta     watchdog
	dex
	bne     ?b6
	dey
	bne     ?b6
	stx     pokey1_audc1
	lda     #$00
	sta     leds_flip
	ldy     #$09




?b8
	; Loop until the signal from the 3 Khz square wave is positive
	bit     cabsw
	bmi     ?b8



?b9
	; Loop until the signal from the 3 Khz square wave is negative
	bit     cabsw
	bpl     ?b9



	sta     watchdog
	dex
	bne     ?b8
	dey
	bne     ?b8
	tsx
	dex
	txs
	bpl     ?b3
	jmp     checksum_rom








	.local

Ld92f
	eor     (page0),y
Ld931
	tay
	lda     game_mode
	cmp     #$20
	bcc     ?f1
	sbc     #$18
?f1
	and     #$1f
	jmp     ram_test_fail_2





	.local
;;;
;;; Boot code
;;;

reset
	sei
	sta     watchdog
	sta     vg_reset
; clear all RAM: 0000-07ff (game RAM) and 2000-2fff (vector RAM)
	ldx     #$ff
	txs
	cld
.if VER=1
	lda	#0
	tax
.endif
.if (VER=2)|(VER=3)
	inx
	txa
.endif
	tay
?b1
	sty     memory_test_ptr_l
	stx     memory_test_ptr_h

	; Clear a page of RAM

	ldy     #$00
?b2
	sta     (memory_test_ptr),y
	iny
	bne     ?b2
	inx
	cpx     #$08
	bne     ?f3
	ldx     #$20
?f3
	cpx     #$30
	sta     watchdog
	bcc     ?b1
.if VER=1
	sta     memory_test_ptr_l
.endif
	sta	memory_test_ptr_h
	
; init pokeys
	sta     leds_flip
	sta     pokey1_skctls
	sta	pokey2_skctls

	; Set up pokeys for sound
	ldx     #pokey_skctls_setup
	stx     pokey1_skctls
	stx     pokey2_skctls

	; Clear out the volume/distortion and frequency for all sound
	; channels on both pokeys
	inx
?b4
	sta     pokey1,x
	sta     pokey2,x
	dex
	bpl     ?b4



	lda     cabsw
	and     #cabsw_service_sw_mask ; selftest switch
	beq     selftest_start
; reset in non-selftest mode

	; Delay loop
?b5
	sta     watchdog
	dec     L0100
	bne     ?b5
	dec     L0100+1
	bne     ?b5

.if (VER=2)|(VER=3)
	lda	#$10
	sta	vid_coins_shadow
.endif
	jsr     Lde11
	jsr     init_hs
.if (VER=2)|(VER=3)
	jsr	Lc16e
.endif
	cli
	jmp     main_loop

.if (VER=2)|(VER=3)
	.byte	$a0
.endif








	.local

; reset in selftest mode

selftest_start



; Test low RAM: 
; for each byte from $00 to $ff, store $11 in it, then store
; $00 in all other bytes and verify it's there, then check the $11 is
; undisturbed.  Repeat this with $22, $44, and $88 as well.  (There are
; some faults this won't catch, such as a bit getting cloned from its
; corresponding bit in the other nibble, but it's not a bad check.)
; If any of the checks fail, branch to ram_test_fail.

	; Starting test pattern

	ldx     #$11



?test_page
	; Save test pattern in SP
	; Set Y to beginning of page
	txs
	ldy     #$00


?set_byte
	; Get test pattern from SP, store in the byte being tested
	tsx
	stx     page0,y


	; Verify that other bytes in the page are still 0
	; 255 other bytes; X will be the loop counter (1 to $100)
	ldx     #$01

?test_other_bytes
	; Advance Y to the next byte, and test it
	iny
	lda     page0,y
	beq     ?zero_test_ok


?exit_fail
	jmp     ram_test_fail

?zero_test_ok
	; Loop over the 255 bytes
	inx
	bne     ?test_other_bytes

	; Recover the test pattern
	tsx
	txa

	; Kick the watchdog
	sta     watchdog

	; Y should by pointing at the last byte tested for zeroness;
	; One before the pattern byte
	; Increment it to the pattern byte
	iny

	; Compare the pattern byte with the pattern; if different, fail
	eor     page0,y
	bne     ?exit_fail

	; A is now know to be zero; set the pattern byte to zero
	sta     page0,y

	; Move on to the next byte to be set to the pattern
	iny
	bne     ?set_byte

	; The test pattern has been written to every byte in page zero.
	; Recover the test pattern
	tsx
	txa

	; Rotate it one left
	asl     a
	tax

	; If we didn't rotate a bit out of the test pattern, then
	; we still have patterns to test
	bcc     ?test_page



; Low RAM selftest passed.
; Test remaning RAM: $0100-$07ff and $2000-$2fff.  For each byte, check
; that it's zero (which it should be, we cleared it above), then do a
; write-read-compare of $11, $22, $44, and $88 in it.  When done, store a
; $00 back in it.
	ldy     #$00
	ldx     #$01
?b6
	sty     memory_test_ptr_l
	stx     memory_test_ptr_h
	ldy     #0
?b7
	lda     (memory_test_ptr),y
	beq     ?f8
	jmp     Ld931
?f8
	lda     #$11
?b9
	sta     (memory_test_ptr),y
	cmp     (memory_test_ptr),y
	beq     ?f10
	jmp     Ld92f
?f10
	asl     a
	bcc     ?b9
	lda     #$00
	sta     (memory_test_ptr),y
	iny
	bne     ?b7
	sta     watchdog
	inx
	cpx     #$08
	bne     ?f11
	ldx     #$20
?f11
	cpx     #$30
	bcc     ?b6


	.local

checksum_rom


; Okay, all RAM passed selftest.
; Checksum ROM.  For each $0800 region, XOR all its bytes together and
; XOR in its region number (0 for the first, 1 for the second, etc), then
; store the result in the space at checksum_table.  Ranges for each of the 12 bytes:
; L7d - $3000-$37ff
; $7e - $3800-$38ff
; $7f - $9000-$97ff
; $80 - $9800-$9fff
; $81 - $a000-$a7ff
; $82 - $a800-$afff
; $83 - $b000-$b7ff
; $84 - $b800-$bfff
; $85 - $c000-$c7ff
; $86 - $c800-$cfff
; $87 - $d000-$d7ff
; $88 - $d800-$dfff


	; X contains the bank number (0x3000 is bank 0, 
	; 0x3800 is bank 1, etc
	;
	; ptr1,Y point to the rom being checksummed.
	;
	; A is the accumulated cksum


	lda     #0
	tay
	tax

	; Set ptr to 0x3000, start of the first rom bank
	sta     ptr1_l
	lda     #$30
	sta     ptr1_h



?romloop
	lda     #8	; 8 256 byte regions make a 2K rom
	sta     L38
	txa

	; xor 256 bytes
?pageloop
	eor     (ptr1),y
	iny
	bne     ?pageloop

	; Increment the ptr to the next 256 byte page
	inc     ptr1_h

	sta     watchdog

	; Decrement the count of 256 bytes to go
	dec     L38
	bne     ?pageloop

	; Save the cksum in table at checksum_table
	sta     checksum_table,x

	; Move to the next ROM
	inx

	; Skip over the gap between 0x3800 and 0x9000
	cpx     #$02
	bne     ?f13
	lda     #$90	; Set ptr to 0x9000, the start of ROM #3
	sta     ptr1_h
?f13


	; Finished all 12 roms?
	cpx     #12
	bcc     ?romloop



	; All checksums computed and stored in checksum_table.
	lda     checksum_table
	beq     ?f14
	lda     #$40
	ldx     #$a4
	sta     pokey1_audf3
	stx     pokey1_audc3
?f14
	ldx     #$05
	lda     pokey1_rand
?b15
	cmp     pokey1_rand
	bne     ?f16
	dex
	bpl     ?b15
	; Mark pokey1 fail
	sta     L7a
?f16
	ldx     #$05
	lda     pokey2_rand
?b17
	cmp     pokey2_rand
	bne     ?f18
	dex
	bpl     ?b17
	; Mark pokey2 fail
	sta     L7b
; I'm not sure what Lde11 does, though I suspect it's an earom read.
; It appears to be loading stuff into the stats stored at $0406-$0411.
?f18
	jsr     Lde11
	ldy     #_game_state_attract_mode
	lda     hs_initflag
	beq     ?f19
	; Mark EAROM fail
	sta     L7c
	jsr     Lddf1
	ldy     #0	; _game_state_0
	sty     hs_initflag
?f19
	sty     game_state



; Load the colourmap used by the selftest screens.
	ldx     #7

;Lda75
?color_loop
	lda     selftest_color_ram,x
	sta     col_ram,x
	dex
	bpl     ?color_loop

	lda     #$00
	sta     leds_flip
	lda     #$10
	sta     vid_coins
	.fall	selftest_main_loop







	.local

; Top of selftest-mode main loop.
; Wait for the vector processor to be done.  Loop up to five times.

selftest_main_loop

	; Limit to five iterations
	ldy     #4


	; Wait for 21 cycles of the 3KHz signal.

?wait_cycle
	ldx     #20
?wait_on
	bit     cabsw
	bpl     ?wait_on
?wait_off
	bit     cabsw
	bmi     ?wait_off
	dex
	bpl     ?wait_on


	; Time out after five iterations

	dey
	bmi     ?done_waiting

	; Poke the watchdog - don't want to get reset while waiting!

	sta     watchdog

	; Is the vector processor done?
	; Test the vector processor halt bit
	bit     cabsw
	bvc     ?wait_cycle ; processor busy, wait another cycle

	; Either the vector processor is done or we got tired of waiting.

?done_waiting

	; Reset vector processor

	sta     vg_reset

	; Set vidptr to vecram_2000

	lda     #<vecram_2000
	sta     vidptr_l
	lda     #>vecram_2000
	sta     vidptr_h

	; Rescan pokey1 inputs

	sta     pokey1_rescan

	
	lda     pokey1_spinner_cabtyp
	sta     spinner_abs
	and     #$f
	sta     spinner_delta


	lda     cabsw
	eor     #$ff
	and     #$2f ; keep diag step, slam, and coins
	sta     zap_fire_new
	and     #$28 ; keep diag step and slam
	beq     ?f6
	asl     zap_fire_starts_shadow
	bcc     ?f5
	inc     game_state
	inc     game_state
?f5
	clv
	bvc     ?f7
?f6
	lda     #$20		; start 1 player ?
	sta     zap_fire_starts_shadow
?f7
	jsr     draw_selftest_scr

	; Append a vcentre, vhalt to the display list
	jsr     vapp_vcentre_vhalt

	sta     vg_go
	inc     timectr
	lda     timectr
	and     #$03
	bne     ?f8
	jsr     Lde1b
?f8
	lda     cabsw
	and     #cabsw_service_sw_mask
	beq     selftest_main_loop

; We depend on something else to break us out of this loop.  I suspect
; this "something" is the hardware watchdog.
;
; Yes. The self test procedure specifies that to exit the self-test
; procedure, set the disag. switch to off. That will drop us here;
; looping forever. The watchdog will fire, and send us to the reset
; vector, restarting the game.

watchdog_hack
.if VER=1
	jmp	*
.endif
.if (VER=2)|(VER=3)
	bne	*
.endif


; Loaded to colour RAM; see Lda75
selftest_color_ram
	.byte	_rgb_whi
	.byte	_rgb_yel
	.byte	_rgb_mag
	.byte	_rgb_red
	.byte	_rgb_cya
	.byte	_rgb_gre
	.byte	_rgb_blu
	.byte	_rgb_blu




	.local
; These are the various selftest screens.
?t1
        .jump   selftest_0	; Do some high score stuff, and go to state 2
        .jump   selftest_1
        .jump   selftest_2
        .jump   selftest_3
        .jump   selftest_4
        .jump   selftest_5
        .jump   selftest_6

draw_selftest_scr
	ldx     game_state
	cpx     #$0e
	bcc     ?f1
	ldx     #$02
	stx     game_state
?f1
	lda     ?t1+1,x
	pha
	lda     ?t1,x
	pha
	rts




	.local
selftest_6
	lda     #$00
	sta     leds_flip
	sta     mb_set_00_l
	sta     pokey1_audf1
	sta     pokey2_audf1
	sta     earom_write
	sta     earom_ctrl_wr
	lda     mb_status_rd
	lda     mb_rd_l
	lda     mb_rd_h
	lda     earom_rd
	lda     #$08
	sta     leds_flip

	; Store a rotating single bit1 in every mathbox register
	; This includes the odd 1f selftest register....
	lda     #$01
	ldx     #$1f
	clc
?b1
	sta     mb_set_00_l,x
	rol     a
	dex
	bpl	?b1

	; Append a vjsr vg_sub_image_box_around_screen to the display list
	ldax_im	vg_sub_image_box_around_screen
	jmp     vapp_vjsr_AX




	.local
selftest_0
	lda     earom_op
;Ldb5d
	ora     L01c7
	bne     ?f1
	jsr     Lde11
;Ldb65
	lda     hs_initflag
	; Mark EAROM fail?
	sta     L7c
	lda     #$02
	sta     game_state
?f1
	rts






.if VER=1

	.local
Ldb6b_v1
	ldx	#0
	sta	pokey2_rescan
	lda	pokey2_zap_fire_starts
	and	#$78
	sta	zap_fire_debounce
	beq	?f1
	sta	pokey1_audf1
	ldx	#$a4
?f1
	stx     pokey1_audc1
	ldx     #$00
	lda     zap_fire_new
	beq     ?f2
	asl     a
	sta     pokey1_audf2
	ldx     #$a4
?f2
	stx     pokey1_audc2
	jsr     vapp_test_i3_v1
	ldy     zap_fire_debounce
	lda     #$d0 ; -48
	ldx     #$f0 ; -16
	jsr     vapp_test_ibits_v1
	ldy     zap_fire_new
	jsr     vapp_test_ibmove_v1
	ldy	#08
	ldx	#04
	lda	spinner_delta
	jmp	vapp_ldraw_YxX_2dig_A





	.local
; Appends code to display the three lines of bits showing the configuration
; and input button values.
vapp_test_i3_v1
	; Append a vcentre to the display list
	jsr	vapp_vcentre_40
	lda	#0	; b scale
	jsr	vapp_scale_b
	lda	#$e8
	ldx	#$f8
	ldy	optsw1
	jsr	vapp_test_ibits_v1
	ldy	optsw2
	jsr	vapp_test_ibmove_v1
	jsr	get_diff_bits_v1
	tay
vapp_test_ibmove_v1
	lda	#$d0	; -48	; X coord
	ldx	#$f8	; -8	; Y coord
vapp_test_ibits_v1
	sty	L35
	jsr	vapp_ldraw_XY
	ldx	#$07
	stx	loopidx
?loop
	asl	L35
	lda	#0
	rol	a
	jsr	vapp_digit
	dec	loopidx
	bpl	?loop
	rts





	.local
; Returns value with difficulty/rating bits in $07, something unknown
; ($20 bit of spinner/cabinet select byte) in $08.
; Uses loopidx as temporary storage.
get_diff_bits_v1
	sta     pokey2_rescan
	lda     pokey2_zap_fire_starts
	and     #$07 ; difficulty/rating bits
	sta     loopidx
	sta     pokey1_rescan
	lda     pokey1_spinner_cabtyp
	and     #$20 ; Unknown
	lsr     a
	lsr     a
	ora     loopidx
	rts

.endif ; VER=1


	.local
selftest_5
	lda	spinner_delta
	lsr     a
	tay		; z and color
	lda     #$68	; Set the speckle bit in $08
			; This is odd. A is going to be or'd with $60, so
			; effectively this is just $08
	; Append a vstat to the display list
	jsr     vapp_vstat_A_Y

.if VER=1
	; Append a vjsr vg_sub_image_selftest_5 to the display list
	ldax_im	vg_sub_image_selftest_5	; rectangular grid
	jmp	vapp_vjsr_AX
.endif

.if (VER=2)|(VER=3)
	ldx	#<vg_sub_image_selftest_5
	lda	#>vg_sub_image_selftest_5
	bne	?f1
selftest_4 ; v2
	ldx	#<vg_sub_image_selftest_4
	lda	#>vg_sub_image_selftest_4
	bne	?f1
selftest_2 ; v2
	ldax_im	vg_sub_image_selftest_2	; diagonal grid
?f1
	jsr	vapp_vjsr_AX     
        ldx     #$06
        lda     #$00
?b1	sta     pokey1_audc1,x
        sta     pokey2_audc1,x
        dex
        dex
        bpl     ?b1
        rts

.endif ; VER 2, 3


.if VER=1
	.local
selftest_4 ; v1
	jsr	zero_pokey_sound      
	; Append a vjsr vg_sub_image_selftest_4 to the display list
	ldax_im	vg_sub_image_selftest_4	; colored lines
	jmp	vapp_vjsr_AX      



	.local
selftest_2 ; v1
	jsr	zero_pokey_sound      
	; Append a vjsr vg_sub_image_selftest_2 to the display list
	ldax_im	vg_sub_image_selftest_2	; diagonal grid
	jmp	vapp_vjsr_AX     

.endif ; VER=1


	.local
selftest_3
	lda	timectr
	and	#$3f       
	bne	?f1      
	inc	L39        
?f1
	lda	L39        
	and	#$07       
	tax           
	ldy	?t1,x    
	lda	#00       
	sta	pokey1_audc1,y    
	ldy	?t1+1,x    
	lda	Ldc4f,x    
	sta	pokey1,y    
	lda	#$a8       
	sta	pokey1_audc1,y    
	; Append a vjsr vg_sub_image_crosshair to the display list
	ldax_im	vg_sub_image_crosshair
.if VER=1
	jmp	vapp_vjsr_AX
.endif
.if (VER=2)|(VER=3)
	jsr	vapp_vjsr_AX   
	lda	timectr
	and	#$7f
	tay
	lda	#1
	jsr	vapp_scale_lb
	ldax_im	L34aa
	jmp	vapp_vjsr_AX
.endif ; VER 2, 3


; Selftest sound table of some sort - see Ldba7
?t1
	.byte	$16	; ? pokey2_skctls
	.byte	$00
	.byte	$10
	.byte	$02
	.byte	$12
	.byte	$04
	.byte	$14
	.byte	$06
	.byte	$16
	.byte	$00


.if (VER=2)|(VER=3)
	.byte	$ea

	.local
; Returns value with difficulty/rating bits in $07, something unknown
; ($20 bit of spinner/cabinet select byte) in $08.
; Uses loopidx as temporary storage.
get_diff_bits_v2
	sta     pokey2_rescan
	lda     pokey2_zap_fire_starts
	and     #$07 ; difficulty/rating bits
	sta     loopidx
	sta     pokey1_rescan
	lda     pokey1_spinner_cabtyp
	and     #$20 ; Unknown
	lsr     a
	lsr     a
	ora     loopidx
	rts


	.local
selftest_1 ; v2
;test_mathbox
	lda	L2e
	beq	?f4
	sta	mb_set_divisor_l
	sta	mb_set_dividend_l
	lda	L2f
	sta	mb_set_divisor_h
	ldx	#0
	jsr	divide

	; Low byte of answer s.b. 1
	cmp	#1
	bne	?fail

	; High byte of answer s.b. zero
	tya	
	bne	?fail

	txa
	bpl	?f4
?fail
	lda	#$ff
	sta	L78

?f4
	ldx	#0
	stx	draw_z

?l1
	; inc L2e/L2f
	inc	L2e
	bne	?f2
	inc	L2f
	bpl	?f2
	stx	L2f
?f2
	sta	pokey2_rescan
	lda     pokey2_zap_fire_starts		; zap fire start1p start2p  buttons
	and	#$78
	sta	zap_fire_debounce
	beq	?f6
	sta	pokey1_audf1
	ldx	#$a4
?f6
	stx     pokey1_audc1
	ldx     #$00
	lda     zap_fire_new
	beq     ?f5
	asl     a
	sta     pokey1_audf2
	ldx     #$a4
?f5
	stx     pokey1_audc2
	jsr     vapp_test_i3_v2
	ldy     zap_fire_debounce
	lda     #$d0 ; -48
	ldx     #$f0 ; -16
	jsr     vapp_test_ibits_v2
	ldy     zap_fire_new
.endif ; VER=2,3


.if VER=1
; This is the same table in all versions, just in different locations
Ldc4f
	.byte	$10
	.byte	$10, $40, $40, $90, $90, $ff, $ff


	.local
zero_pokey_sound
	ldx     #$06
	lda     #$00
?b1
	sta     pokey1_audc1,x
	sta     pokey2_audc1,x
	dex
	dex
	bpl     ?b1
	rts
.endif ; VER=1







	.local
.if VER=1
selftest_1 ; v1
	jsr     Ldb6b_v1	; Look at buttons, update spinner display
.endif
.if (VER=2)|(VER=3)
	jsr     vapp_test_ibmove_v2	; Look at buttons, update spinner display
.endif
	lda     spinner_abs
	and     #$10
	beq     ?f2
	; Append a vjsr vg_sub_char_cocktail_bit_C to the display list
	ldax_im	vg_sub_char_cocktail_bit_C
	jsr     vapp_vjsr_AX
	ldy     #$10
	lda     zap_fire_debounce
	and     #pokey2_btn_start1p_mask|pokey2_btn_start2p_mask
	beq     ?f2
	eor     #$20
	beq     ?f1
	lda     #$04
	ldy     #$08
?f1
	sta     leds_flip
	sty     vid_coins
?f2
	; draw box around screen and line across the middle
	; Append a vjsr vg_sub_image_selftest_1 to the display list
	ldax_im	vg_sub_image_selftest_1
	jsr     vapp_vjsr_AX

; Show any nonzero checksums (stored in the 12 bytes in checksum_table)
	ldx     #$0b
?b3
	lda     checksum_table,x
	beq     ?f4
	sta     L35
	stx     L38
	txa
	jsr     vapp_digit
	ldy     #$f4 ; -12
	ldx     #$f4 ; -12
	lda     L35
	jsr     vapp_ldraw_YxX_2dig_A
	lda     #$0c ; 12, 12	; X coord
.if VER=1
	ldx	#$0c		; Y coord
.endif
.if (VER=2)|(VER=3)
	tax
.endif
	jsr     vapp_ldraw_XY
	ldx     L38
?f4
	dex
	bpl     ?b3
.if VER=1
	jsr     test_mathbox
.endif
	; Append a vcentre to the display list
	jsr	vapp_vcentre_40
	lda     #$00		; X coord
	ldx     #$16		; Y coord
	jsr     vapp_ldraw_XY



; Look at the unit test results in L78-L7c; if any are
; non-zero, lookup the letter code for that test in error_codes
; and draw that character

	ldx     #4
	stx     loopidx
?loop
	ldx     loopidx
	ldy     #$00
	lda     L78,x
	beq     ?f8
	ldy     ?error_codes,x
?f8
	lda     char_jsrtbl,y
	ldx     char_jsrtbl+1,y
	jsr     vapp_A_X
	dec     loopidx
	bpl     ?loop

.if VER=1
	rts
.endif

.if (VER=2)|(VER=3)
	ldx	#$ac
	lda	#$30
	jsr	vapp_ldraw_XY
	ldy	spinner_delta
	lda	spinner_cosine,y
	ldx	spinner_sine,y
	ldy	#$c0
	jmp	vapp_ldraw_xyz
.endif


?error_codes
	; Selt test screen one error codes
	;   M Mathhbox
	;   R RAM
	;   P Audio 1
	;   Q Audio 2
	;   E EAROM
	.byte	_M, _R, _P, _Q, _E





.if VER=1
	.local
test_mathbox
	lda	L2e
	sta	mb_set_divisor_l
	sta	mb_set_dividend_l
	lda	L2f
	sta	mb_set_divisor_h
	ldx	#0
	jsr	divide

	; Test for timeout
	cpx	#$80
	bcs	?fail

	; Low byte of answer s.b. 1
	cmp	#1
	bne	?fail

	; High byte of answer s.b. zero
	tya	
	bne	?fail

	; Decrement L78 if non-zero
	lda	L78
	beq	?l1
	dec	L78

?l1
	; inc L2e/L2f
	inc	L2e
	bne	?f2
	inc	L2f
?f2

	rts

?fail
	inc	L78		; Mathbox test fail
	jmp	?l1

.endif ; v1

; Fails with:
;   divide resul:t Y is FF, A is FF
;   Call divide with
;     A $80
;     X 0

;   L2e is 0
;   L2f is $80
;
;  R7L <- 0
;  R7H <- $80
;  R10L <- 0
;  R10H <- $80
;  R11L <- 0
;  R11H <- 0
;  R6L < 16

	.local
divide

; Results
;   A = Low
;   Y = High
;   X < 0 on timeout
;
; 24 bit dividend
;   R10L set to Low
;   R10H set to Middle
;   R11L set to High
; 16 bit divisor
;   R7L set to Low
;   R7H set to High

	; A -> R10H
	; X -> R11L
	; 0 -> R11H
	ldy	#$00
.if (VER=2)|(VER=3)
	sty	draw_z
	sty	secs_avg_h
.endif
	sta	mb_set_dividend_m
	stx	mb_set_dividend_h

	; Set R11_h to 0
	sty	mb_set_11_h

.if VER=1
	; Set step counter to 16
	lda	#16
	sta	mb_set_divide_width
	; cmd_14 R10 / R7
	sta	mb_cmd_divide
.endif
.if (VER=2)|(VER=3)
	; Set step counter to 16
	ldx	#16
	stx	mb_set_divide_width
	; cmd_14 R10 / R7
	stx	mb_cmd_divide
.endif

; R12 = R10				; low and middle of dividend
; q = R11				; high of dividend
; R14 = R7 ^ q ; save sign of result
; R13 = q
; if q >= 0
;   q = R12
; else
;   R13 = q - 1
;   q = R12 - 1
;   if q < 0 && q + 1 < 0
;     R13 ++
;   q ++
; if R7 >= 0
;   R12 = R7
; else
;   R12 = - R7
; R15 = R6 ; step counter
; do
;   R13 -= R12
;   msb = (q & 0x8000) != 0
;   q <<= 1
;   if R13 >= 0
;     q ++
;   else
;     R13 += R12
;   R13 <<= 1
;   R13 += msb
; while --R15 >= 0
;
; if R14 >= 0
;   ans = q
; else
;   ans = -q


.if VER=1
	; Timeout ?
	ldx	#$64
.endif
?b1
	dex
	bmi	?f2
	lda	mb_status_rd
	bmi	?b1

	; Results in A,Y
	lda	mb_rd_l
	ldy	mb_rd_h
?f2
	rts

.if (VER=2)|(VER=3)
	.local
; Appends code to display the three lines of bits showing the configuration
; and input button values.
vapp_test_i3_v2
	; Append a vcentre to the display list
	jsr	vapp_vcentre_40
	lda	#0	; b scale
	jsr	vapp_scale_b
	lda	#$e8
;	ldx	#$f8
	ldy	optsw1
	jsr	?f1
	ldy	optsw2
	jsr	vapp_test_ibmove_v2
	jsr	get_diff_bits_v2
	tay
vapp_test_ibmove_v2
	lda	#$d0	; -48	; X coord
?f1
	ldx	#$f8	; -8	; Y coord
vapp_test_ibits_v2
	sty	L35
	jsr	vapp_ldraw_XY
	ldx	#$07
	stx	loopidx
?loop
	asl	L35
	lda	#0
	rol	a
	jsr	vapp_digit
	dec	loopidx
	bpl	?loop
	rts
.endif ; VER=2,3


	.local

; Display game statistics.
vapp_stats

	;
	; Set up divisor: number of games played
	;

	; 29/2a <= # 2 player games * 2
	lda     games_2p_l
	asl     a
	sta     L29
	lda     games_2p_m
	rol     a
	sta     L2a

	; R7,29/2a <= #2 playgames * 2 + #1 player games
	lda     games_1p_l
	clc
	adc     L29
	sta     mb_set_divisor_l
	sta     L29
	lda     games_1p_m
	adc     L2a
	sta     mb_set_divisor_h

	; Test for 0 games played
	ora     L29
	bne     ?not_zero

	; Prevent divide by zero
	lda     #1
	sta     mb_set_divisor_l
?not_zero


	; set up dividend: the elapsed time
	lda     play_time_l
	sta     mb_set_dividend_l
	lda     play_time_m
	ldx     play_time_h

	; divide play_time_[hml]/R7
	jsr     divide

	sta     secs_avg_l
	sty     secs_avg_m

.if VER=1
	; Set color and intensity to 0
	lda #0       
	sta draw_z        

	sta secs_avg_h      
.endif
	; draw the "SECONDS ON", "SECONDS PLAYED", etc, labels

	; Append a vjsr vg_sub_image_selftest_labels to the display list
	ldax_im	vg_sub_image_selftest_labels
	jsr     vapp_vjsr_AX

	lda     #$06
	sta     ptr1_l
	lda     #$04
	sta     ptr1_h
.if VER=1
	lda	#4
.endif
	sta     loopidx
?loop
	ldy     #$00
	sty     L31
	sty     L32
	sty     L33
	sty     L34
	lda     (ptr1),y
	sta     x_in
	inc     ptr1_l
	lda     (ptr1),y
	sta     y_scale
	inc     ptr1_l
	lda     (ptr1),y
	sta     y_in
	inc     ptr1_l
; From here to the cld at ddc8, code converts a 24-bit number stored in
; x_in/y_scale/y_in into six-nibble BCD, stored in L31/L32/L33.  Only the low
; six digits are retained.
	sed
	ldy     #$17
	sty     L38
?b3
	rol     x_in
	rol     y_scale
	rol     y_in
	ldy     #$03
	ldx     #$00
?b4
	lda     L31,x
	adc     L31,x
	sta     L31,x
	inx
	dey
	bpl     ?b4
	dec     L38
	bpl     ?b3
	cld
	lda     #L31	; Append value at L31
	ldy     #4	; $ pairs of digits
	jsr     vapp_digits
	lda     #$d0 ; -48	; X coord
	ldx     #$f8 ; -8	; Y coord
	jsr     vapp_ldraw_XY
	dec     loopidx
	bpl     ?loop
	rts



.if VER=1
	.byte	$ee
.endif
.if (VER=2)|(VER=3)
	.byte	$73
.endif


	.local


;;;
;;; All of the EAROM code (except for selftest) is gathered here
;;;

; Starting and ending offsets in EAROM of various pieces.

?earom_offset_table
	.byte	$00 ; Top three initials, start
	.byte	$09 ; Top three initials, end
	.byte	$0a ; Top three scores, start
	.byte	$15 ; Top three scores, end
	.byte	$16 ; Switched-on time, start
	.byte	$22 ; Switched-on time, end


; Pointers to RAM versions of EAROM stuff
?ram_addr_table
	.word	hs_initials_3
	.word	hs_score_3
	.word	on_time


zero_times
	lda     #$04
	bne     ?f1



zero_scores
	lda     #$03
	bne     ?f1


Lddf1
	lda     #$07
?f1
	ldy     #$ff
	bne     ?f3



Lddf7
	lda     #$03
	bne     ?f2



Lddfb
	lda     #$04
?f2
	ldy     #$00
?f3
	sty     earom_clr ; A now 3/4/7; Y now $00/$ff
	pha
;Lde03
	ora     L01c7
	sta     L01c7
	pla
	ora     L01c8
	sta     L01c8
	rts



Lde11
	lda     #$07
	sta     L01c7
	lda     #$00
	sta     L01c8




Lde1b
	lda     earom_op
	bne     ?f4a
	lda     L01c7
	beq     ?f4a
	ldx     #$00
;Lde27
	stx     earom_blkoff
	stx     earom_cksum
	stx     L01ce
; This loop finds the highest bit in A and leaves it in L01ce - the bcc
; tests the C bit set by the asl; the dex doesn't touch C.  It also leaves
; the bit number of this bit in X (0 to 2, since A is $0-$7).
	ldx     #$08
	sec
?b4
	ror     L01ce
	asl     a
	dex
	bcc     ?b4
	ldy     #$80
	lda     L01ce
	and     L01c8
	bne     ?f5
	ldy     #$20
?f5
	sty     earom_op
	lda     L01ce
	eor     L01c7
	sta     L01c7
	txa
	asl     a
	tax
	lda     ?earom_offset_table,x
;Lde58
	sta     earom_ptr
	lda     ?earom_offset_table+1,x
;Lde5e
	sta     earom_blkend
	lda     ?ram_addr_table,x
	sta     earom_memptr
	lda     ?ram_addr_table+1,x
	sta     earom_memptr+1
?f4a
	ldy     #$00
	sty     earom_ctrl_wr
	lda     earom_op
	bne     ?f5a
	rts
?f5a
	ldy     earom_blkoff
;Lde79
	ldx     earom_ptr
	asl     a
	bcc     ?f6
; EAROM op $80
	sta     earom_write,x
	lda     #$40
	sta     earom_op
	ldy     #$0e
	clv
	bvc     ?f15
?f6
	bpl     ?f9
; EAROM op $40
	lda     #$80
	sta     earom_op
	lda     earom_clr
	beq     ?f7
	lda     #$00
	sta     (earom_memptr),y
?f7
	lda     (earom_memptr),y
;Lde9e
	cpx     earom_blkend
	bcc     ?f8
	lda     #$00
	sta     earom_op
	lda     earom_cksum
?f8
	sta     earom_write,x
	ldy     #$0c
	clv
	bvc     ?f14
; EAROM op $20
?f9
	lda     #$08
	sta     earom_ctrl_wr
	sta     earom_write,x
	lda     #$09
	sta     earom_ctrl_wr
	nop
	lda     #$08
	sta     earom_ctrl_wr
;Ldec6
	cpx     earom_blkend
	lda     earom_rd
	bcc     ?f12
	eor     earom_cksum
	beq     ?f11
	lda     #$00
	ldy     earom_blkoff
?b10
	sta     (earom_memptr),y
	dey
	bpl     ?b10
	lda     L01ce
	ora     hs_initflag
	sta     hs_initflag
?f11
	lda     #$00
	sta     earom_op
	clv
	bvc     ?f13
?f12
	sta     (earom_memptr),y
?f13
	ldy     #$00
?f14
	clc
	adc     earom_cksum
	sta     earom_cksum
;Ldef9
	inc     earom_blkoff
;Ldefc
	inc     earom_ptr
?f15
	sty     earom_ctrl_wr
	tya
	bne     ?f16
	jmp     Lde1b
?f16
	rts






	.local

; vapp_vrts
;
;   Append a vrts to vidptr
;

vapp_vrts
	lda     #_vg_opc_vrts
	bne     ?f1		; Always branch



;
; vapp_vcentre_vhalt
;
;   Append a vcentre to the display list
;

vapp_vcentre_vhalt
	jsr     vapp_vcentre_40
	.fall	vapp_vhalt



;
; vapp_vhalt
;
; Append a vhalt to vidptr
;

vapp_vhalt
	lda     #_vg_opc_vhalt
?f1
	ldy     #0
	sta     (vidptr),y
	jmp     Ldfac



	.local

;
; vapp_digit_lz
;
;   Appends the vjsr for the digit corresponding to the low four bits of A
;   on entry.  If C is set, zeros become spaces; C is cleared if the digit
;   is nonzero.
;
;   In:
;     A digit to append
;     carry: if set, zeros become spaces
;
;   Out:
;     carry: if set, the digit was a zero
;

vapp_digit_lz
	bcc     vapp_digit
	and     #$0f
	beq     ?f1
vapp_digit
	and     #$0f
	clc
	adc     #$01
?f1
	php
	asl     a
	ldy     #$00
	tax
	lda     char_jsrtbl,x
	sta     (vidptr),y
	lda     char_jsrtbl+1,x
	iny
	sta     (vidptr),y
	jsr     inc_vidptr
	plp
	rts



	.local
;
; vapp_vjsr_AX
;
;    Append a vjsr to the video list
;
;      A high byte of address
;      X low byte of address
;
; Note that the $e0 bits of A are ignored.  (The
; low bit of X is discarded too, but the vjsr format compels this anyway;
; a vjsr to an odd address is not representible.)
;

vapp_vjsr_AX
	lsr     a
	and     #$f
	ora     #_vg_opc_vjsr
	ldy     #1
	sta     (vidptr),y
	dey
	txa
	ror     a
	sta     (vidptr),y
	iny
	bne     inc_vidptr


;
; vapp_vstat_A
;
;   Append a vstat.
;
;   In:
;    A: sparkle in bit 3, bit 5 of z in bit 1
;    draw_z: z in the high nibble, c in the low
;

vapp_vstat_A
	ldy     draw_z
	.fall	vapp_vstat_A_Y


;
; vapp_vstat_A_Y
;
;   Append a vstat to the display list
;
;   In:
;    A: sparkle in bit 3, bit 5 of z in bit 1
;    Y: z in the high nibble, c in the low

vapp_vstat_A_Y
	ora     #_vg_opc_vstat
	tax
	tya
	jmp     vapp_A_X



;
; vapp_centre_40
;
;   Append a vcentre to the display list, with the $20 bit set
;
; (why $40? who knows.) I suspect the the 20 is a marker that can be
; searched for.
;

vapp_vcentre_40
	lda     #$40
	ldx     #_vg_opc_vcentre
	.fall	vapp_A_X



; 
; Append first A, then X, to the video stream.
;

vapp_A_X
	ldy     #$00
	.fall	vapp_A_X_at_y

;
; Append A then X to the video stream at offset Y


vapp_A_X_at_y
	sta     (vidptr),y
	iny
	txa
	sta     (vidptr),y


	.local

;
; inc_vidptr
;
;   Increment vidptr by the offset accumulated in y
;
;   In:
;     Y: Amount to increment by
;

inc_vidptr
	tya
	sec
	adc     vidptr_l
	sta     vidptr_l
	bcc     ?f1
	inc     vidptr_h
?f1
	rts



	.local

;
; vapp_scale_b
;
;   Append a vscale to the video stream, with l = 0
;
;   In:
;     A: b
;   (we assume its in range).
;

vapp_scale_b
	ldy     #0
	.fall	vapp_scale_lb




	.local
;
; vapp_scale_lb
;
;   Append a vscale to the video stream
;
;   In:
;     Y: l
;     A: b
;   (we assume they're in range).
;

vapp_scale_lb
	ora     #_vg_opc_vscale
	tax
	tya
	jmp     vapp_A_X


	.local
;
; vapp_ldraw_XYZ
;   Append a long draw to the video list
;
;   In:
;     A: X coordinate, sign extended
;     X: Y coordinate, sign extended
;     Y: Z value from high 3 bits
;
;   Trashed: Y, L6e, L6f, L70, L71, draw_z
;

vapp_ldraw_XYZ
	sty     draw_z
	.fall	vapp_ldraw_XY




	.local

;
; vapp_ldraw_XY
;   Append a long draw to the video list
;
;   In:
;     A: X coordinate, sign extended
;     X: Y coordinate, sign extended
;     draw_z: Z value from high 3 bits
;
;   Trashed: Y, L6e, L6f, L70, L71
;
;

vapp_ldraw_XY

	; Sign extend A into Y
	ldy     #0
	asl     a
	bcc     ?f1
	dey
?f1

	; X coord high byte in L6f
	; X * 2 in A 
	sty     L6f

	; Shift bit 6 of the X coord into the carry
	asl     a

	; Shift bit 6 of the X coord into the high byte
	rol     L6f

	; Store the low byte
	sta     L6e
	txa

	; Get the Y coord, repeat above storing into L70, L71

	asl     a
	ldy     #0
	bcc     ?f2
	dey
?f2
	sty     L71
	asl     a
	rol     L71
	sta     L70

	; Point X at the coordinates
	ldx     #L6e

Ldf92
	ldy     #0
	; Copy byte 2 of the coordinates (Y coord. low byte) to the display list
	lda     2,x
	sta     (vidptr),y

	; Copy the low 5 bits of byte 3 of the coordinates (Y coord high byte) to the display list
	; The opcode goes in here, but it is 0 for the long draw operation, so it magically appears
	lda     3,x
	and     #$1f
	iny
	sta     (vidptr),y

	; Copy byte 0 of the coordinates (X coord. low byte) to the display list
	lda     0,x
	iny
	sta     (vidptr),y

	; Copy the low 5 bits of byte 0 of the coordinates (X coord low byte)  plus the high 3
	; bits of draw_z to the display list
	lda     1,x
	eor     draw_z
	and     #$1f
	eor     draw_z
Ldfac
	iny
	sta     (vidptr),y

	; Update the display list pointer
	bne     inc_vidptr	; Always branch


	.local

;;;
;;; vapp_digits
;;;    Append a multidigit number
;;;    In:
;;;      A  zero page address of low two digits of number
;;;      Y  number of digit pairs to append
;;;

vapp_digits

	; Set the "zeros become spaces" leading zero flag.
	sec

	; The flag lives on the stack.
	php

	; Convert "number of digit pairs/bytes" to offset of highest
	; byte.
	dey

	; Save offset.
	sty     vapp_digits_index

	; Calculate the address of the last byte (add offset to base address).
	clc
	adc     vapp_digits_index

	; Restore the leading zero state flag.
	plp

	; X <- address of last byte.
	tax


?loop
	; Carry: leading zero state flag
	; X: address of current byte
	; vapp_digits_index: offset of current byte

	; Save the leading zero state flag.
	php

	; Save the address of the last byte.
	stx     vapp_digits_ptr

	; Get the byte.
	lda     page0,x

	; Get the high nibble.
	lsr     a
	lsr     a
	lsr     a
	lsr     a

	; Restore the leading zero state flag.
	plp

	; Append the digit in A to the display list
	jsr     vapp_digit_lz

	
	; If this is the last byte, then the low nibble will
	; be the last digit, and should be drawn as a zero
	; regarodless of the leading zero state.
	lda     vapp_digits_index
	bne     ?f4

	; Force the draw 
	clc
?f4


	; Get the pointer.
	ldx     vapp_digits_ptr

	; Get the byte.
	lda     page0,x

	; Append the digit in A to the display list
	jsr     vapp_digit_lz


	; Restore X
	ldx     vapp_digits_ptr

	; Move to the previous byte
	dex

	; Decrement the index
	dec     vapp_digits_index

	; while (vapp_digits_index >= 0)
	bpl     ?loop

	rts



.if VER=1
	.dc	30 0
.endif


.if (VER=2)|(VER=3)
; Used at $dbb2
; This is the same table in all versions, just in different locations
Ldc4f
        .byte   $10
        .byte   $10
        .byte   $40
        .byte   $40
        .byte   $90
        .byte   $90
        .byte   $ff
        .byte   $ff
; 20-element sine wave, for drawing the spinner line on selftest screen 1
spinner_sine
	.byte	$00, $0c, $16, $1e
spinner_cosine
	.byte	$20, $1e, $16, $0c
	.byte	$00, $f4, $ea, $e2, $e0, $e2, $ea, $f4
	.byte	$00, $0c, $16, $1e, $00
	.byte 	0
.endif
vec_nmi	.word	nmi_irq_brk
vec_res	.word	reset
vec_brk_irq	.word	nmi_irq_brk

pass1_done = 1

